{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to my wiki.</p> <p>Themes includes:</p> <ul> <li> <p>Computer Science and Robotics Theme</p> <ul> <li>Artificial Intelligence</li> <li>Robotics</li> </ul> </li> <li> <p>BioTech Theme (I believe this will be next gen's bomb)</p> <ul> <li>Wetware</li> </ul> </li> <li> <p>Social Theme (My views on future society)</p> <ul> <li>SDPAP (My Ideology)</li> </ul> </li> <li> <p>Social Science Theme</p> <ul> <li>Philosophy</li> <li>History</li> </ul> </li> <li> <p>Resources Allocation Theme</p> <ul> <li>Economics</li> <li>Politics</li> <li>Business and Entrepreneur</li> <li>Finance</li> <li>Investment</li> </ul> </li> </ul>"},{"location":"Academy/AboutMe/","title":"AboutMe.md","text":""},{"location":"Academy/AboutMe/#about-me","title":"About Me","text":"<p>I'm Jeff, graduated from Business and Social Science majors. Now I'm interested in Computer Science, Artificial Intelligence and Robotics. I aim to start my own business in Tech field to furthermore fullfill my final dream: SDPAP, a society that only robots work and humans can choose to learn what they are interested in.</p> <p>All my study routes are opened here for those who need. What I love most about the computer industry is the spirit of open source, a great initiative where everyone contributes to and benefits from each other. In my dream, the future world is not a cyberpunk high-tech low-life society, but a high-tax high-welfare society where full automation of production and a reasonable distribution system allow everyone to live healthily and happily, learning the knowledge they want to learn.</p>"},{"location":"Academy/AboutMe/#special-thanks-and-references-in-chronological-order","title":"Special Thanks and References (In Chronological Order)","text":"<p>csdiy.wiki CS\u81ea\u5b66\u6307\u5357 CS50 - Harvard University CS61B - UC Berkeley ChatGPT - OpenAI</p>"},{"location":"Academy/Questions/","title":"Questions.md","text":""},{"location":"Academy/Questions/#java","title":"java","text":""},{"location":"Academy/Questions/#nested-class","title":"Nested Class\u7684\u7528\u6cd5\u8fd8\u9700\u8981\u66f4\u591a\u7684\u7406\u89e3\u548c\u66f4\u6df1\u7684\u638c\u63e1","text":"<p>nested static class</p>"},{"location":"Academy/Questions/#reflection","title":"Reflection\u673a\u5236\u8fd8\u6ca1\u6709\u660e\u767d\u662f\u4ec0\u4e48\u610f\u601d","text":""},{"location":"Academy/Questions/#static-type-dynamic-typeconfused","title":"static type, dynamic type\u8fd8\u662f\u6709\u70b9confused","text":"<p>https://cs61b-2.gitbook.io/cs61b-textbook/11.-inheritance-iii-subtype-polymorphism-comparators-comparable/11.1-a-review-of-dynamic-method-selection</p> <p>11.1 A Review of Dynamic Method Selection In previous lectures we have gone over classes extending other classes, and to make sense of this we considered whether the sub class has an \"is-a relationship\" with the superclass. For example, if we had the two classes:</p> <p>Dog: Implements bark() method</p> <p>ShowDog: Extends Dog, overrides bark method</p> <p>This would be a valid extension as a ShowDog is-a Dog and a Dog is-an Object. These relationships satisfy the condition of a subclass being-an instance of the super class.  </p> <p>With this in Mind, what are the Rules to Decide if the Code Would Run or Run into Errors? This is a particularly tricky problem to solve but the rules to look out for include:</p> <p>Compliers will allow Memory Boxes to hold any subtype of itself</p> <p>For example, compliers will allow the Dog memory box to hold a ShowDog object as a ShowDog is a subtype of the Dog Class</p> <p>Compliers will allow calls based on Static type.</p> <p>For example, if a variable were declared as a Dog it's static type would be a Dog and the complier would allowed it to call bark()</p> <p>Overridden non-static methods are selected at run time based on dynamic type.</p> <p>Everything else is based on static types, inculding overloaded methods.</p> <p>Static Type vs. Dynamic Type Every variable in Java has a \u201ccompile-time type\u201d, a.k.a. \u201cstatic type\u201d.</p> <p>This is the type specified at declaration. Never changes!</p> <p>Variables also have a \u201crun-time type\u201d, a.k.a. \u201cdynamic type\u201d.</p> <p>This is the type specified at instantiation (e.g. when using new).</p> <p>Equal to the type of the object being pointed at.</p>"},{"location":"Academy/Questions/#07_inheritance_8_explicit-higher-order-functions","title":"07_Inheritance_8_Explicit-Higher-Order-Functions","text":"<p>\u8fd9\u4e00\u90e8\u5206\u5148mark\uff0c\u7b49cs61b\u770b\u5b8c\u4e4b\u540e\u518d\u91cd\u65b0\u770b</p>"},{"location":"Academy/StudyPlan/","title":"StudyPlan.md","text":"<p>\u6ce8\uff1a\u672c\u9875\u9762\u4e3a\u89c4\u5212\uff0c\u975e\u5b9e\u9645\u5b66\u4e60\u8def\u7ebf\u3002\u5b9e\u9645\u5b66\u4e60\u8def\u7ebf\u89c1[[StudyRoute]]</p> <p>\u65b9\u5411\uff08\u63a2\u7d22\u4e2d\uff0c\u6682\u5b9a\u65b9\u5411\uff09\uff1a AI Robotics Wetware Entreprneurship</p>"},{"location":"Academy/StudyPlan/#tech-stack-100","title":"Tech Stack - 100%","text":""},{"location":"Academy/StudyPlan/#fronted-development-5","title":"Fronted Development - 5%","text":"<p>\u6d89\u53ca\u7528\u6237\u754c\u9762\u548c\u7528\u6237\u4f53\u9a8c\uff0c\u4f7f\u7528HTML\u3001CSS\u3001JavaScript\u53ca\u5176\u6846\u67b6\uff08\u5982React\u3001Angular\u3001Vue.js\uff09\u7b49\u6280\u672f\u6765\u521b\u5efa\u548c\u8bbe\u8ba1\u7f51\u9875\u7684\u89c6\u89c9\u6548\u679c\u548c\u4ea4\u4e92\u529f\u80fd\u3002</p>"},{"location":"Academy/StudyPlan/#backend-development-30","title":"Backend Development - 30%","text":"<p>\u6d89\u53ca\u670d\u52a1\u5668\u7aef\u903b\u8f91\u3001\u6570\u636e\u5e93\u548c\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3\uff08API\uff09\u7684\u5f00\u53d1\u3002\u5e38\u7528\u7684\u540e\u7aef\u8bed\u8a00\u548c\u6846\u67b6\u5305\u62ecNode.js\u3001Python\uff08Django\u3001Flask\uff09\u3001Ruby on Rails\u3001Java\uff08Spring\uff09\u3001PHP\uff08Laravel\uff09\u7b49\u3002</p> <p>Programming: Java, Python, JavaScript(Node.js) Framework: Spring Boot(Java), Django(Python), Express.js(Node.js) Database: PostgreSQL, MongoDB, Redis DevOps: Docker, Kubernetes, AWS(EC2, S3, Lambda), Jenkins Collaboration Tools: Git, Github</p>"},{"location":"Academy/StudyPlan/#database-5","title":"Database - 5%","text":"<p>\u8bbe\u8ba1\u548c\u7ba1\u7406\u6570\u636e\u5b58\u50a8\u3002\u5e38\u7528\u7684\u6570\u636e\u5e93\u5305\u62ec\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u5982MySQL\u3001PostgreSQL\uff09\u548c\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff08\u5982MongoDB\u3001Redis\uff09\u3002</p> <p>\u8be5\u6280\u672f\u6808\u5bf9\u540e\u7aef\u5f00\u53d1\u6700\u91cd\u8981\uff0c\u5728\u4eba\u5de5\u667a\u80fd\u548c\u673a\u5668\u4eba\u9886\u57df\u4e86\u89e3\u5373\u53ef\u3002</p>"},{"location":"Academy/StudyPlan/#server-and-deployment-5","title":"Server and Deployment - 5%","text":"<p>\u7ba1\u7406\u670d\u52a1\u5668\u3001\u914d\u7f6e\u548c\u7ef4\u62a4\u670d\u52a1\u5668\u73af\u5883\u3001\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u3002\u5e38\u7528\u7684\u5de5\u5177\u548c\u5e73\u53f0\u5305\u62ecDocker\u3001Kubernetes\u3001AWS\u3001Azure\u3001Heroku\u7b49\u3002</p>"},{"location":"Academy/StudyPlan/#artificial-intelligence-35","title":"Artificial Intelligence - 35%","text":"<p>Programming: Python Framework: TensorFlow, PyTorch, Scikit-learn Data: NumPy, Pandas, SciPy NLP: Transformers (Hugging Face), SpaCy CV: OpenCV, TensorFlow/Keras\uff08Keras\u73b0\u5728\u96c6\u6210\u5728TensorFlow\u5185\uff09 BigData: Apache Spark, Kafka Math: Linear, Probability, Statistic</p>"},{"location":"Academy/StudyPlan/#robotics-20","title":"Robotics - 20%","text":"<p>Programming: ROS, C++ Framework: ROS, Gazebo, MoveIt! CV: OpenCV, TensorFlow/Keras\uff08Keras\u73b0\u5728\u96c6\u6210\u5728TensorFlow\u5185\uff09 Math: Linear, Control Theory, Dynamics(\u52a8\u529b\u5b66)</p>"},{"location":"Academy/StudyPlan/#study-plan-in-subjects","title":"Study Plan in subjects","text":""},{"location":"Academy/StudyPlan/#mathmatics","title":"Mathmatics","text":"<p>Caculus \u2192 Linear Algebra \u2192 Probabilities \u2192 Statistics  \u2192 \u4f18\u5316\u7406\u8bba\uff08\u51f8\u4f18\u5316\u3001\u68af\u5ea6\u4e0b\u964d\uff09</p>"},{"location":"Academy/StudyPlan/#algorithm-and-data-structures","title":"Algorithm and Data Structures","text":"<p>CS61B \u2192 Edx GTx Data Structures and Algorithms \u2192 Edx Stanford ONline Algorithms Design and Analysis</p> <p>(Brandeis) CS12B Java \u2192 CS21A Data Structures \u2192 CS180A Algorithms</p>"},{"location":"Academy/StudyPlan/#computer-science-foundations","title":"Computer Science Foundations","text":"<p>COSI-29A Discrete Structures COSI-131A Operating System</p>"},{"location":"Academy/StudyPlan/#software-engineering","title":"Software Engineering","text":"<p>COSI-102 Software Entrepreneurship</p>"},{"location":"Academy/StudyPlan/#ai","title":"AI","text":"<p>COSI-104 Intro to Machine Learning \u2192 COSI-165B Deep Learning</p>"},{"location":"Academy/StudyPlan/#robotics","title":"Robotics","text":"<p>COSI-119 Autonomous Robotics</p>"},{"location":"Academy/StudyPlan/#wetware","title":"Wetware","text":"<p>NBIO-136 Computational Neuroscience</p> <p>==============================================</p>"},{"location":"Academy/StudyPlan/#robotics-scpd","title":"Robotics (SCPD)","text":"<p>(Required) \u2705AA274A/CS237A Principles of Robot Autonomy I \u2705AA274B/CS237B Principles of Robot Autonomy II</p> <p>(Decision Making) AA203 Optimal and Learning-based Control AA228 Decision Making Under Uncertainty</p> <p>(Dynamics and Control) CS223A Introduction to Robotics \u3010\u670915\u5e74\u524dversion\u7684\u514d\u8d39\u516c\u5f00\u8bfe\uff0cYoutube\u3011 ENGR205 Introduction to Control Design Techniques ME334 Advanced Dynamics</p> <p>(Perception and Sensor Fusion) CS231N Deep Learning for Computer Vision \u3010\u6709\u514d\u8d39\u516c\u5f00\u8bfe\uff0cYoutube/B\u7ad9\u3011 AA273 State Estimation and Filtering for Robotic Perception</p> <p>(Others) CS228 Probabilistic Graphical Models: Principles and Techniques CS224R Deep Reinforcement Learning CS326 Topics in Advanced Robotic Manipulation</p> <p>=========================================</p> <p>(\u53c2\u8003AI\u5e8f\u5217 - Required) - CS221 Artificial Intelligence: Principles and Techniques \u3010\u6709\u514d\u8d39\u516c\u5f00\u8bfe\uff0cYoutube\u3011 - CS229 Machine Learning \u3010\u6709\u514d\u8d39\u516c\u5f00\u8bfe\uff0cYoutube\u3011</p> <p>(\u53c2\u8003AI\u5e8f\u5217 - Elective) - CS157 Computational Logic \u3010\u6709\u514d\u8d39\u516c\u5f00\u8bfe\uff0c\u5728coursera\u4e0a\u3011 - CS224N Natural Language Processing with Deep Learning \u3010\u6709\u514d\u8d39\u516c\u5f00\u8bfe\uff0cYoutube/B\u7ad9\u3011 - CS224U Natural Language Understanding \u3010\u6709\u514d\u8d39\u516c\u5f00\u8bfe\uff0cYoutube\u3011 - CS224W Machine Learning with Graphs \u3010\u6709\u514d\u8d39\u516c\u5f00\u8bfe\uff0cYoutube\u3011 - CS228 Probabilistic Graphical Models: Principles and Techniques - CS230 Deep Learning \u3010\u6709\u514d\u8d39\u516c\u5f00\u8bfe\uff0cB\u7ad9\u3011 - CS231A Computer Vision: From 3D Reconstruction to Recognition \u3010\u6709\u514d\u8d39\u516c\u5f00\u8bfe\uff0cYoutube\u3011 - CS234 Reinforcement Learning \u3010\u6709\u514d\u8d39\u516c\u5f00\u8bfe\uff0cB\u7ad9\u3011 - CS236 Deep Generative Models \u3010\u6709\u514d\u8d39\u516c\u5f00\u8bfe\uff0cB\u7ad9\u3011 - CS246 Mining Massive Data Sets \u3010\u6709\u514d\u8d39\u516c\u5f00\u8bfe\uff0cB\u7ad9\u3011</p> <p>==============================</p>"},{"location":"Academy/StudyPlan/#study-plan-for-roboticsai-industry","title":"Study plan for Robotics(AI) Industry","text":"<p>\u4e3a\u4e86\u66f4\u5177\u4f53\u5730\u4e3a\u673a\u5668\u4eba\u548cAI\u9886\u57df\u7684\u5de5\u4f5c\u505a\u51c6\u5907\uff0c\u4f60\u9700\u8981\u5b66\u4e60\u548c\u638c\u63e1\u4ee5\u4e0b\u6280\u80fd\u548c\u6280\u672f\uff1a</p>"},{"location":"Academy/StudyPlan/#_1","title":"\u7f16\u7a0b\u8bed\u8a00","text":"<ul> <li>Python\uff1a\u5e7f\u6cdb\u7528\u4e8eAI\u548c\u673a\u5668\u5b66\u4e60\u9886\u57df\uff0c\u62e5\u6709\u4e30\u5bcc\u7684\u5e93\u548c\u6846\u67b6\uff0c\u5982TensorFlow\u3001PyTorch\u3001scikit-learn\u7b49\u3002</li> <li>C++\uff1a\u5e38\u7528\u4e8e\u673a\u5668\u4eba\u5b66\u4e2d\u7684\u4f4e\u5c42\u6b21\u63a7\u5236\u548c\u6027\u80fd\u5173\u952e\u90e8\u5206\u3002</li> </ul>"},{"location":"Academy/StudyPlan/#_2","title":"\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60","text":"<ul> <li>\u6570\u5b66\u57fa\u7840\uff1a\u7ebf\u6027\u4ee3\u6570\u3001\u6982\u7387\u8bba\u548c\u7edf\u8ba1\u5b66\u662f\u7406\u89e3\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u57fa\u7840\u3002</li> <li>\u7b97\u6cd5\u548c\u6846\u67b6\uff1a\u5b66\u4e60\u5e38\u89c1\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u548c\u6846\u67b6\uff0c\u5982TensorFlow\u3001PyTorch\u3001Keras\u7b49\u3002</li> </ul>"},{"location":"Academy/StudyPlan/#_3","title":"\u8ba1\u7b97\u673a\u89c6\u89c9","text":"<ul> <li>\u56fe\u50cf\u5904\u7406\u57fa\u7840\uff1a\u5b66\u4e60OpenCV\u7b49\u5e93\uff0c\u7406\u89e3\u56fe\u50cf\u5904\u7406\u7684\u57fa\u672c\u6982\u5ff5\u3002</li> <li>\u6df1\u5ea6\u5b66\u4e60\u5e94\u7528\uff1a\u4f7f\u7528\u6df1\u5ea6\u5b66\u4e60\u6280\u672f\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b\u3001\u5bf9\u8c61\u68c0\u6d4b\u3001\u56fe\u50cf\u5206\u5272\u7b49\u4efb\u52a1\u3002</li> </ul>"},{"location":"Academy/StudyPlan/#_4","title":"\u673a\u5668\u4eba\u5b66","text":"<ul> <li>\u63a7\u5236\u7406\u8bba\uff1a\u7406\u89e3\u673a\u5668\u4eba\u63a7\u5236\u7684\u57fa\u672c\u539f\u7406\u548c\u7b97\u6cd5\u3002</li> <li>\u673a\u5668\u4eba\u64cd\u4f5c\u7cfb\u7edf\uff08ROS\uff09\uff1aROS\u662f\u673a\u5668\u4eba\u5f00\u53d1\u7684\u6807\u51c6\u5e73\u53f0\uff0c\u4e86\u89e3\u5176\u57fa\u672c\u4f7f\u7528\u548c\u5f00\u53d1\u65b9\u6cd5\u3002</li> </ul>"},{"location":"Academy/StudyPlan/#_5","title":"\u6570\u636e\u79d1\u5b66","text":"<ul> <li>\u6570\u636e\u9884\u5904\u7406\u548c\u5206\u6790\uff1a\u719f\u6089pandas\u3001NumPy\u7b49\u6570\u636e\u5904\u7406\u5e93\u3002</li> <li>\u6570\u636e\u53ef\u89c6\u5316\uff1a\u5b66\u4e60matplotlib\u3001Seaborn\u7b49\u53ef\u89c6\u5316\u5de5\u5177\u3002</li> </ul>"},{"location":"Academy/StudyPlan/#nlp","title":"\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09","text":"<ul> <li>NLP\u57fa\u7840\uff1a\u7406\u89e3\u6587\u672c\u5904\u7406\u7684\u57fa\u672c\u65b9\u6cd5\u548c\u6280\u672f\uff0c\u5982\u5206\u8bcd\u3001\u8bcd\u6027\u6807\u6ce8\u3001\u8bed\u6cd5\u89e3\u6790\u7b49\u3002</li> <li>\u6df1\u5ea6\u5b66\u4e60\u5728NLP\u4e2d\u7684\u5e94\u7528\uff1a\u5b66\u4e60Transformer\u3001BERT\u7b49\u524d\u6cbf\u6a21\u578b\u3002</li> </ul>"},{"location":"Academy/StudyPlan/#_6","title":"\u5b66\u4e60\u8def\u5f84\u5efa\u8bae","text":"<ol> <li>\u57fa\u7840\u7f16\u7a0b\uff1a\u5f3a\u5316Python\u548cC++\u7f16\u7a0b\u6280\u80fd\u3002</li> <li>\u6570\u5b66\u548c\u7b97\u6cd5\uff1a\u5b66\u4e60\u7ebf\u6027\u4ee3\u6570\u3001\u6982\u7387\u8bba\u548c\u7edf\u8ba1\u5b66\uff0c\u4ee5\u53ca\u57fa\u672c\u7684\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u3002</li> <li>\u4e13\u6ce8\u9886\u57df\uff1a\u6839\u636e\u5174\u8da3\u9009\u62e9\u8ba1\u7b97\u673a\u89c6\u89c9\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6216\u673a\u5668\u4eba\u5b66\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u65b9\u5411\u6df1\u5165\u5b66\u4e60\u3002</li> <li>\u5b9e\u8df5\u9879\u76ee\uff1a\u901a\u8fc7\u53c2\u4e0e\u5f00\u6e90\u9879\u76ee\u3001\u8bfe\u7a0b\u9879\u76ee\u6216\u5b9e\u4e60\uff0c\u79ef\u7d2f\u5b9e\u9645\u7ecf\u9a8c\u3002</li> <li>\u8fdb\u9636\u5b66\u4e60\uff1a\u5b66\u4e60\u548c\u4f7f\u7528\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff08\u5982TensorFlow\u3001PyTorch\uff09\u548c\u673a\u5668\u4eba\u64cd\u4f5c\u7cfb\u7edf\uff08ROS\uff09\u3002</li> </ol>"},{"location":"Academy/StudyPlan/#_7","title":"\u8d44\u6e90\u63a8\u8350","text":""},{"location":"Academy/StudyPlan/#_8","title":"\u5728\u7ebf\u8bfe\u7a0b","text":"<ul> <li>Coursera\u4e0a\u7684\u673a\u5668\u5b66\u4e60\u8bfe\u7a0b\uff08\u5982Andrew Ng\u7684\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u8bfe\u7a0b\uff09</li> <li>edX\u4e0a\u7684AI\u548c\u673a\u5668\u4eba\u5b66\u8bfe\u7a0b</li> <li>Udacity\u7684\u81ea\u9a7e\u8f66\u5de5\u7a0b\u5e08\u548c\u673a\u5668\u4eba\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u7eb3\u7c73\u5b66\u4f4d</li> </ul>"},{"location":"Academy/StudyPlan/#_9","title":"\u4e66\u7c4d","text":"<ul> <li>\u300a\u673a\u5668\u5b66\u4e60\u5b9e\u6218\u300b by Peter Harrington</li> <li>\u300a\u6df1\u5ea6\u5b66\u4e60\u300b by Ian Goodfellow, Yoshua Bengio, Aaron Courville</li> <li>\u300a\u673a\u5668\u4eba\u5b66\uff1a\u7535\u5b50\u3001\u63a7\u5236\u3001\u611f\u77e5\u548c\u667a\u80fd\u300b by Mark W. Spong, Seth Hutchinson, M. Vidyasagar</li> </ul>"},{"location":"Academy/StudyPlan/#_10","title":"\u5b9e\u8df5\u5e73\u53f0","text":"<ul> <li>Kaggle\uff1a\u4e00\u4e2a\u6570\u636e\u79d1\u5b66\u7ade\u8d5b\u5e73\u53f0\uff0c\u53ef\u4ee5\u7ec3\u4e60\u548c\u5c55\u793a\u4f60\u7684\u673a\u5668\u5b66\u4e60\u6280\u80fd\u3002</li> <li>GitHub\uff1a\u53c2\u4e0e\u5f00\u6e90\u9879\u76ee\uff0c\u79ef\u7d2f\u7ecf\u9a8c\u5e76\u5c55\u793a\u4f60\u7684\u9879\u76ee\u3002</li> </ul>"},{"location":"Academy/StudyPlan/#study-plan-in-periods","title":"Study Plan in Periods","text":""},{"location":"Academy/StudyPlan/#2024-summer","title":"2024 summer","text":"<p>build foundations\uff1a</p> <p>\u7f16\u7a0b\u8bed\u8a00\u4ee5java\u548cpython\u4e3a\u4e3b\u8981\u5de5\u5177</p> <p>\u5b66\u4e60\u5185\u5bb9\u4e3b\u8981\u4e3a\u6570\u636e\u7ed3\u6784\u3001\u7b97\u6cd5</p> <p>\u5b9e\u8df5\u5e73\u53f0\uff1aLeetCode\u548cHackerRank\uff08\u7528\u4e8e\u7b97\u6cd5\u7ec3\u4e60\uff09\u3001GitHub\uff08\u7528\u4e8e\u9879\u76ee\u7ba1\u7406\u548c\u5c55\u793a\uff09\u3001Kaggle\uff08\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u6bd4\u8d5b\u548c\u6570\u636e\u96c6\uff09</p> <p>\u6570\u5b66\u57fa\u7840\uff08\u4e0d\u7528\u592a\u6df1\uff09\uff1a\u7ebf\u6027\u4ee3\u6570\u3001\u5fae\u79ef\u5206\u3001\u79bb\u6563\u6570\u5b66</p> <p>USACO\u5185\u5bb9\u719f\u6089\u3001\u8bb2\u8bfe\u5907\u6848\u3001\u6253\u6bd4\u8d5b\u7ec3\u624b</p> <p>\u627e\u5de5\uff1a\u786e\u5b9a\u4e00\u4e0b\u8fdb\u5165\u5934\u90e8\u516c\u53f8\u9700\u8981\u4ec0\u4e48\u51c6\u5907;\u51c6\u5907\u7b80\u5386\u3001\u4f18\u5316linkedin\u8d44\u6599\u3001\u6574\u7406\u4e4b\u524d\u7684\u5de5\u4f5c\u7ecf\u9a8c\u5e76\u8f6c\u5316\u4e3a\u5bf9CS\u5b66\u4e60\u53ca\u5de5\u4f5c\u7684\u652f\u6301\uff1b\u5f00\u59cb\u7533\u8bf7\u6691\u671f\u5b9e\u4e60\uff0c\u76ee\u6807\u516c\u53f8\u5305\u62ec\u5927\u516c\u53f8\u548c\u5c0f\u578b\u521d\u521b\u516c\u53f8\uff1b\u5229\u7528\u5b66\u6821career fair\u53c2\u52a0\u62db\u8058\u4f1a\u548c\u516c\u53f8\u4fe1\u606f\u4f1a</p>"},{"location":"Academy/StudyPlan/#2024-fall","title":"2024 fall","text":"<p>\u5b66\u6821</p> <p>\u8bfe\u7a0b\u5b66\u4e60\uff1a\u53c2\u52a0\u5b9e\u9a8c\u5ba4\u6216\u9879\u76ee\u8bfe\u7a0b\uff0c\u79ef\u7d2f\u5b9e\u9645\u52a8\u624b\u7ecf\u9a8c</p> <p>Network\uff1a\u548c\u5bfc\u5e08\u5efa\u7acb\u826f\u597d\u5173\u7cfb\uff0c\u4ed6\u4eec\u53ef\u4ee5\u63d0\u4f9b\u63a8\u8350\u4fe1\u548c\u804c\u4e1a\u6307\u5bfc\uff1b\u901a\u8fc7linkedin\u7b49\u793e\u4ea4\u5a92\u4f53\u548c\u4e13\u4e1a\u5e73\u53f0\u4e0e\u884c\u4e1a\u5185\u4eba\u58eb\u5efa\u7acb\u8054\u7cfb\uff1b\u53c2\u52a0CS\u8bb2\u5ea7\u3001\u7814\u8ba8\u4f1a\u3001ACM\u6d3b\u52a8\u7b49</p> <p>\u627e\u5de5\u548cSummer\u4e00\u6837</p>"},{"location":"Academy/StudyPlan/#2025-spring","title":"2025 spring","text":"<p>\u8bfe\u7a0b\u5b66\u4e60\uff1a\u53c2\u52a0TA/RA\u9879\u76ee</p> <p>Network\u3001\u627e\u5de5\u548cfall\u4e00\u6837\uff0c\u5982\u679c\u6691\u671f\u5b9e\u4e60\u8fd8\u6ca1\u6709\u7740\u843d\uff0c\u5c31\u8981\u52a0\u901f\u8fdb\u884c\u4e86</p> <p>2025 summer: internship</p> <p>2025 fall: </p> <p>2026 spring: </p> <p>2026 summer: enter into the industry</p>"},{"location":"Academy/StudyPlan/#53-4","title":"\u9636\u6bb55\uff1a\u673a\u5668\u5b66\u4e60\u57fa\u7840\uff083-4\u4e2a\u6708\uff09","text":""},{"location":"Academy/StudyPlan/#51","title":"5.1 \u76d1\u7763\u5b66\u4e60","text":"<ul> <li>\u5185\u5bb9\uff1a\u56de\u5f52\u3001\u5206\u7c7b\u3001\u652f\u6301\u5411\u91cf\u673a\u3001\u51b3\u7b56\u6811\u3002</li> <li>\u8d44\u6e90\uff1a</li> <li>Coursera: Machine Learning by Andrew Ng</li> <li>\u300a\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5\u300b by \u674e\u822a</li> </ul>"},{"location":"Academy/StudyPlan/#52","title":"5.2 \u65e0\u76d1\u7763\u5b66\u4e60","text":"<ul> <li>\u5185\u5bb9\uff1a\u805a\u7c7b\u3001\u964d\u7ef4\u3001PCA\u3002</li> <li>\u8d44\u6e90\uff1a</li> <li>Coursera: Unsupervised Machine Learning by Stanford University</li> <li>\u300a\u673a\u5668\u5b66\u4e60\u300b by Tom Mitchell</li> </ul>"},{"location":"Academy/StudyPlan/#63-4","title":"\u9636\u6bb56\uff1a\u6df1\u5ea6\u5b66\u4e60\u57fa\u7840\uff083-4\u4e2a\u6708\uff09","text":""},{"location":"Academy/StudyPlan/#61","title":"6.1 \u795e\u7ecf\u7f51\u7edc\u57fa\u7840","text":"<ul> <li>\u5185\u5bb9\uff1a\u611f\u77e5\u5668\u3001\u591a\u5c42\u611f\u77e5\u5668\u3001\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u3002</li> <li>\u8d44\u6e90\uff1a</li> <li>Coursera: Neural Networks and Deep Learning by Andrew Ng</li> <li>\u300a\u6df1\u5ea6\u5b66\u4e60\u300b by Ian Goodfellow, Yoshua Bengio, and Aaron Courville</li> </ul>"},{"location":"Academy/StudyPlan/#62","title":"6.2 \u6df1\u5ea6\u5b66\u4e60\u8fdb\u9636","text":"<ul> <li>\u5185\u5bb9\uff1a\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u3001\u9012\u5f52\u795e\u7ecf\u7f51\u7edc\u3001\u6df1\u5ea6\u5b66\u4e60\u7684\u4f18\u5316\u6280\u672f\u3002</li> <li>\u8d44\u6e90\uff1a</li> <li>Coursera: Deep Learning Specialization by Andrew Ng</li> <li>Fast.ai: Practical Deep Learning for Coders</li> </ul>"},{"location":"Academy/StudyPlan/#_11","title":"\u603b\u7ed3","text":"<p>\u8fd9\u4e2a\u8be6\u7ec6\u7684\u5b66\u4e60\u8def\u5f84\u6db5\u76d6\u4e86\u4ece\u57fa\u7840\u6570\u5b66\u5230\u9ad8\u9636\u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u7684\u6240\u6709\u5fc5\u8981\u77e5\u8bc6\u3002\u4f60\u53ef\u4ee5\u6309\u7167\u8fd9\u4e2a\u8def\u5f84\u4e00\u6b65\u6b65\u5b66\u4e60\uff0c\u5e76\u6839\u636e\u81ea\u5df1\u7684\u8fdb\u5ea6\u548c\u7406\u89e3\u60c5\u51b5\u9002\u5f53\u8c03\u6574\u6bcf\u4e2a\u9636\u6bb5\u7684\u5b66\u4e60\u65f6\u95f4\u3002\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\uff0c\u786e\u4fdd\u4e0d\u65ad\u5b9e\u8df5\uff0c\u901a\u8fc7\u7f16\u7a0b\u548c\u9879\u76ee\u6765\u5de9\u56fa\u6240\u5b66\u77e5\u8bc6\u3002</p>"},{"location":"Academy/StudyPlan/#computer-science","title":"Computer Science \u5b66\u4e60\u8def\u5f84","text":""},{"location":"Academy/StudyPlan/#foundations-of-computer-science","title":"Foundations of Computer Science","text":""},{"location":"Academy/StudyPlan/#data-structure-and-algorithm","title":"Data Structure and Algorithm","text":"<p>\u57fa\u7840\u77e5\u8bc6\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3001\u6570\u7ec4\u3001\u94fe\u8868\u3001\u6808\u3001\u5806\u3001\u961f\u5217</p> <p>\u6811\uff1a\u4e8c\u53c9\u6811\u3001BST\u4e8c\u53c9\u641c\u7d22\u6811\u3001\u5e73\u8861\u6811\uff08AVL\u3001\u7ea2\u9ed1\u6811\uff09</p> <p>\u5806\uff1a\u4e8c\u53c9\u5806\u3001\u5806\u6392\u5e8f</p> <p>\u54c8\u5e0c\u8868\uff1a\u54c8\u5e0c\u51fd\u6570\u3001\u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5\uff08\u94fe\u5730\u5740\u6cd5\u3001\u5f00\u653e\u5730\u5740\u6cd5\uff09</p> <p>\u56fe\uff1a\u90bb\u63a5\u77e9\u9635\u3001\u90bb\u63a5\u8868\u3001\u904d\u5386\uff08BFS\u3001DFS\uff09</p> <p>\u641c\u7d22\u548c\u6392\u5e8f</p> <p>\u52a8\u6001\u89c4\u5212</p> <p>\u8d2a\u5fc3\u7b97\u6cd5</p> <p>\u56de\u6eaf\u7b97\u6cd5</p>"},{"location":"Academy/StudyPlan/#programming","title":"Programming","text":"<p>Learn programming language: Java, Python, C++</p>"},{"location":"Academy/StudyPlan/#operating-system","title":"Operating System","text":"<p>Operating System \u64cd\u4f5c\u7cfb\u7edf</p> <p>\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406</p> <p>\u8ba1\u7b97\u673a\u7f51\u7edc</p>"},{"location":"Academy/StudyPlan/#network","title":"Network","text":"<p>\u8fd9\u5757\u6682\u65f6\u5148\u4e86\u89e3\u4e00\u4e0b\u5c31\u884c</p>"},{"location":"Academy/StudyPlan/#database","title":"Database","text":"<p>\u8fd9\u5757\u4e86\u89e3\u4e00\u4e0b\u5c31\u884c\uff1a\u5173\u7cfb\u6570\u636e\u5e93\u3001NoSQL\u6570\u636e\u5e93</p>"},{"location":"Academy/StudyPlan/#compiler","title":"Compiler","text":"<p>\u8fd9\u5757\u4e86\u89e3\u4e00\u4e0b\u5c31\u884c</p>"},{"location":"Academy/StudyPlan/#theory","title":"Theory","text":"<p>\u8fd9\u5757\u4e86\u89e3\u4e00\u4e0b\u5c31\u884c\uff1a\u56fe\u7075\u673a\u3001\u8ba1\u7b97\u7406\u8bba\u3001\u7f16\u8bd1\u539f\u7406</p>"},{"location":"Academy/StudyPlan/#math-for-cs","title":"Math for CS","text":"<p>\u5fae\u79ef\u5206\u3001\u7ebf\u6027\u4ee3\u6570\u3001\u6982\u7387\u7edf\u8ba1\u3001\u79bb\u6563</p>"},{"location":"Academy/StudyPlan/#software-enginnering","title":"Software Enginnering","text":""},{"location":"Academy/StudyPlan/#foundations","title":"Foundations","text":"<p>\u8f6f\u4ef6\u5de5\u7a0b\u662f\u5173\u4e8e\u8f6f\u4ef6\u5f00\u53d1\u7684\u7cfb\u7edf\u5316\u3001\u89c4\u8303\u5316\u548c\u91cf\u5316\u7684\u5b66\u79d1\uff0c\u65e8\u5728\u63d0\u9ad8\u8f6f\u4ef6\u5f00\u53d1\u7684\u8d28\u91cf\u3001\u6548\u7387\u548c\u53ef\u7ef4\u62a4\u6027\u3002\u5176\u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a</p> <p>\u8f6f\u4ef6\u5f00\u53d1\u751f\u547d\u5468\u671f\uff08SDLC\uff09\uff1a</p> <p>\u9700\u6c42\u5206\u6790\uff1a\u6536\u96c6\u548c\u5206\u6790\u7528\u6237\u9700\u6c42\u3002 \u7cfb\u7edf\u8bbe\u8ba1\uff1a\u67b6\u6784\u8bbe\u8ba1\u3001\u6a21\u5757\u8bbe\u8ba1\u3001\u6570\u636e\u5e93\u8bbe\u8ba1\u3002 \u5b9e\u73b0\uff1a\u7f16\u7801\u3001\u5355\u5143\u6d4b\u8bd5\u3002 \u6d4b\u8bd5\uff1a\u96c6\u6210\u6d4b\u8bd5\u3001\u7cfb\u7edf\u6d4b\u8bd5\u3001\u9a8c\u6536\u6d4b\u8bd5\u3002 \u7ef4\u62a4\uff1a\u9519\u8bef\u4fee\u590d\u3001\u529f\u80fd\u6269\u5c55\u3001\u6027\u80fd\u4f18\u5316\u3002 \u8f6f\u4ef6\u9879\u76ee\u7ba1\u7406\uff1a</p> <p>\u9879\u76ee\u8ba1\u5212\u4e0e\u63a7\u5236\uff1a\u65f6\u95f4\u7ba1\u7406\u3001\u8d44\u6e90\u7ba1\u7406\u3001\u98ce\u9669\u7ba1\u7406\u3002 \u56e2\u961f\u534f\u4f5c\u4e0e\u6c9f\u901a\uff1a\u654f\u6377\u5f00\u53d1\u3001Scrum\u3001Kanban\u3002 \u8f6f\u4ef6\u8bbe\u8ba1\u4e0e\u67b6\u6784\uff1a</p> <p>\u8bbe\u8ba1\u6a21\u5f0f\uff1a\u5355\u4f8b\u6a21\u5f0f\u3001\u5de5\u5382\u6a21\u5f0f\u3001\u89c2\u5bdf\u8005\u6a21\u5f0f\u7b49\u3002 \u67b6\u6784\u98ce\u683c\uff1aMVC\u3001\u5fae\u670d\u52a1\u3001RESTful\u3002 \u8f6f\u4ef6\u6d4b\u8bd5\u4e0e\u8d28\u91cf\u4fdd\u8bc1\uff1a</p> <p>\u6d4b\u8bd5\u65b9\u6cd5\uff1a\u767d\u76d2\u6d4b\u8bd5\u3001\u9ed1\u76d2\u6d4b\u8bd5\u3001\u7070\u76d2\u6d4b\u8bd5\u3002 \u81ea\u52a8\u5316\u6d4b\u8bd5\uff1a\u5355\u5143\u6d4b\u8bd5\u3001\u96c6\u6210\u6d4b\u8bd5\u3001\u56de\u5f52\u6d4b\u8bd5\u3002</p>"},{"location":"Academy/StudyPlan/#framework","title":"Framework","text":"<p>\u884c\u4e1a\u6807\u51c6\u7684\u6846\u67b6\u548c\u5de5\u5177\uff0c\u5982Spring\uff08Java\uff09\u3001Django\u6216Flask\uff08Python\uff09</p>"},{"location":"Academy/StudyPlan/#artificial-intelligence","title":"Artificial Intelligence","text":""},{"location":"Academy/StudyPlan/#machine-learning","title":"Machine Learning","text":"<p>\u76d1\u7763\u5b66\u4e60\uff1a\u7ebf\u6027\u56de\u5f52\u3001\u903b\u8f91\u56de\u5f52\u3001\u51b3\u7b56\u6811\u3001\u652f\u6301\u5411\u91cf\u673a</p> <p>\u65e0\u76d1\u7763\u5b66\u4e60\uff1a\u805a\u7c7b\u3001\u964d\u7ef4</p> <p>\u5f3a\u5316\u5b66\u4e60\uff1aQ-learning\u3001\u6df1\u5ea6Q\u7f51\u7edc</p>"},{"location":"Academy/StudyPlan/#deep-learning","title":"Deep Learning","text":"<p>\u795e\u7ecf\u7f51\u7edc\u3001CNN\u3001RNN\u3001\u6df1\u5ea6\u5f3a\u5316\u5b66\u4e60</p>"},{"location":"Academy/StudyPlan/#application","title":"Application","text":"<p>\u8bed\u97f3\u8bc6\u522b</p>"},{"location":"Academy/StudyPlan/#nlp_1","title":"NLP","text":""},{"location":"Academy/StudyPlan/#computer-vision","title":"Computer Vision","text":"<p>SLAM \u5b9a\u4f4d\u4e0e\u5730\u56fe\u6784\u5efa</p>"},{"location":"Academy/StudyPlan/#_12","title":"\u6570\u636e\u5904\u7406\u4e0e\u5206\u6790","text":"<p>\u6570\u636e\u6e05\u6d17\u3001\u7279\u5f81\u5de5\u7a0b\u3001\u6570\u636e\u53ef\u89c6\u5316</p>"},{"location":"Academy/StudyPlan/#ai_1","title":"AI\u5de5\u5177\u4e0e\u6846\u67b6","text":"<p>TensorFlow, PyTorch</p> <p>Scikit-Learn, Keras</p>"},{"location":"Academy/StudyPlan/#robotics_1","title":"Robotics","text":"<p>ROS</p> <p>\u8def\u5f84\u89c4\u5212</p>"},{"location":"Academy/StudyPlan/#wetware_1","title":"Wetware","text":""},{"location":"Academy/StudyPlan/#computational-neuroscience","title":"Computational Neuroscience","text":""},{"location":"Academy/StudyPlan/#brain-computer-interface","title":"Brain-computer Interface","text":""},{"location":"Academy/StudyRoute/","title":"Study Route de facto","text":""},{"location":"Academy/StudyRoute/#cs-tutor-period","title":"CS Tutor Period","text":""},{"location":"Academy/StudyRoute/#ap-csa-college-board","title":"AP CSA - College Board","text":"<p>AP CSA: To tutor high school students.</p>"},{"location":"Academy/StudyRoute/#alevel-cs-cambridge-international-education","title":"ALevel CS - Cambridge International Education","text":"<p>Alevel CS: To tutor high school students.</p>"},{"location":"Academy/StudyRoute/#cs-foundations-logicgate","title":"CS Foundations - LogicGate","text":"<p>This is a course based on my own establishment.</p> <p>Using Computer Science Illuminated, Big Java, Grokking Algorithms as textbooks to teach CS foundations for those who need basic training.</p>"},{"location":"Academy/StudyRoute/#cs-for-usaco-competition-logicgate","title":"CS for USACO Competition - LogicGate","text":"<p>Special training set for high school students who wish to take award in USACO competition.</p> <p>USACO training.</p>"},{"location":"Academy/StudyRoute/#back-to-school-series","title":"Back to School Series","text":"Difficulty Suitable-for Course-suggestions Classic Course Description Very-Easy Pre-college/Freshmen Perspectives and ideas are very important Harvard-CS50 Basically you don't need to do too many homeworks and projects Easy Freshmen/Sophomore Top vision matters UCB-CS61B Some thinking needs to be done, more homeworks and projects Medium Sophomore/Junior Important major foundations Some concepts take time to digest and understand, and the homework is quite difficult and takes a long time to complete Hard Junior/Senior Important division foundations Very-Hard Senior/Graduate-level Important division course Mastered Graduate-level Advanced division course S.Mastered Upper Graduate-level Cutting-edge courses, PhD preparation"},{"location":"Academy/StudyRoute/#2024-spring","title":"2024 Spring","text":""},{"location":"Academy/StudyRoute/#cs50-harvard-university","title":"CS50 - Harvard University","text":"<p>Difficulty: Very Easy</p> <p>Suitable for: Any major, high school level students</p> <p>To learn the basic ideas in computer science. This course opened the door to online learning for me and made me realize that it is not enough to just learn knowledge, but I need to do exercises and projects. From now on, learning is no longer restricted by school, geographical location or time.</p> <p>Highlights: Principles of Computer Science, C language, using the command line, VSCode</p>"},{"location":"Academy/StudyRoute/#2024-summer","title":"2024 Summer","text":""},{"location":"Academy/StudyRoute/#in-progress-cs61b-data-structures-and-algorithms-uc-berkeley-by-josh-hug","title":"(In progress) CS61B Data Structures and Algorithms - UC Berkeley (by Josh Hug)","text":"<p>Difficulty: Easy</p> <p>Suitable for: Those who wish to choose CS major and related majors, college freshman</p> <p>Learn to use skeleton codes and finish tutorial projects. This course explains even the simplest concepts (such as linked lists) clearly, and the perspective is very high-level.</p> <p>Highlights: Java, Data Structures, Software Engineering</p>"},{"location":"Academy/StudyRoute/#in-progress-6042j-mathmatics-for-computer-science-mit","title":"(In progress) 6.042J Mathmatics for Computer Science - MIT","text":""},{"location":"Academy/Terms_in_Chinese/","title":"Terms_in_Chinese.md","text":"<p>highlight: \u9ad8\u4eae\u4ee3\u7801\uff08\u6bd4\u5982\u628a\u4ee3\u7801\u7528\u9f20\u6807\u6309\u4f4f\u5708\u8d77\u6765\uff09</p>"},{"location":"Algorithm%20Analysis/1_Asymptotics/","title":"Asymptotics","text":"<p>Asymptotic pronaunce \"(a)Sym`Totic\"</p>"},{"location":"Algorithm%20Analysis/1_Asymptotics/#asymptotic-analysis","title":"Asymptotic Analysis","text":"<p>We need to learn how to make the best use of our computer's time and memory. </p> <p>We can consider the process of writing efficient programs from two different perspectives:</p> <ol> <li>Programming Cost (everything in the course up to this date)<ol> <li>How long does it take for you to develop your programs?</li> <li>How easy is it to read or modify your code?</li> <li>How maintainable is your code? (very important \u2014 much of the cost comes from maintenance and scalability, not development!)</li> </ol> </li> <li>Execution Cost (everything in the course from this point on)<ol> <li>Time complexity: How much time does it take for your program to execute?</li> <li>Space complexity: How much memory does your program require?</li> </ol> </li> </ol> <p>Notice: asymptotics work for very long time, therefore 100 times is not a large number of time. Which means, if f(N) belongs to Theta(N^2), then input size of 2N will run roughly 4 times as long input size of N. BUT, if input size is 100, then input size of 200 will NOT run 4 times because 100 and 200 are all very small numbers.</p>"},{"location":"Algorithm%20Analysis/1_Asymptotics/#asymptotic-behavior","title":"Asymptotic Behavior","text":"<p>For example, Consider the operation counts of some algorithm below. What do you expect will be the order of growth of the runtime for the algorithm?</p> <p></p> <p>Answer will be cubic(N^3). Because N^3 grows faster than N^2, so it will dominate.</p>"},{"location":"Algorithm%20Analysis/1_Asymptotics/#cost-model","title":"Cost Model","text":"<p>\u5728\u5206\u6790\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u8003\u8651\u7b97\u6cd5\u6267\u884c\u8fc7\u7a0b\u4e2d\u6d89\u53ca\u7684\u5404\u79cd\u64cd\u4f5c\u3002\u7136\u800c\uff0c\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u5177\u4f53\u64cd\u4f5c\u7684\u6210\u672c\u53ef\u80fd\u8fc7\u4e8e\u590d\u6742\u3002\u56e0\u6b64\uff0c\u7b80\u5316\u5206\u6790\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u9009\u62e9\u4e00\u4e2a\u6709\u4ee3\u8868\u6027\u7684\u64cd\u4f5c\uff0c\u4f5c\u4e3a\u8861\u91cf\u6574\u4f53\u8fd0\u884c\u65f6\u95f4\u7684\u57fa\u51c6\u3002\u8fd9\u79cd\u65b9\u6cd5\u5e2e\u52a9\u6211\u4eec\u7b80\u5316\u590d\u6742\u7684\u7b97\u6cd5\u5206\u6790\u3002</p> <p>\u4ee3\u8868\u6027\u64cd\u4f5c\u7684\u9009\u62e9:</p> <p>\u597d\u7684\u9009\u62e9\uff1a 1. \u81ea\u589e\u64cd\u4f5c\uff08increment\uff09\uff1a\u5982i++\u6216i += 1\u3002\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u4e14\u7b80\u5355\u7684\u64cd\u4f5c\uff0c\u901a\u5e38\u5728\u5faa\u73af\u4e2d\u51fa\u73b0\u3002 1. \u6bd4\u8f83\u64cd\u4f5c\uff08less than or equals\uff09\uff1a\u5982i &lt;= n\u6216i &lt; n\u3002\u6bd4\u8f83\u64cd\u4f5c\u5728\u6761\u4ef6\u5224\u65ad\u4e2d\u5f88\u5e38\u89c1\u3002 1. \u6570\u7ec4\u8bbf\u95ee\u64cd\u4f5c\uff08array accesses\uff09\uff1a\u5982arr[i]\u3002\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u662f\u5f88\u591a\u7b97\u6cd5\u4e2d\u7684\u57fa\u7840\u64cd\u4f5c\u3002 \u8fd9\u4e9b\u64cd\u4f5c\u4e4b\u6240\u4ee5\u662f\u597d\u7684\u9009\u62e9\uff0c\u662f\u56e0\u4e3a\u5b83\u4eec\u5728\u5f88\u591a\u7b97\u6cd5\u4e2d\u9891\u7e41\u51fa\u73b0\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6267\u884c\u65f6\u95f4\u76f8\u5bf9\u7a33\u5b9a\u4e14\u53ef\u4ee5\u5f88\u597d\u5730\u53cd\u6620\u7b97\u6cd5\u7684\u6574\u4f53\u590d\u6742\u5ea6\u3002</p> <p>\u4e0d\u597d\u7684\u9009\u62e9\uff1a 1. \u8d4b\u503c\u64cd\u4f5c\uff08assignment\uff09\uff1a\u5982j = i + 1\u6216i = 0\u3002\u8fd9\u4e9b\u64cd\u4f5c\u901a\u5e38\u53ea\u6267\u884c\u4e00\u6b21\u6216\u5c11\u91cf\u51e0\u6b21\uff0c\u4e0d\u80fd\u5f88\u597d\u5730\u4ee3\u8868\u7b97\u6cd5\u7684\u6574\u4f53\u8fd0\u884c\u65f6\u95f4\u3002\u8d4b\u503c\u64cd\u4f5c\u4e4b\u6240\u4ee5\u4e0d\u662f\u597d\u7684\u9009\u62e9\uff0c\u662f\u56e0\u4e3a\u5b83\u4eec\u901a\u5e38\u4e0d\u4f1a\u5728\u7b97\u6cd5\u7684\u6838\u5fc3\u5faa\u73af\u6216\u4e3b\u8981\u903b\u8f91\u4e2d\u9891\u7e41\u51fa\u73b0\uff0c\u56e0\u6b64\u4e0d\u80fd\u6709\u6548\u4ee3\u8868\u7b97\u6cd5\u7684\u6574\u4f53\u8fd0\u884c\u65f6\u95f4\u3002</p> <p><code>\u6210\u672c\u6a21\u578b</code></p> <p>\u6240\u9009\u62e9\u7684\u4ee3\u8868\u6027\u64cd\u4f5c\u88ab\u79f0\u4e3a\u201c\u6210\u672c\u6a21\u578b\u201d\u3002\u6210\u672c\u6a21\u578b\u7684\u9009\u62e9\u662f\u4e3a\u4e86\u7b80\u5316\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u5206\u6790\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u4e13\u6ce8\u4e8e\u7b97\u6cd5\u4e2d\u6700\u80fd\u53cd\u6620\u5176\u6027\u80fd\u7684\u90e8\u5206\u3002\u901a\u8fc7\u4ec5\u5173\u6ce8\u4e00\u4e2a\u4ee3\u8868\u6027\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u7b80\u6d01\u5730\u4f30\u7b97\u548c\u6bd4\u8f83\u4e0d\u540c\u7b97\u6cd5\u7684\u6548\u7387\u3002</p> <p>\u793a\u4f8b:\u5728\u4e00\u4e2a\u5bfb\u627e\u91cd\u590d\u5143\u7d20\uff08dup\uff09\u7684\u793a\u4f8b\u4e2d\uff1a * \u597d\u7684\u9009\u62e9\uff1a\u9009\u62e9\u81ea\u589e\u64cd\u4f5ci++\u6216\u6570\u7ec4\u8bbf\u95ee\u64cd\u4f5carr[i]\u4f5c\u4e3a\u6210\u672c\u6a21\u578b\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u8bc4\u4f30\u7b97\u6cd5\u5728\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\u6b21\u6570\uff0c\u4ece\u800c\u4f30\u7b97\u6574\u4f53\u8fd0\u884c\u65f6\u95f4\u3002 * \u4e0d\u597d\u7684\u9009\u62e9\uff1a\u9009\u62e9\u8d4b\u503c\u64cd\u4f5cj = i + 1\u6216i = 0\u4f5c\u4e3a\u6210\u672c\u6a21\u578b\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u53ea\u6267\u884c\u4e00\u6b21\u6216\u5c11\u91cf\u51e0\u6b21\uff0c\u4e0d\u80fd\u6709\u6548\u4ee3\u8868\u7b97\u6cd5\u7684\u6574\u4f53\u8fd0\u884c\u65f6\u95f4\u3002 \u901a\u8fc7\u9009\u62e9\u5408\u9002\u7684\u6210\u672c\u6a21\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u76f4\u89c2\u5730\u5206\u6790\u548c\u6bd4\u8f83\u7b97\u6cd5\u7684\u6027\u80fd\u3002</p>"},{"location":"Algorithm%20Analysis/2_Time-Complexity/","title":"Time Complexity","text":""},{"location":"Algorithm%20Analysis/2_Time-Complexity/#big-o","title":"Big O","text":"<p>Big O represents an upper bound on the number of steps. (Which means the worst case.)</p> Example Big O quadratic O(n^2) n log n O(nlogn) linear O(n) eg.linear search logarithmic O(log n) eg.binary search constant O(1) <p></p>"},{"location":"Algorithm%20Analysis/2_Time-Complexity/#big-omega","title":"Big Omega (\u03a9)","text":"<p>Represents lower bound, take as few as this many steps.</p>"},{"location":"Algorithm%20Analysis/2_Time-Complexity/#theta-notation","title":"Theta Notation (\u03b8)","text":"<p>If Big O and Big Omega happen to be the same, (which is not always the cse), then you can say that algorithm is in theta of such and such...</p> <p>Notice: theta notation \u2260 average</p> <p>it's a tight bound. \u5bf9\u4e8eg(n), \u03b8(g(n))\u662f\u6240\u6709\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u51fd\u6570f(n)\u7684\u96c6\u5408\uff1a</p> <p>\u5b58\u5728positive\u5e38\u6570c1, c2, n0, \u4f7f\u5f97\u5bf9\u6240\u6709\u7684n&gt;n0, \u90fd\u67090&lt;=C1g(n)&lt;=f(n)&lt;=C2g(n)</p> <p>\u03b8\u7684\u5173\u952e\u5728\u4e8e\u6838\u5fc3\u589e\u957f\u8d8b\u52bfg(n), \u754c\u9650C1, C2. </p> <p>\u03b8(g(n))\u8868\u793aalgorithm\u7684\u589e\u957f\u7387\u5728\u6e10\u8fdb\u610f\u4e49\u4e0a\u4e0d\u5feb\u4e8e\u6216\u4e0d\u6162\u4e8eg(n)\uff0cwhich means\u5bf9\u4e8e\u8db3\u591f\u5927\u7684n\uff0calgorithm\u7684\u5b9e\u9645\u6027\u80fd\u6216\u590d\u6742\u5ea6\u5c06\u88abC1 g(n)\u548cC2 g(n)\u7d27\u786e\u5305\u56f4\u3002</p> <p>\u5728\u957f\u8dd1\u7684\u4f8b\u5b50\u4e2d\uff0c\u65f6\u95f4\u6d88\u8017f(n)\u7684\u6e10\u8fdb\u884c\u4e3a\u662f\u03b8(n)\uff0c\u5373\u65f6\u95f4\u6d88\u8017\u4e0e\u8dd1\u6b65\u8ddd\u79bb\u5448\u7ebf\u6027\u5173\u7cfb\u3002\u8fd9\u4e2a\u7ebf\u6027\u5173\u7cfb\u5728C1 and C2\u7684\u754c\u9650\u5185\u6ce2\u52a8\u3002</p> <p></p> <p>\u6bd4\u5982\u8fd9\u5f20\u56ferepresent\u4e86f(n)\u5728\u6e10\u8fdb\u610f\u4e49\u4e0a\u5feb\u4e8eg(n)\uff0c\u8fd9\u5c31\u662fAsymptotic Behavior of Algorithm Complexity. (\u7b97\u6cd5\u590d\u6742\u5ea6\u7684\u6e10\u8fdb\u884c\u4e3a)</p>"},{"location":"Algorithm%20Analysis/2_Time-Complexity/#little-o","title":"Little O","text":"<p>\u8ba8\u8bbaf(n)\u589e\u957f\u7387\u4e25\u683c\u5c0f\u4e8eC*g(n)\u7684\u60c5\u51b5</p>"},{"location":"Algorithm%20Analysis/2_Time-Complexity/#little-omega","title":"Little Omega (\u03c9)","text":"<p>\u8ba8\u8bbaf(n)\u589e\u957f\u7387\u4e25\u683c\u5927\u4e8eC*g(n)\u7684\u60c5\u51b5</p>"},{"location":"Algorithms_Java/Recursion_DequeGetIndex/","title":"Recursion_DequeGetIndex.md","text":"<p>This is a Deque Recursive usage to get item with index.</p> <p>precondition: we can only use get(index) to get item in a deque list.</p> <p>note: deque is double ended linked list.</p> <pre><code>//...\n//full usage see College-Projects/UCB-CS61B/Project1a\n   public T getRecursive(int index) {\n        return getRecursive(sentinel.next, index);\n    }\n\n    private T getRecursive(Node node, int index) {\n        if (index &lt; 0 || node == sentinel) {\n            return null;\n        }\n        if (index == 0) {\n            return node.item;\n        }\n        return getRecursive(node.next, index - 1);\n    }\n</code></pre> <p>or in ArrayDeque:</p> <pre><code>public T getRecursive(int index) {\n    if(size==0 || index&lt;0 || index&gt;=size){\n        return null;\n    }\n    else{\n        return realRecursive(firstIndex, index);\n    }\n}\n\npublic T realRecursive(int increaseIndex, int decreaseIndex){\n    if(decreaseIndex==0){ //KEY POINT!!!!!\n        return arr[increaseIndex];\n    }\n    else{\n        int increase = Math.floorMod(increaseIndex+1,range);\n        int decrease = Math.floorMod(decreaseIndex-1,range);\n        return realRecursive(increase, decrease);\n    }\n}\n</code></pre>"},{"location":"Algorithms_Java/Sequence_Hailstone/","title":"Sequence_Hailstone.md","text":"<p>Hailstone Sequence</p> <p>Difficulty: 1</p> <p>The hailstone sequence, also known as the Collatz sequence or the 3n + 1 problem, is a sequence of numbers generated from a starting positive integer n by following these rules: 1. If n is 1, the sequence ends. 1. If n is even, the next number in the sequence is n/2. 1. If n is odd, the next number in the sequence is 3n+1. This process is repeated until n reaches 1. The sequence is named \"hailstone\" because the numbers in the sequence typically go up and down before eventually falling to 1, resembling the movement of hailstones in a cloud.</p> <pre><code>//Ver.2024.Jun.\nimport java.util.ArrayList;\npublic class HailstoneSequence {\n    public static ArrayList&lt;Integer&gt; seq = new ArrayList&lt;&gt;();\n\n    public static void main(String[] args){\n        System.out.println(\"Hailstone Sequence\");\n        ArrayList&lt;Integer&gt; x = hailstone(6);\n        for(int i = 0 ; i&lt;x.size();i++){\n            System.out.println(x.get(i));\n        }\n    }\n\n    public static ArrayList&lt;Integer&gt; hailstone(int n){\n        if(n==1){\n            seq.add(1);\n            return seq; \n        }\n        if(n%2==0){\n            seq.add(n);\n            hailstone(n/2);\n        }\n        if(n%2==1){\n            seq.add(n);\n            hailstone(n*3+1);\n        }\n        return seq;\n    }\n}\n\n\n</code></pre>"},{"location":"Math_ComputerScience/Remainder/","title":"Remainder.md","text":"<p>remainder = a \u2212 (n\u22c5b)</p> <p>In CS, remainder also named as <code>MOD</code></p>"},{"location":"Math_ComputerScience/Remainder/#java","title":"java","text":"<p>In java, two ways to find remainder: 1. <code>%</code>:-7%3==-1 1. <code>Math.floorMod</code>: Math.floorMod(-7,3)==2</p>"},{"location":"Programming_Java/01_Basic_0_Introduction/","title":"Basic - Introduction of Java","text":""},{"location":"Programming_Java/01_Basic_0_Introduction/#statically-typed-language","title":"Statically Typed Language","text":"<p>Java is a statically typed language. </p> <p>A statically typed language is a type of programming language in which the type of a variable is determined at compile-time and must be explicityly declared. This means that before the code is executed, the compiler knows and enforces the type of the variable. As a result, type-related errors are caught during the compilation phase rather than at runtime.</p> <p>C, C++, Java, Go, Rust are all statically typed language.</p> <p>Python, JavaScript, Ruby are dynamically typed languages, determine the type of a variable at runtime, offering more flexibility but potentially leading to runtime errors.</p>"},{"location":"Programming_Java/01_Basic_0_Introduction/#_1","title":"\u8fd0\u884c","text":""},{"location":"Programming_Java/01_Basic_0_Introduction/#command-line","title":"Command Line","text":"<p>.java file -&gt; javac compile -&gt; execute</p> <pre><code>javac Main.java\njava Main\n</code></pre> <p>passing arguments parameters:</p> <pre><code>javac Main.java\njava Main Hello World\n</code></pre> <p>\u547d\u4ee4\u884c\u4f20\u9012\u7684\u6240\u6709\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\u3002 \u6bcf\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u90e8\u5206\u4f5c\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684\u5b57\u7b26\u4e32\u53c2\u6570\u3002 \u4f7f\u7528\u5f15\u53f7\u53ef\u4ee5\u5c06\u5305\u542b\u7a7a\u683c\u7684\u591a\u4e2a\u5355\u8bcd\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u4f20\u9012\u3002</p>"},{"location":"Programming_Java/01_Basic_0_Introduction/#workflow","title":"Workflow","text":"<ol> <li>Text editor + command line</li> <li>Jupyter Notebooks: Write and run code in the same environment (\u5f85\u7528)</li> <li>Integrated Development Environment (IDE): Write and run code in the same environment.</li> </ol>"},{"location":"Programming_Java/01_Basic_0_Introduction/#hello-world","title":"hello world","text":"<p>input:</p> <pre><code>public class HelloWorld{\n    public static void main(String[] args){\n        System.out.println(\"hello, world!\");\n    }\n}\n</code></pre> <p><code>public</code> <code>static</code>: It is a static method, not associated with any particular instance. <code>void</code>: It has no return type. <code>main</code>: This is the name of the method. <code>String[] args</code>: This is a parameter that is passed to the main method.</p> <p>Command line arguments: </p> <pre><code>public class ArgsDemo {\n    public static void main(String[] args) {\n        System.out.println(args[0]);\n    }\n}\n</code></pre> <p>This program prints out the 0th command line argument, e.g.</p> <pre><code>$ java ArgsDemo these are command line arguments\nthese\n</code></pre> <p>example:</p> <pre><code>public class ArgsDemo{\n    public static void main(String[] args){\n        System.out.println(args[0]);\n    }\n}\n</code></pre> <p>This program prints out the 0th command line argument, e.g.</p> <pre><code>$ java ArgsDemo these are command line arguments\nthese\n</code></pre> <p>In the example above, <code>args</code> will be an array of Strings, where the entries are {\"these\",\"are\",\"command\",\"line\",\"arguments\"}.</p>"},{"location":"Programming_Java/01_Basic_0_Introduction/#use-one-static-method-as-a-main-method","title":"use one static method as a main method","text":"<p>All code in Java must be part of a class or something similar to a class. To actually run the class, we'd either need to add a main method to the class, or we could create a separate launcher class that runs methods from the class. A class that uses another class is sometimes called a \"client\" of that class.</p>"},{"location":"Programming_Java/01_Basic_0_Introduction/#variables","title":"Variables","text":"<p>Variables must be declared inside the class.</p>"},{"location":"Programming_Java/01_Basic_0_Introduction/#basic-type","title":"Basic Type","text":"<p>Basic Type: int, double, char</p> <p>In Java, there are 8 primitive types: byte, short, int, long, float, double, boolean, and char. Each has different properties that we'll discuss throughout the course, with the exception of short and float, which you'll likely never use.</p> <p>One interesting observation is that both 72 and H are stored as 01001000. This raises the question: how does a piece of Java code know how to interpret 01001000? The answer is through types! </p>"},{"location":"Programming_Java/01_Basic_0_Introduction/#char","title":"char","text":"<p>char: \u5b57\u7b26\u8fd0\u7b97\u65f6\u4f1a\u81ea\u52a8\u5c06\u5b57\u7b26\u8f6c\u6362\u4e3a\u6574\u6570\uff0c\u6240\u4ee5\u8fd0\u7b97\u5b8c\u540e\u8bb0\u5f97\u8f6c\u6362\u56de\u53bb\uff1a<code>(char) ('z'-10)</code></p>"},{"location":"Programming_Java/01_Basic_0_Introduction/#reference-type","title":"Reference Type","text":"<p>Reference Type: \u5728 Java \u4e2d\uff0c\u5f53\u4f60\u5c06\u4e00\u4e2a\u5bf9\u8c61\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u590d\u5236\u4e86\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u800c\u4e0d\u662f\u5bf9\u8c61\u672c\u8eab\u3002\u8fd9\u610f\u5473\u7740\u4e24\u4e2a\u53d8\u91cf\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5bf9\u5176\u4e2d\u4e00\u4e2a\u53d8\u91cf\u8fdb\u884c\u7684\u4fee\u6539\u4f1a\u5f71\u54cd\u53e6\u4e00\u4e2a\u53d8\u91cf\u3002\u56e0\u6b64\u590d\u5236reference type\u7684\u65f6\u5019\u4e0d\u8981\u76f4\u63a5\u7528assignment\u3002\u540c\u7406\uff0c\u5728\u53c2\u6570\u4f20\u9012\u7684\u65f6\u5019\u4e5f\u8981\u6ce8\u610f\u8fd9\u4e2a\u95ee\u9898\u3002</p>"},{"location":"Programming_Java/01_Basic_0_Introduction/#the-law-of-the-broken-futon","title":"The Law of the Broken Futon","text":"<p>\"The Law of the Broken Futon\" \u662f\u4e00\u79cd\u5e7d\u9ed8\u7684\u6bd4\u55bb\uff0c\u901a\u5e38\u7528\u6765\u89e3\u91ca Java \u4e2d\u5f15\u7528\u7c7b\u578b\u548c\u5bf9\u8c61\u7684\u884c\u4e3a\u3002\u8fd9\u4e2a\u6bd4\u55bb\u6709\u52a9\u4e8e\u66f4\u597d\u5730\u7406\u89e3\u5bf9\u8c61\u5f15\u7528\u7684\u6982\u5ff5\uff0c\u4ee5\u53ca\u5bf9\u8c61\u5982\u4f55\u5728\u5185\u5b58\u4e2d\u7ba1\u7406\u3002\u8ba9\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u7c7b\u6bd4\u6765\u8bf4\u660e\u8fd9\u4e2a\u6cd5\u5f8b\u3002</p> <p>\u6bd4\u55bb\u89e3\u91ca \u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u201c\u6c99\u53d1\u5e8a\u201d\uff08futon\uff09\uff0c\u4f60\u628a\u5b83\u653e\u5728\u4f60\u7684\u623f\u95f4\u91cc\uff0c\u5e76\u4e14\u4f60\u6709\u4e00\u4e2a\u201c\u6c99\u53d1\u5e8a\u7684\u5730\u5740\u201d\uff08futon reference\uff09\uff0c\u7528\u6765\u6807\u8bb0\u8fd9\u4e2a\u6c99\u53d1\u5e8a\u7684\u4f4d\u7f6e\u3002</p> <p>\u6c99\u53d1\u5e8a\u7684\u5730\u5740\uff1a\u5728 Java \u4e2d\uff0c\u5f15\u7528\u7c7b\u578b\u53d8\u91cf\uff08\u4f8b\u5982\u6570\u7ec4\u6216\u5bf9\u8c61\uff09\u5c31\u50cf\u662f\u201c\u6c99\u53d1\u5e8a\u7684\u5730\u5740\u201d\u3002\u5b83\u6307\u5411\u5185\u5b58\u4e2d\u5b9e\u9645\u5b58\u50a8\u5bf9\u8c61\u7684\u5730\u65b9\u3002</p> <p>\u79fb\u52a8\u6c99\u53d1\u5e8a\uff1a\u5982\u679c\u4f60\u79fb\u52a8\u4e86\u6c99\u53d1\u5e8a\uff0c\u90a3\u4e48\u201c\u6c99\u53d1\u5e8a\u7684\u5730\u5740\u201d\u5e94\u8be5\u66f4\u65b0\u4ee5\u6307\u5411\u65b0\u4f4d\u7f6e\u3002\u540c\u6837\u5730\uff0c\u5728 Java \u4e2d\uff0c\u5982\u679c\u4f60\u5c06\u5f15\u7528\u7c7b\u578b\u53d8\u91cf\u91cd\u65b0\u5206\u914d\u7ed9\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u5f15\u7528\u5c06\u6307\u5411\u65b0\u5bf9\u8c61\u7684\u5730\u5740\u3002</p> <p>\u7834\u788e\u7684\u6c99\u53d1\u5e8a\uff1a\u5982\u679c\u6c99\u53d1\u5e8a\u574f\u4e86\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4fee\u7406\u5b83\u6216\u8005\u628a\u5b83\u6254\u6389\u3002\u540c\u6837\u5730\uff0c\u5728 Java \u4e2d\uff0c\u5982\u679c\u4f60\u5c06\u5f15\u7528\u7c7b\u578b\u53d8\u91cf\u8d4b\u503c\u4e3a null\uff0c\u90a3\u4e48\u8be5\u53d8\u91cf\u4e0d\u518d\u6307\u5411\u4efb\u4f55\u5bf9\u8c61\u3002\u6b64\u65f6\uff0c\u539f\u6765\u7684\u5bf9\u8c61\u5982\u679c\u6ca1\u6709\u5176\u4ed6\u5f15\u7528\u6307\u5411\u5b83\uff0c\u5c31\u4f1a\u53d8\u6210\u201c\u5783\u573e\u201d\uff0c\u7b49\u5f85\u5783\u573e\u56de\u6536\u5668\u6765\u56de\u6536\u3002</p> <pre><code>public class FutonExample {\n    public static void main(String[] args) {\n        // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6c99\u53d1\u5e8a\u5bf9\u8c61\u5e76\u5c06\u5176\u5730\u5740\u8d4b\u503c\u7ed9\u53d8\u91cf futon\n        String[] futon = new String[]{\"pillow\", \"mattress\", \"frame\"};\n\n        // \u8bbf\u95ee\u6c99\u53d1\u5e8a\u7684\u67d0\u4e9b\u90e8\u5206\n        System.out.println(\"Futon contains: \" + java.util.Arrays.toString(futon));\n\n        // \u5c06 futon \u53d8\u91cf\u8d4b\u503c\u4e3a null\uff0c\u8868\u793a\u4e22\u5f03\u8fd9\u4e2a\u6c99\u53d1\u5e8a\u7684\u5730\u5740\n        futon = null;\n\n        // \u5c1d\u8bd5\u8bbf\u95ee\u88ab\u4e22\u5f03\u5730\u5740\u7684\u6c99\u53d1\u5e8a\u4f1a\u5f15\u53d1 NullPointerException\n        // System.out.println(futon[0]); // \u8fd9\u884c\u4ee3\u7801\u4f1a\u629b\u51fa NullPointerException\n\n        // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6c99\u53d1\u5e8a\u5bf9\u8c61\u5e76\u5c06\u5176\u5730\u5740\u8d4b\u503c\u7ed9\u53d8\u91cf futon\n        futon = new String[]{\"new pillow\", \"new mattress\", \"new frame\"};\n\n        // \u8bbf\u95ee\u65b0\u7684\u6c99\u53d1\u5e8a\u7684\u67d0\u4e9b\u90e8\u5206\n        System.out.println(\"New futon contains: \" + java.util.Arrays.toString(futon));\n    }\n}\n</code></pre>"},{"location":"Programming_Java/01_Basic_0_Introduction/#method-argument-parameter","title":"Method, Argument, Parameter","text":""},{"location":"Programming_Java/01_Basic_0_Introduction/#instance-method-non-static-method","title":"instance method / non-static method","text":"<p>The method didn't have <code>static</code> keyword is instance method.</p>"},{"location":"Programming_Java/01_Basic_0_Introduction/#argument-parameter","title":"argument / parameter","text":"<p>argument must has specific values passed to the method to execute. eg, <code>example_object.method(x, y)</code>, here x and y are arguments.</p> <p>parameter act as placeholders for the values that will be passed in during the method call. eg, <code>public void add(int x, int y)</code>, here x and y are parameters.</p>"},{"location":"Programming_Java/01_Basic_1_print/","title":"Basic - Print","text":""},{"location":"Programming_Java/01_Basic_1_print/#printf","title":"printf","text":"<pre><code>System.out.printf(\"%s %s %s%n\", flavor, price, numDesserts);\n</code></pre> <p>%s\uff1a\u5b57\u7b26\u4e32 %d\uff1a\u5341\u8fdb\u5236\u6574\u6570 %f\uff1a\u6d6e\u70b9\u6570 %x\uff1a\u5341\u516d\u8fdb\u5236\u6574\u6570 %o\uff1a\u516b\u8fdb\u5236\u6574\u6570 %b\uff1a\u5e03\u5c14\u503c %c\uff1a\u5b57\u7b26 %e\uff1a\u79d1\u5b66\u8ba1\u6570\u6cd5\u8868\u793a\u7684\u6d6e\u70b9\u6570 %t\uff1a\u65e5\u671f\u548c\u65f6\u95f4 %%\uff1a\u767e\u5206\u53f7</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>public class FormatExample {\n    public static void main(String[] args) {\n        String flavor = \"Chocolate\";\n        double price = 4.99;\n        int numDesserts = 10;\n        boolean available = true;\n        char grade = 'A';\n        int hexValue = 255;\n        double scientificValue = 12345.6789;\n        java.util.Date now = new java.util.Date();\n\n        // \u4f7f\u7528 printf \u65b9\u6cd5\n        System.out.printf(\"Flavor: %s%n\", flavor);                    // \u5b57\u7b26\u4e32\n        System.out.printf(\"Price: %.2f%n\", price);                    // \u6d6e\u70b9\u6570\uff0c\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\n        System.out.printf(\"Number of Desserts: %d%n\", numDesserts);   // \u5341\u8fdb\u5236\u6574\u6570\n        System.out.printf(\"Available: %b%n\", available);              // \u5e03\u5c14\u503c\n        System.out.printf(\"Grade: %c%n\", grade);                      // \u5b57\u7b26\n        System.out.printf(\"Hex Value: %x%n\", hexValue);               // \u5341\u516d\u8fdb\u5236\u6574\u6570\n        System.out.printf(\"Scientific Value: %e%n\n</code></pre>"},{"location":"Programming_Java/01_Basic_2_Comments/","title":"Basic - Comments","text":""},{"location":"Programming_Java/01_Basic_2_Comments/#java-doc-comments","title":"java doc comments","text":"<pre><code>/** ...\n * @param index index to get\n * @return element at {@code index} in the deque\n */\nT get(int index);\n//Here, @param indicates a parameter to the method, and @return indicates the return value of the method. The @code tag is used to format as code.\n</code></pre>"},{"location":"Programming_Java/01_Basic_3_Iteration/","title":"Basic - Iteration","text":""},{"location":"Programming_Java/01_Basic_3_Iteration/#selection","title":"Selection","text":"<pre><code>if(condition){ //condition should be boolean value\n    //statement\n}\nelse if(condition){\n    //statement\n}\nelse if(condition){\n    //statement\n}\nelse{\n    //statement\n}\n</code></pre>"},{"location":"Programming_Java/01_Basic_3_Iteration/#for-loop","title":"For Loop","text":""},{"location":"Programming_Java/01_Basic_3_Iteration/#enhanced-for-loop","title":"Enhanced For Loop","text":""},{"location":"Programming_Java/01_Basic_3_Iteration/#while-loop","title":"While Loop","text":""},{"location":"Programming_Java/01_Basic_3_Iteration/#try-catch","title":"Try-Catch","text":"<p>\u5728 Java \u4e2d\uff0ctry-catch \u7ed3\u6784\u7528\u4e8e\u5904\u7406\u5f02\u5e38\uff08\u5373\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\u60c5\u51b5\uff09\u3002\u5b83\u5141\u8bb8\u4f60\u6355\u83b7\u548c\u5904\u7406\u5f02\u5e38\uff0c\u4ece\u800c\u907f\u514d\u7a0b\u5e8f\u5d29\u6e83\u5e76\u63d0\u4f9b\u6709\u610f\u4e49\u7684\u9519\u8bef\u5904\u7406\u3002</p> <p>try-catch \u7ed3\u6784\u7684\u57fa\u672c\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>try {\n    // \u53ef\u80fd\u4f1a\u629b\u51fa\u5f02\u5e38\u7684\u4ee3\u7801\u3002\u5982\u679c\u5728 try \u5757\u4e2d\u7684\u4efb\u4f55\u4ee3\u7801\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u7a0b\u5e8f\u5c06\u7acb\u5373\u8df3\u5230\u76f8\u5e94\u7684 catch \u5757\uff0c\u800c\u4e0d\u4f1a\u7ee7\u7eed\u6267\u884c try \u5757\u4e2d\u7684\u5269\u4f59\u4ee3\u7801\u3002\n} catch (ExceptionType e) {\n    // \u5904\u7406\u5f02\u5e38\u7684\u4ee3\u7801\n    //\u6bcf\u4e2a catch \u5757\u90fd\u6307\u5b9a\u4e00\u79cd\u7c7b\u578b\u7684\u5f02\u5e38\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a catch \u5757\u6765\u6355\u83b7\u4e0d\u540c\u7c7b\u578b\u7684\u5f02\u5e38\u3002\n    //ExceptionType \u662f\u4f60\u5e0c\u671b\u6355\u83b7\u7684\u5f02\u5e38\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u662f NumberFormatException\u3001IOException \u7b49\u3002\n}\n</code></pre> <p>\u4f8b\uff1a</p> <pre><code>try {\n    // \u53ef\u80fd\u4f1a\u629b\u51fa\u4e0d\u540c\u7c7b\u578b\u5f02\u5e38\u7684\u4ee3\u7801\n} catch (NumberFormatException e) {\n    // \u5904\u7406 NumberFormatException\n} catch (IOException e) {\n    // \u5904\u7406 IOException\n} catch (Exception e) {\n    // \u5904\u7406\u5176\u4ed6\u6240\u6709\u7c7b\u578b\u7684\u5f02\u5e38\n}\n</code></pre>"},{"location":"Programming_Java/01_Basic_4_Recursion/","title":"01_Basic_4_Recursion.md","text":"<p>\u4f8b\uff1a</p> <pre><code>public static ArrayList&lt;Integer&gt; hailstone(int n){\n    if(n==1){\n        seq.add(1);\n        return seq; //\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u5fc5\u987breturn\uff1a\u56e0\u4e3an==1\u7684\u60c5\u51b5\u4e0b\u4e0b\u9762\u7684n%2==1\u4e5f\u80fd\u6267\u884c\uff0c\u6240\u4ee5\u5728\u4e09\u4e2aif\u7684\u60c5\u51b5\u4e0b\u8fd9\u91cc\u5fc5\u987breturn\uff0c\u5426\u5219\u5c31\u4f1a\u6808\u6ea2\u51fa\n    }\n    if(n%2==0){\n        seq.add(n);\n        hailstone(n/2);\n    }\n    if(n%2==1){\n        seq.add(n);\n        hailstone(n*3+1);\n    }\n\n    return seq;\n    //\u5728Java\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u65b9\u6cd5\u58f0\u660e\u4e86\u8fd4\u56de\u7c7b\u578b\uff08\u5982ArrayList&lt;Integer&gt;\uff09\uff0c\u5219\u6bcf\u4e2a\u53ef\u80fd\u7684\u6267\u884c\u8def\u5f84\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u503c\u3002\u5373\u4f7f\u4f60\u8ba4\u4e3a\u6240\u6709\u7684\u60c5\u51b5\u90fd\u5df2\u7ecf\u88ab\u5904\u7406\u4e86\uff0cJava\u7f16\u8bd1\u5668\u8fd8\u662f\u9700\u8981\u660e\u786e\u77e5\u9053\u6bcf\u4e2a\u53ef\u80fd\u7684\u8def\u5f84\u90fd\u6709\u8fd4\u56de\u503c\u3002\n    //\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\uff0c\u867d\u7136\u4f60\u6b63\u786e\u5730\u5904\u7406\u4e86\u57fa\u51c6\u6761\u4ef6\u548c\u9012\u5f52\u6761\u4ef6\uff0c\u4f46\u7f16\u8bd1\u5668\u4e0d\u80fd\u786e\u5b9a\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u65b9\u6cd5\u90fd\u4e00\u5b9a\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u9700\u8981\u786e\u4fdd\u5728\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84\u4e0a\u90fd\u6709\u8fd4\u56de\u503c\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u9012\u5f52\u8c03\u7528\u4e2d\u6dfb\u52a0\u8fd4\u56de\u8bed\u53e5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n}\n</code></pre>"},{"location":"Programming_Java/03_DataType_2_Casting/","title":"DataType - Casting","text":""},{"location":"Programming_Java/03_DataType_2_Casting/#implicit-casting-widening-casting","title":"Implicit Casting / Widening Casting (\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362)","text":"<pre><code>int a = 10;\ndouble b = a;  // int \u81ea\u52a8\u8f6c\u6362\u4e3a double\nSystem.out.println(b);  // \u8f93\u51fa 10.0\n</code></pre>"},{"location":"Programming_Java/03_DataType_2_Casting/#explicit-casting-narrowing-casting","title":"Explicit Casting / Narrowing Casting (\u663e\u5f0f\u7c7b\u578b\u8f6c\u6362)","text":"<pre><code>double a = 10.5;\nint b = (int) a;  // double \u5f3a\u5236\u8f6c\u6362\u4e3a int\nSystem.out.println(b);  // \u8f93\u51fa 10\n</code></pre>"},{"location":"Programming_Java/03_DataType_2_Casting/#casting-objects","title":"Casting Objects","text":"<p>Related:[Inheritance]</p>"},{"location":"Programming_Java/03_DataType_2_Casting/#upcasting","title":"Upcasting","text":"<pre><code>class Animal {\n    void makeSound() {\n        System.out.println(\"Animal sound\");\n    }\n}\n\nclass Dog extends Animal {\n    void makeSound() {\n        System.out.println(\"Bark\");\n    }\n}\n\nAnimal myDog = new Dog();  // \u81ea\u52a8\u5411\u4e0a\u8f6c\u578b\n//\u5411\u4e0a\u8f6c\u578b\u662f\u81ea\u52a8\u7684\uff0c\u53ef\u4ee5\u5c06\u5b50\u7c7b\u5bf9\u8c61\u8d4b\u503c\u7ed9\u7236\u7c7b\u5f15\u7528\u3002\nmyDog.makeSound();  // \u8f93\u51fa \"Bark\"\n</code></pre>"},{"location":"Programming_Java/03_DataType_2_Casting/#downcasting","title":"Downcasting","text":"<pre><code>Animal myAnimal = new Dog();  // \u5411\u4e0a\u8f6c\u578b\nDog myDog = (Dog) myAnimal;  // \u5411\u4e0b\u8f6c\u578b\n//\u5411\u4e0b\u8f6c\u578b\u662f\u9700\u8981\u5f3a\u5236\u8f6c\u6362\u7684\uff0c\u5fc5\u987b\u663e\u5f0f\u8fdb\u884c\u3002\nmyDog.makeSound();  // \u8f93\u51fa \"Bark\"\n//\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5411\u4e0b\u8f6c\u578b\u6709\u98ce\u9669\uff0c\u5982\u679c\u7c7b\u578b\u4e0d\u5339\u914d\u4f1a\u5bfc\u81f4ClassCastException\u3002\n</code></pre>"},{"location":"Programming_Java/03_DataType_3_Generics%3CT%3E/","title":"Genercis","text":""},{"location":"Programming_Java/03_DataType_3_Generics%3CT%3E/#basic-concept","title":"Basic Concept","text":"<p>\u5728class\u540e\u9762\u58f0\u660egeneric\uff0c\u5728constructor\u8fd9\u91cc\u4e0d\u9700\u8981\u91cd\u590d\u58f0\u660e \u5728class\u5185\u90e8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528generic\u6bd4\u5982T</p> <p>\u5728Java\u4e2d\uff0c\u6cdb\u578b\uff08Generics\uff09\u5141\u8bb8\u4f60\u521b\u5efa\u80fd\u591f\u5904\u7406\u4efb\u4f55\u5f15\u7528\u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u7279\u5b9a\u7684\u7c7b\u578b\u3002\u8fd9\u5927\u5927\u589e\u5f3a\u4e86\u4ee3\u7801\u7684\u7075\u6d3b\u6027\u548c\u590d\u7528\u6027\u3002\u6cdb\u578b\u662f\u57282004\u5e74\u5f15\u5165Java\u4e2d\u7684\u3002</p> <p>\u5728 <code>public class DLList&lt;T&gt;</code> \u4e2d\uff0cT \u662f\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u3002\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u4f7f\u7c7b\u80fd\u591f\u5904\u7406\u591a\u79cd\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u800c\u65e0\u9700\u5728\u7f16\u5199\u7c7b\u65f6\u6307\u5b9a\u5177\u4f53\u7684\u6570\u636e\u7c7b\u578b\u3002\u4ee5\u4e0b\u662f\u5bf9\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u7684\u8be6\u7ec6\u89e3\u91ca\uff1a</p> <p>\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff08T\uff09\u7684\u4f5c\u7528 \u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u58f0\u660e\uff1a</p> <p>\u5728\u7c7b\u540d\u540e\u9762\u4f7f\u7528\u5c16\u62ec\u53f7 <code>&lt;T&gt;</code> \u58f0\u660e\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\u53c2\u6570 T\u3002 T \u4ee3\u8868\u4e00\u4e2a\u7c7b\u578b\u53d8\u91cf\uff0c\u53ef\u4ee5\u5728\u7c7b\u7684\u5b9a\u4e49\u4e2d\u88ab\u4f7f\u7528\u3002 \u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u7684\u547d\u540d\u662f\u7ea6\u5b9a\u4fd7\u6210\u7684\uff0c\u901a\u5e38\u4f7f\u7528\u5355\u4e2a\u5927\u5199\u5b57\u6bcd\uff08\u5982 T, E, K, V \u7b49\uff09\u3002\u5176\u4e2d\uff0cT \u901a\u5e38\u4ee3\u8868\u7c7b\u578b\uff08Type\uff09\uff0cE \u4ee3\u8868\u5143\u7d20\uff08Element\uff09\uff0cK \u4ee3\u8868\u952e\uff08Key\uff09\uff0cV \u4ee3\u8868\u503c\uff08Value\uff09\u3002</p> <p>\u5728\u7c7b\u7684\u5185\u90e8\uff0c\u53ef\u4ee5\u4f7f\u7528 T \u4f5c\u4e3a\u7c7b\u578b\u6765\u58f0\u660e\u53d8\u91cf\u3001\u53c2\u6570\u3001\u8fd4\u56de\u503c\u7b49\u3002 \u4f8b\u5982\uff0c\u5b9a\u4e49\u4e00\u4e2a\u6cdb\u578b\u94fe\u8868\u8282\u70b9\u7c7b\uff1a</p> <pre><code>public class DLList&lt;T&gt; {\n    private class IntNode {\n        public T item;\n        public IntNode next;\n        public IntNode prev;\n\n        public IntNode(T item, IntNode next, IntNode prev) {\n            this.item = item;\n            this.next = next;\n            this.prev = prev;\n        }\n    }\n\n    private IntNode sentinel;\n    private int size;\n\n    public DLList() {\n        sentinel = new IntNode(null, null, null);\n        sentinel.next = sentinel;\n        sentinel.prev = sentinel;\n        size = 0;\n    }\n\n    public void addLast(T x) {\n        IntNode newNode = new IntNode(x, sentinel.prev, sentinel);\n        sentinel.prev.next = newNode;\n        sentinel.prev = newNode;\n        size += 1;\n    }\n\n    public T getLast() {\n        return sentinel.prev.item;\n    }\n\n    public void removeLast() {\n        if (size &gt; 0) {\n            sentinel.prev = sentinel.prev.prev;\n            sentinel.prev.next = sentinel;\n            size -= 1;\n        }\n    }\n}\n</code></pre> <p>\u5728\u4f7f\u7528\u8fd9\u4e2a\u6cdb\u578b\u7c7b\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u5177\u4f53\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff1a</p>"},{"location":"Programming_Java/03_DataType_3_Generics%3CT%3E/#inner-class-usage-of-generic","title":"Inner Class Usage of Generic","text":"<p>\u5728Java\u4e2d\uff0c\u5185\u90e8\u7c7b\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5916\u90e8\u7c7b\u7684\u7c7b\u578b\u53c2\u6570\u3002\u8fd9\u4e2a\u7279\u6027\u4f7f\u5f97\u5728\u5b9a\u4e49\u5185\u90e8\u7c7b\u65f6\u4e0d\u9700\u8981\u91cd\u65b0\u58f0\u660e\u6cdb\u578b\u53c2\u6570\u3002</p> <p>\u6ce8\u610f\u9519\u8bef\uff1ainner class\u5185\u90e8\u7c7b\u4f7f\u7528\u5916\u90e8generic T\u7684\u65f6\u5019\uff0c\u5185\u90e8\u7c7b\u9519\u8bef\u58f0\u660e\u4e3astatic</p> <pre><code>...\n    public static class Node{ //\u8fd9\u91cc\u9519\u8bef\uff0c\u56e0\u4e3a\u5728inner class Node\u4e2d\u7528\u5230\u4e86\u5916\u90e8\u7c7b\u58f0\u660e\u7684T\uff0c\u6240\u4ee5\u4e0d\u80fd\u628aNode\u58f0\u660e\u4e3astatic\u7c7b\u578b\u7684\n        public Node prev;\n        public T item;\n        public Node next;\n    }\n}\n</code></pre>"},{"location":"Programming_Java/05_Class_1_Intro/","title":"04_Class","text":"<p>Q: why use class? A: Reduce complexity.</p>"},{"location":"Programming_Java/05_Class_1_Intro/#define-a-typical-class-terminology","title":"Define a typical class (Terminology)","text":"<pre><code>public class Dog{\n    public int age; // instance variable\n    public ArrayList&lt;Integer&gt; x = new ArrayList&lt;Integer&gt;(); // \u53ef\u4ee5\u5728\u58f0\u660e\u65f6\u8fdb\u884c\u521d\u59cb\u5316\uff08static &amp; non-static\u90fd\u53ef\u4ee5\uff09\n\n    public Dog(int age){ //constructor\n        this.age = age;\n    }\n\n    public void makeNoise(){ //non-static method, aka Instance Method\n        if(age &lt; 10){\n            System.out.println(\"uuuuu\");\n        }\n        else{\n            System.out.println(\"wwwww\");\n        }\n    }\n}\n</code></pre>"},{"location":"Programming_Java/05_Class_1_Intro/#class-methods-vs-instance-methods","title":"Class methods vs Instance Methods","text":"<p>Java allows us to define two types of methods: 1. Class methods, a.k.a. static methods. 1. Instance methods, a.k.a. non-static methods.</p> <p>Instance methods are actions that can be taken only by a specific instance of a class. Static methods are actions that are taken by the class itself.</p>"},{"location":"Programming_Java/05_Class_1_Intro/#static-method-class-method","title":"Static Method (Class Method)","text":"<p>Eg.<code>x = Math.round(5.6);</code> is an example that static methods shows more clarity and simplicity.</p>"},{"location":"Programming_Java/05_Class_1_Intro/#non-static-method-instance-method","title":"Non-static Method (Instance Method)","text":"<p>About non-static method, aka instance method: If the method is going to be invoked by an instance of the class, then it should be non-static. Which means, if the method needs to use \"my instance variables\", the method must be non-static.\u7b80\u8a00\u4e4b\uff1aobject\uff08instance of a class\uff09\u7684\u65b9\u6cd5\u5fc5\u987b\u662fnon-static\u7684\u3002</p>"},{"location":"Programming_Java/05_Class_1_Intro/#variables-in-the-class","title":"Variables in the class","text":""},{"location":"Programming_Java/05_Class_1_Intro/#static-variables","title":"static variables","text":"<p>Static variables are properties inherent to the class itself, rather than the instance. Static variables should be accessed using the name of the class rather than a specific instance.</p>"},{"location":"Programming_Java/05_Class_1_Intro/#this","title":"this","text":"<p>In a class, this means the object itself.</p> <p>this\u7684\u7528\u6cd5\uff1a 1. <code>this</code> 1. <code>this.instance_variable</code> 1. <code>this.method()</code> 1. <code>this(argument1, argument2)</code>: call another constructor 1. <code>return this;</code></p>"},{"location":"Programming_Java/05_Class_2_Nested-Class/","title":"Nested Class","text":"<p>Oracle Official Document of Nested CLass</p>"},{"location":"Programming_Java/05_Class_2_Nested-Class/#why-use-nested-class","title":"Why use nested class","text":"<p>Compelling reasons for using nested classes include the following:</p> <ol> <li>It is a way of logically grouping classes that are only used in one place: If a class is useful to only one other class, then it is logical to embed it in that class and keep the two together. Nesting such \"helper classes\" makes their package more streamlined.</li> <li>It increases encapsulation: Consider two top-level classes, A and B, where B needs access to members of A that would otherwise be declared private. By hiding class B within class A, A's members can be declared private and B can access them. In addition, B itself can be hidden from the outside world.</li> <li>It can lead to more readable and maintainable code: Nesting small classes within top-level classes places the code closer to where it is used.</li> </ol>"},{"location":"Programming_Java/05_Class_3_Object/","title":"07_Object(Class)","text":"<p>The Object class in Java is a special class that serves as the superclass of all classes. This means that every class in Java directly or indirectly inherits from the Object class. As a result, the Object class defines some fundamental methods that can be called on any Java object.</p>"},{"location":"Programming_Java/05_Class_3_Object/#defination","title":"Defination","text":"<p>The Object class is the root class of the Java class hierarchy. Every class in Java is a descendant of the Object class. The Object class is located in the java.lang package.</p> <pre><code>public class Object{\n    //some method definitions\n}\n</code></pre>"},{"location":"Programming_Java/05_Class_3_Object/#methods-of-object-class","title":"Methods of Object Class","text":"<p>All classes inherit from the overarching Object class. The methods that are inherited are as follows:</p> <p>String toString()</p> <p>boolean equals(Object obj)</p> <p>Class &lt;?&gt; getClass()</p> <p>int hashCode()</p> <p>protected Objectclone()</p> <p>protected void finalize()</p> <p>void notify()</p> <p>void notifyAll()</p> <p>void wait()</p> <p>void wait(long timeout)</p> <p>void wait(long timeout, int nanos)</p>"},{"location":"Programming_Java/05_Class_3_Object/#string-tostring","title":"String toString()","text":"<p>When you run <code>System.out.println(dog)</code>, it's actually doing this:<code>String s = dog.toString();System.out.println(s);</code></p> <p>The default Object class' toString() method prints the location of the object in memory. This is a hexadecimal string. Classes like Arraylist and java arrays have their own overridden versions of the toString() method. This is why, when you were working with and writing tests for Arraylist, errors would always return the list in a nice format like this (1, 2, 3, 4) instead of returning the memory location.</p> <p>For classes that we've written by ourselves like ArrayDeque, LinkedListDeque, etc, we need to provide our own toString() method if we want to be able to see the objects printed in a readable format.</p> <pre><code>//here introduces StringBuilder method to decrease time\n//more info: https://cs61b-2.gitbook.io/cs61b-textbook/12.-inheritance-iv-iterators-object-methods/12.4-object-methods\npublic String toString() {\n        StringBuilder returnSB = new StringBuilder(\"{\");\n        for (int i = 0; i &lt; size - 1; i += 1) {\n            returnSB.append(items[i].toString());\n            returnSB.append(\", \");\n        }\n        returnSB.append(items[size - 1]);\n        returnSB.append(\"}\");\n        return returnSB.toString();\n    }\n</code></pre>"},{"location":"Programming_Java/05_Class_3_Object/#boolean-equalsobject-obj","title":"boolean equals(Object obj)","text":"<p>Rules for Equals in Java: Overriding a .equals() method may sometimes be trickier than it seems. A couple of rules to adhere to while implementing your .equals() method are as follows:</p> <p>1.) equals must be an equivalence relation</p> <p>reflexive: x.equals(x) is true</p> <p>symmetric: x.equals(y) if and only if y.equals(x)</p> <p>transitive: x.equals(y) and y.equals(z) implies x.equals(z)</p> <p>2.) It must take an Object argument, in order to override the original .equals() method</p> <p>3.) It must be consistent if x.equals(y), then as long as x and y remain unchanged: x must continue to equal y</p> <p>4.) It is never true for null x.equals(null) must be false</p>"},{"location":"Programming_Java/05_Class_4_String/","title":"05_String(Class)","text":""},{"location":"Programming_Java/05_Class_4_String/#defination","title":"Defination","text":"<p>In java, String uses \"\", while char uses ''</p>"},{"location":"Programming_Java/05_Class_4_String/#methods","title":"Methods","text":"length() return the length of the String charAt(int index) return the char at index substring(...) int i: from i to the end int i, int j: from i to j, j excluded indexOf(String str) return the index of the first appearance,  otherwise return -1 lastIndexOf(String str) ...last appearance...-1. .startsWith(String str) return true if the String starts with str .endsWith(String str) ...ends with... .toLowerCase() to converts all characters to lowercase .toUpperCase() to converts all characters to uppercase .trim() to removes whitespace characters from both ends of a string .replace( CharSequence target,  CharSequence replacement) to replace all occurrences of a specified substring in a string .split(String regex) Splits a string according to the specified regular expression and returns a string array. String[] parts = str.split(\", \");   // output: [\"Hello\", \"World!\"] .equals(Object ...) return true if the strings are totally same"},{"location":"Programming_Java/05_Class_4_String/#method-others","title":"Method-Others","text":"<p><code>.compareTo</code> str1.compareTo(str2) 1. return negative num if str1 &lt; str2 in alphabetical order. 1. return 0 if same 1. return positive num if str1 &gt; str2 </p>"},{"location":"Programming_Java/05_Class_4_String/#traverse-char","title":"Traverse, \u4e0echar\u7684\u8f6c\u6362","text":"<pre><code>String str = \"Hello, World!\";\nfor (int i = 0; i &lt; str.length(); i++) {\n    char c = str.charAt(i);\n    System.out.println(c);\n}\n</code></pre> <p>charAt \u65b9\u6cd5\u662f Java \u4e2d String \u7c7b\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0c\u7528\u4e8e\u8fd4\u56de\u6307\u5b9a\u7d22\u5f15\u5904\u7684\u5b57\u7b26\u3002\u4ee5\u4e0b\u662f\u5176\u57fa\u672c\u7528\u6cd5\u548c\u76f8\u5173\u793a\u4f8b\uff1a public char charAt(int index) parameter index\uff1a\u8981\u8fd4\u56de\u5b57\u7b26\u7684\u7d22\u5f15\uff0c\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u3002 return value: \u8fd4\u56de\u6307\u5b9a\u7d22\u5f15\u5904\u7684\u5b57\u7b26\u3002</p>"},{"location":"Programming_Java/05_Class_4_String/#char","title":"\u4e0echar\u7684\u8f6c\u6362","text":"<p>\u5728java\u4e2d\uff0cchar\u548cString\u662f\u4e24\u79cd\u6570\u636e\u7c7b\u578b\uff0cchar\u662f</p> <p>\u4f7f\u7528 String.valueOf((char)(x + i - 1)) \u5c06 char \u8f6c\u6362\u4e3a String\u3002 //\u8fd9\u662f\u4e00\u4e2astatic method\uff0c\u76f4\u63a5\u7528String. + valueOf...\u53bb\u7528</p> <p>\u5982\u679c\u4f60\u53ea\u60f3\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u53ef\u4ee5\u4f7f\u7528charAt(i)\u65b9\u6cd5\u3002</p> <p>\u5982\u679c\u4f60\u9700\u8981\u5c06\u6574\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u7b26\u6570\u7ec4\uff0c\u53ef\u4ee5\u4f7f\u7528toCharArray()\u65b9\u6cd5\u3002</p>"},{"location":"Programming_Java/05_Class_5_Wrapper/","title":"05_Wrapper(Class)","text":"<p>\u5e94\u8be5\u4f7f\u7528 equals \u65b9\u6cd5\u6765\u6bd4\u8f83 Integer \u5bf9\u8c61\u7684\u503c\u3002</p>"},{"location":"Programming_Java/05_Class_5_Wrapper/#integer","title":"Integer","text":"<p>\u5c06String\u5b57\u7b261\u8f6c\u6362\u4e3a\u6574\u65701\uff1a Integer.parseInt(\"1\");</p>"},{"location":"Programming_Java/05_Class_5_Wrapper/#_1","title":"\u81ea\u52a8\u5206\u88c5","text":"<p>\uff08\u5f85\u8fdb\u4e00\u6b65\u786e\u8ba4\uff09\u58f0\u660e\u4e3aInteger\u7684\u5730\u65b9\u53ef\u4ee5\u76f4\u63a5\u5199int\uff0c\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3aInteger</p> <p>\u5c06\u57fa\u672c\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5305\u88c5\u7c7b\u5bf9\u8c61\u7684\u8fc7\u7a0b\u79f0\u4e3a\u88c5\u7bb1\u3002Java \u63d0\u4f9b\u4e86\u81ea\u52a8\u88c5\u7bb1 (autoboxing)\uff0c\u8fd9\u610f\u5473\u7740 Java \u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5730\u5c06\u57fa\u672c\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a\u5305\u88c5\u7c7b\u5bf9\u8c61\u3002\u4f8b\u5982\uff1a</p> <p>\u5c06\u5305\u88c5\u7c7b\u5bf9\u8c61\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u8fc7\u7a0b\u79f0\u4e3a\u62c6\u7bb1\u3002Java \u63d0\u4f9b\u4e86\u81ea\u52a8\u62c6\u7bb1 (auto-unboxing)\uff0c\u8fd9\u610f\u5473\u7740 Java \u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5730\u5c06\u5305\u88c5\u7c7b\u5bf9\u8c61\u8f6c\u6362\u4e3a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002\u4f8b\u5982\uff1a</p>"},{"location":"Programming_Java/06_Interface_Iterators%26Iterables/","title":"06_Interface_Iterators&Iterables.md","text":""},{"location":"Programming_Java/06_Interface_Iterators%26Iterables/#iterator","title":"iterator","text":"<p>iterator() \u662f\u4e00\u79cd\u7528\u4e8e\u904d\u5386\u96c6\u5408\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002\u5b83\u662f Java \u4e2d Iterator \u63a5\u53e3\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u5bf9\u96c6\u5408\uff08\u5982 List\u3001Set \u7b49\uff09\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u8fed\u4ee3\u8bbf\u95ee\u3002\u4f7f\u7528 iterator() \u53ef\u4ee5\u907f\u514d\u5728\u904d\u5386\u96c6\u5408\u65f6\u51fa\u73b0\u5e76\u53d1\u4fee\u6539\u5f02\u5e38\uff08ConcurrentModificationException\uff09\u3002</p> <p>There are three key methods in our iterator approach:</p> <p>First, we get a new iterator object with Iterator seer = friends.iterator(); <p>Next, we loop through the list with our while loop. We check that there are still items left with seer.hasNext(), which will return true if there are unseen items remaining, and false if all items have been processed.</p> <p>Last, seer.next() does two things at once. It returns the next element of the list, and here we print it out. It also advances the iterator by one item. In this way, the iterator will only inspect each item once. </p> <pre><code>// \u4ee5\u4e0b\u662f\u4f7f\u7528 iterator() \u7684\u57fa\u672c\u6b65\u9aa4\u548c\u793a\u4f8b\u4ee3\u7801\uff1a\n// 1. \u83b7\u53d6\u96c6\u5408\u7684\u8fed\u4ee3\u5668\uff1a\u901a\u8fc7\u8c03\u7528\u96c6\u5408\u5bf9\u8c61\u7684 iterator() \u65b9\u6cd5\u6765\u83b7\u53d6\u4e00\u4e2a Iterator \u5bf9\u8c61\u3002\n// 2. \u904d\u5386\u96c6\u5408\uff1a\u4f7f\u7528 Iterator \u5bf9\u8c61\u7684 hasNext() \u548c next() \u65b9\u6cd5\u6765\u904d\u5386\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u3002\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\npublic class IteratorExample {\n    public static void main(String[] args) {\n        // Create a set\n        List&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(\"Apple\");\n        list.add(\"Banana\");\n        list.add(\"Orange\");\n\n        // \u83b7\u53d6set\u7684iterator\uff08\u8fed\u4ee3\u5668\uff09\n        Iterator&lt;String&gt; iterator = list.iterator();\n\n        // use iterator to traverse\n        while (iterator.hasNext()) {\n            String element = iterator.next();\n            System.out.println(element);\n        }\n    }\n}\n</code></pre>"},{"location":"Programming_Java/06_Interface_Iterators%26Iterables/#iterable","title":"iterable","text":""},{"location":"Programming_Java/06_Interface_Iterators%26Iterables/#difference-between-iterators-and-iterables","title":"Difference between Iterators and Iterables","text":"<p>These two words are very closely related, but have two different meanings that are often easy to confuse. The first thing to know is that these are both Java interfaces, with different methods that need to be implemented. Here is a simplified interface for Iterator:</p> <pre><code>public interface Iterator&lt;T&gt; {\n  boolean hasNext();\n  T next();\n}\n</code></pre> <p>Here is a simplified interface for Iterable:</p> <pre><code>public interface Iterable&lt;T&gt; {\n    Iterator&lt;T&gt; iterator();\n}\n</code></pre> <p>Notice that in order for an object (for example an ArrayList or LinkedList) to be iterable, it must include a method that returns an iterator. The iterator is the object that actively steps through an iterable object. Keep this relationship and distinction in mind as you work with these two interfaces.</p>"},{"location":"Programming_Java/06_Interface_compare_Comparable/","title":"Comparable","text":"<p>comparable usually used for natural ordering.</p>"},{"location":"Programming_Java/06_Interface_compare_Comparable/#javalangcomparable","title":"java.lang.Comparable","text":"<p>The Comparable interface is part of the java.lang package and is used to define a natural ordering for the objects of a class. When a class implements the Comparable interface, it allows instances of that class to be compared with each other, typically for sorting purposes.</p>"},{"location":"Programming_Java/06_Interface_compare_Comparable/#ourcomparable-home-made-comparable","title":"OurComparable (home-made Comparable)","text":"<p>\u662f\u7684\uff0c\u4f60\u7684\u4ee3\u7801\u5f88\u597d\u5730\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Comparable \u63a5\u53e3\u6765\u6bd4\u8f83\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\uff0cDog \u548c Person \u7c7b\u90fd\u5b9e\u73b0\u4e86 OurComparable \u63a5\u53e3\uff0c\u5e76\u4e14\u5b9a\u4e49\u4e86 compareTo \u65b9\u6cd5\uff0c\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7\u901a\u7528\u7684 MAX \u65b9\u6cd5\u627e\u5230\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u5143\u7d20\u3002</p> <pre><code>//interface file\npublic interface OurComparable {\n    public int compareTo(Object o);\n}\n\n//class files\npublic class Main {\n    public static void main(String[] args) {\n        Dog[] arr = new Dog[3];\n        arr[0] = new Dog(\"gaga\", 5);\n        arr[1] = new Dog(\"bubu\", 10);\n        arr[2] = new Dog(\"kiki\", 15);\n        Dog x = (Dog) MAX(arr);\n        System.out.println(x.getName());\n\n        Person[] persons = new Person[3];\n        persons[0] = new Person(\"John\", 180);\n        persons[1] = new Person(\"Jeff\", 179);\n        persons[2] = new Person(\"Jason\", 175);\n        Person maxPerson = (Person) MAX(persons);\n        System.out.println(maxPerson.getName());\n    }\n\n    public static OurComparable MAX(OurComparable[] items) {\n        if (items == null || items.length == 0) {\n            return null;\n        }\n        OurComparable maxItem = items[0];\n        for(OurComparable item: items){\n            if(item.compareTo(maxItem)&gt;0){\n                maxItem = item;\n            }\n        }\n        return maxItem;\n    }\n}\n\npublic class Dog implements OurComparable{\n    private String name;\n    private int age;\n    public Dog(String name , int age){\n        this.name = name;\n        this.age = age;\n    }\n    public String getName(){\n        return name;\n    }\n\n    @Override\n    public int compareTo(Object o){\n        if (o instanceof Dog otherDog) {\n            return Integer.compare(this.age, otherDog.age);\n        }\n        throw new IllegalArgumentException(\"Cannot compare Dog with non-Dog object\");\n    }\n}\n\npublic class Person implements OurComparable{\n    private String name;\n    private int height;\n    public Person(String name , int height){\n        this.name = name;\n        this.height = height;\n    }\n    public String getName(){\n        return name;\n    }\n\n    @Override\n    public int compareTo(Object o){\n        if (o instanceof Person otherPerson) {\n            return Integer.compare(this.height, otherPerson.height);\n        }\n        throw new IllegalArgumentException(\"Cannot compare Dog with non-Dog object\");\n    }\n}\n</code></pre>"},{"location":"Programming_Java/06_Interface_compare_Comparator/","title":"06_Interface_compare_Comparator.md","text":""},{"location":"Programming_Java/06_Interface_compare_Comparator/#comparatorcomparable","title":"Comparator\u4e0eComparable\u7684\u5bf9\u6bd4","text":"<p>Comparable \u63a5\u53e3\u8ba9\u4e00\u4e2a\u7c7b\u81ea\u8eab\u5177\u5907\u6bd4\u8f83\u80fd\u529b\u3002\u7c7b\u5b9e\u73b0 Comparable \u63a5\u53e3\uff0c\u5e76\u5b9e\u73b0 compareTo \u65b9\u6cd5\uff0c\u8fd9\u6837\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u7684\u67d0\u4e2a\u7279\u5f81\u8fdb\u884c\u6bd4\u8f83\u3002</p> <p>Q\uff1a\u4f46\u662f\u5982\u679c\u6211\u628acomparable\u7684implementation\u6539\u6210\u540d\u5b57\u5bf9\u6bd4\uff0c\u4e0d\u662f\u4e5f\u80fd\u5b9e\u73b0\u540d\u5b57\u7684\u6392\u5e8f\u5417\uff1f</p> <p>A\uff1a\u662f\u7684\uff0c\u4f60\u53ef\u4ee5\u5c06 Comparable \u7684 compareTo \u5b9e\u73b0\u6539\u4e3a\u6309\u540d\u5b57\u6bd4\u8f83\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6309\u540d\u5b57\u6392\u5e8f\u3002\u4f46\u662f\u8fd9\u6837\u505a\u4f1a\u6539\u53d8 Dog \u7c7b\u7684\u81ea\u7136\u987a\u5e8f\uff0c\u4f7f\u5f97\u81ea\u7136\u987a\u5e8f\u53d8\u6210\u6309\u540d\u5b57\u6392\u5e8f\uff0c\u800c\u4e0d\u662f\u6309\u5927\u5c0f\u6392\u5e8f\u3002\u8fd9\u4f1a\u9650\u5236\u4f60\u7684\u6392\u5e8f\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u81ea\u7136\u987a\u5e8f\u3002</p> <p>\u5f53\u4f60\u9700\u8981\u6dfb\u52a0\u65b0\u7684\u6392\u5e8f\u65b9\u5f0f\u65f6\uff0c\u53ea\u9700\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6bd4\u8f83\u5668\u7c7b\uff0c\u800c\u4e0d\u9700\u8981\u4fee\u6539 Dog \u7c7b\u4e2d\u7684 compareTo \u65b9\u6cd5\u3002</p> <p>An object that implements Comparable can compare another object to itself, whereas a Comparator compares two objects other than itself. </p> <p>A good way to remember this is that a Comparable has an inherent property of being able to be compared, while a Comparator is an external source of truth.</p>"},{"location":"Programming_Java/06_Interface_compare_Comparator/#comparablecomparator","title":"\u5728Comparable\u7684\u793a\u4f8b\u57fa\u7840\u4e0a\u7684\u4e3e\u4f8b\u8bf4\u660eComparator\u7684\u533a\u522b","text":"<pre><code>import java.util.Comparator;\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog[] arr = new Dog[3];\n        arr[0] = new Dog(\"gaga\", 5);\n        arr[1] = new Dog(\"bubu\", 10);\n        arr[2] = new Dog(\"kiki\", 15);\n        Dog x = (Dog) MAX(arr);\n        System.out.println(x.getName());\n\n        Person[] persons = new Person[3];\n        persons[0] = new Person(\"John\", 180);\n        persons[1] = new Person(\"Jeff\", 179);\n        persons[2] = new Person(\"Jason\", 175);\n        Person maxPerson = (Person) MAX(persons);\n        System.out.println(maxPerson.getName());\n\n        //comparator\n        Dog.NameComparator compareDogName = new Dog.NameComparator();\n        System.out.println(compareDogName.compare(arr[0], arr[1]));\n\n    }\n\n    public static OurComparable MAX(OurComparable[] items) {\n        if (items == null || items.length == 0) {\n            return null;\n        }\n        OurComparable maxItem = items[0];\n        for(OurComparable item: items){\n            if(item.compareTo(maxItem)&gt;0){\n                maxItem = item;\n            }\n        }\n        return maxItem;\n    }\n}\n\nclass Dog implements OurComparable{\n    private String name;\n    private int age;\n    public Dog(String name , int age){\n        this.name = name;\n        this.age = age;\n    }\n    public String getName(){\n        return name;\n    }\n\n    @Override\n    public int compareTo(Object o){\n        if (o instanceof Dog otherDog) {\n            return Integer.compare(this.age, otherDog.age);\n        }\n        throw new IllegalArgumentException(\"Cannot compare Dog with non-Dog object\");\n    }\n\n    public static class NameComparator implements Comparator&lt;Dog&gt; {\n        public int compare(Dog a, Dog b){\n            return(a.getName().compareTo(b.getName()));\n        }\n    }\n\n}\n\nclass Person implements OurComparable{\n    private String name;\n    private int height;\n    public Person(String name , int height){\n        this.name = name;\n        this.height = height;\n    }\n    public String getName(){\n        return name;\n    }\n\n    @Override\n    public int compareTo(Object o){\n        if (o instanceof Person otherPerson) {\n            return Integer.compare(this.height, otherPerson.height);\n        }\n        throw new IllegalArgumentException(\"Cannot compare Dog with non-Dog object\");\n    }\n}\n</code></pre>"},{"location":"Programming_Java/07_Inheritance_1_Intro/","title":"Inheritance","text":"<p>hypernyms\uff08\u4e0a\u4f4d\u8bcd\uff09</p> <p>Hyponyms\uff08\u4e0b\u4f4d\u8bcd\uff09</p> <p>Superclass    | Subclass    |    |-- Subclass1    |    |-- Subclass2</p> <pre><code>classDiagram\n    Superclass &lt;|-- Subclass\n    Subclass &lt;|-- Subclass1\n    Subclass &lt;|-- Subclass2\n</code></pre>"},{"location":"Programming_Java/07_Inheritance_1_Intro/#interface-inheritance-vs-implementation-inheritance","title":"Interface Inheritance vs Implementation Inheritance","text":"<p>\u63a5\u53e3\u7ee7\u627f\uff08Interface Inheritance\uff09 \u63a5\u53e3\u7ee7\u627f\u662f\u6307\u4e00\u4e2a\u7c7b\u5b9e\u73b0\u4e00\u4e2a\u6216\u591a\u4e2a\u63a5\u53e3\uff0c\u4ece\u800c\u627f\u8bfa\u5b9e\u73b0\u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u65b9\u6cd5\u3002\u63a5\u53e3\u672c\u8eab\u4e0d\u63d0\u4f9b\u65b9\u6cd5\u7684\u5b9e\u73b0\uff0c\u5b83\u53ea\u63d0\u4f9b\u65b9\u6cd5\u7684\u7b7e\u540d\u3002</p> <p>\u7279\u70b9 \u591a\u7ee7\u627f\uff1aJava\u7c7b\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\uff0c\u8fd9\u5f25\u8865\u4e86Java\u5355\u7ee7\u627f\u7684\u9650\u5236\u3002 \u5f3a\u5236\u7ea6\u5b9a\uff1a\u63a5\u53e3\u5b9a\u4e49\u4e86\u4e00\u7ec4\u65b9\u6cd5\uff0c\u7c7b\u5b9e\u73b0\u63a5\u53e3\u65f6\u5fc5\u987b\u63d0\u4f9b\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\u3002 \u677e\u8026\u5408\uff1a\u63a5\u53e3\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u7075\u6d3b\u548c\u6a21\u5757\u5316\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u66ff\u6362\u5b9e\u73b0\u3002</p> <p>\u5b9e\u73b0\u7ee7\u627f\uff08Implementation Inheritance\uff09 \u5b9e\u73b0\u7ee7\u627f\u662f\u6307\u4e00\u4e2a\u7c7b\u7ee7\u627f\u53e6\u4e00\u4e2a\u7c7b\uff0c\u4ece\u800c\u7ee7\u627f\u5176\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u5b50\u7c7b\u53ef\u4ee5\u4f7f\u7528\u7ee7\u627f\u81ea\u7236\u7c7b\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\uff0c\u4e5f\u53ef\u4ee5\u91cd\u5199\u7236\u7c7b\u7684\u65b9\u6cd5\u3002</p> <p>\u7279\u70b9 \u5355\u7ee7\u627f\uff1aJava\u53ea\u652f\u6301\u5355\u7ee7\u627f\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u76f4\u63a5\u7684\u7236\u7c7b\u3002 \u4ee3\u7801\u91cd\u7528\uff1a\u5b50\u7c7b\u53ef\u4ee5\u91cd\u7528\u7236\u7c7b\u4e2d\u7684\u4ee3\u7801\uff0c\u51cf\u5c11\u91cd\u590d\u4ee3\u7801\u3002 \u7ee7\u627f\u5173\u7cfb\uff1a\u7ee7\u627f\u8868\u793a\u4e00\u79cd\u201c\u662f\u4e00\u4e2a\u201d\uff08is-a\uff09\u7684\u5173\u7cfb\uff0c\u5b50\u7c7b\u662f\u7236\u7c7b\u7684\u4e00\u79cd\u7279\u6b8a\u5316\u3002</p> <p>\u603b\u7ed3</p> <p>\u63a5\u53e3\u7ee7\u627f\u548c\u5b9e\u73b0\u7ee7\u627f\u5728Java\u4e2d\u90fd\u6709\u5176\u7279\u5b9a\u7684\u7528\u9014\u548c\u4f18\u70b9\u3002\u63a5\u53e3\u7ee7\u627f\u63d0\u4f9b\u4e86\u7075\u6d3b\u6027\u548c\u591a\u6001\u6027\uff0c\u800c\u5b9e\u73b0\u7ee7\u627f\u63d0\u4f9b\u4e86\u4ee3\u7801\u91cd\u7528\u548c\u7ed3\u6784\u5316\u7684\u7ee7\u627f\u5173\u7cfb\u3002\u5728\u8bbe\u8ba1\u7c7b\u7684\u4f53\u7cfb\u7ed3\u6784\u65f6\uff0c\u5e94\u8be5\u6839\u636e\u5177\u4f53\u7684\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7ee7\u627f\u65b9\u5f0f\u3002</p>"},{"location":"Programming_Java/07_Inheritance_2_Implementation-Inheritance/","title":"Class - Implementation Inheritance","text":""},{"location":"Programming_Java/07_Inheritance_2_Implementation-Inheritance/#extends","title":"Extends","text":"<p>Extends:</p> <ol> <li>All instance and static variables.</li> <li>All methods.</li> <li>All nested classes.</li> <li>Constructors are not inherited.</li> </ol> <p>Important Note: extends should only be used for is-a (hypernymic) relationships!</p> <p>Common mistake is to use it for \u201chas-a\u201d relationships. (a.k.a. meronymic). \u4f8b\u5982\uff0c\u4e00\u4e2aDog\u7c7b\u5e94\u8be5\u6269\u5c55\uff08extends\uff09\u4e00\u4e2aAnimal\u7c7b\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u72d7\uff08Dog\uff09\u90fd\u662f\u4e00\u4e2a\u52a8\u7269\uff08Animal\uff09\u3002  \u53c8\u4f8b\u5982\uff0c\u4e00\u4e2aCar\u7c7b\u4e0d\u5e94\u8be5\u6269\u5c55\uff08extends\uff09\u4e00\u4e2aEngine\u7c7b\uff0c\u56e0\u4e3a\u8f66\uff08Car\uff09\u6709\u4e00\u4e2a\uff08has-a\uff09\u5f15\u64ce\uff08Engine\uff09\uff0c\u800c\u4e0d\u662f\u8f66\u662f\u4e00\u4e2a\u5f15\u64ce\uff08Car is an Engine\uff09\u3002</p>"},{"location":"Programming_Java/07_Inheritance_2_Implementation-Inheritance/#super","title":"super()","text":"<p>Constructors are not inherited. However, the rules of Java say that all constructors must start with a call to one of the super class\u2019s constructors. If you don\u2019t explicitly call the constructor, Java will automatically do it for you.</p> <pre><code>// These constructors below are exactly equivalent:\npublic VengefulSLList() {\n   deletedItems = new SLList&lt;Item&gt;();\n   //\u5728\u7b2c\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u6ca1\u6709\u663e\u5f0f\u8c03\u7528\u7236\u7c7bSLList\u7684\u6784\u9020\u51fd\u6570\uff0c\u4f46\u662fJava\u4f1a\u81ea\u52a8\u8c03\u7528\u7236\u7c7b\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570super()\u3002\n}\n\npublic VengefulSLList() {\n   super();\n   deletedItems = new SLList&lt;Item&gt;();\n}\n</code></pre> <p>On the other hand, if you want to use a super constructor other than the no-argument constructor, can give parameters to super.</p> <pre><code>//These constructors below are not equivalent! The code to below makes implicit call to super(), not super(x). This is because only the empty argument super() is called.\npublic VengefulSLList(Item x) {\n   super(x);\n   deletedItems = new SLList&lt;Item&gt;();\n}\n\npublic VengefulSLList(Item x) {\n   deletedItems = new SLList&lt;Item&gt;();\n   //\u8fd9\u91cc\u6ca1\u6709\u663e\u5f0f\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5Java\u4f1a\u9690\u5f0f\u5730\u8c03\u7528\u7236\u7c7b\u7684\u9ed8\u8ba4\u65e0\u53c2\u6570\u6784\u9020\u51fd\u6570super()\u3002\u8fd9\u610f\u5473\u7740\uff0c\u7236\u7c7b\u90e8\u5206\u7684\u521d\u59cb\u5316\u5c06\u4e0d\u4f1a\u4f7f\u7528\u4f20\u9012\u7684\u53c2\u6570x\u3002\n}\n</code></pre>"},{"location":"Programming_Java/07_Inheritance_2_Implementation-Inheritance/#the-object-class","title":"The Object Class","text":"<p>As it happens, every type in Java is a descendant of the Object class. (implicity)</p>"},{"location":"Programming_Java/07_Inheritance_2_Implementation-Inheritance/#encapsulation","title":"Encapsulation","text":"<p>When building large programs, our enemy is complexity.</p> <p>Module: A set of methods that work together as a whole to perform some task or set of related tasks. A module is said to be encapsulated if its implementation is completely hidden, and it can be accessed only through a documented interface.</p> <p>\u6a21\u5757\u662f\u4e00\u7ec4\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u534f\u540c\u5de5\u4f5c\u4ee5\u5b8c\u6210\u67d0\u4e2a\u4efb\u52a1\u6216\u4e00\u7ec4\u76f8\u5173\u4efb\u52a1\u3002\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u8d2d\u7269\u8f66\u7cfb\u7edf\u4e2d\uff0c\u4e00\u4e2a\u6a21\u5757\u53ef\u80fd\u5305\u542b\u6dfb\u52a0\u5546\u54c1\u3001\u79fb\u9664\u5546\u54c1\u3001\u8ba1\u7b97\u603b\u4ef7\u7b49\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5171\u540c\u5b8c\u6210\u8d2d\u7269\u8f66\u7684\u529f\u80fd\u3002\u4e00\u4e2a\u6a21\u5757\u5982\u679c\u5176\u5b9e\u73b0\u5b8c\u5168\u9690\u85cf\uff0c\u5e76\u4e14\u53ea\u80fd\u901a\u8fc7\u6587\u6863\u5316\u7684\u63a5\u53e3\u8bbf\u95ee\uff0c\u5c31\u88ab\u8ba4\u4e3a\u662f\u5c01\u88c5\u7684\u3002 \u5c01\u88c5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u9690\u85cf\u6a21\u5757\u7684\u5185\u90e8\u5b9e\u73b0\u7ec6\u8282\uff0c\u53ea\u66b4\u9732\u5fc5\u8981\u7684\u63a5\u53e3\u7ed9\u5916\u90e8\u4f7f\u7528\u8005\u3002 \u4f8b\u5982\uff0c\u8d2d\u7269\u8f66\u6a21\u5757\u7684\u5185\u90e8\u53ef\u80fd\u6d89\u53ca\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\uff0c\u4f46\u5916\u90e8\u7528\u6237\u53ea\u9700\u8981\u901a\u8fc7\u7b80\u5355\u7684\u65b9\u6cd5\uff08\u5982addItem\u3001removeItem\uff09\u6765\u4e0e\u8d2d\u7269\u8f66\u6a21\u5757\u4ea4\u4e92\uff0c\u800c\u4e0d\u9700\u8981\u5173\u5fc3\u5176\u5185\u90e8\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002</p>"},{"location":"Programming_Java/07_Inheritance_2_Implementation-Inheritance/#casting","title":"Casting","text":"<p>See: [[Casting]]</p>"},{"location":"Programming_Java/07_Inheritance_3_Interface-Inheritance/","title":"07_Inheritance_3_Interface-Inheritance.md","text":"<p>Interface\u5b9a\u4e49\u884c\u4e3a\u7ea6\u5b9a\uff0cClass\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e9b\u884c\u4e3a\u3002Interface\u672c\u8eab\u5e76\u4e0d\u662fClass\uff0c\u4f46\u5b83\u4eec\u5b9a\u4e49\u4e86Class\u53ef\u4ee5\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002 Interface\uff1aInterface\u5b9a\u4e49\u4e86\u4e00\u7ec4\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5fc5\u987b\u7531\u5b9e\u73b0\u8be5\u63a5\u53e3\u7684Class\u6765\u5b9e\u73b0\u3002Interface\u4e0d\u80fd\u5305\u542b\u5177\u4f53\u5b9e\u73b0\uff0c\u53ea\u5b9a\u4e49\u65b9\u6cd5\u7684\u7b7e\u540d\u3002</p> <p>Step 1: Define an Interface</p> <pre><code>interface Animal {\n    void makeSound();\n    void move();\n}\n</code></pre> <p>Step 2: Implement the Interface</p> <p>NOTICE: the methods defined in Interface, must be implemented by any class that implements the interface.</p> <pre><code>class Dog implements Animal {\n    @Override\n    public void makeSound() {\n        System.out.println(\"Woof\");\n    }\n\n    @Override\n    public void move() {\n        System.out.println(\"Run\");\n    }\n}\n\nclass Bird implements Animal {\n    @Override\n    public void makeSound() {\n        System.out.println(\"Chirp\");\n    }\n\n    @Override\n    public void move() {\n        System.out.println(\"Fly\");\n    }\n}\n</code></pre>"},{"location":"Programming_Java/07_Inheritance_4_Overriding/","title":"Class - Overriding","text":"<p>It is not enforced. BUT RECOMMENDED.</p> <p>If you don\u2019t include this tag, you are still overriding the method. So technically, you don't have to include it. However, including the tag acts as a safeguard for you as the programmer by alerting the compiler that you intend to override this method. Why would this be helpful you ask? Well, it's kind of like having a proofreader! The compiler will tell you if something goes wrong in the process. </p> <pre><code>class Animal {\n    void makeSound() {\n        System.out.println(\"Some sound\");\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    void makeSound() {\n        System.out.println(\"Woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myDog = new Dog();\n        myDog.makeSound(); // Output: Woof\n    }\n}\n\n</code></pre> <p>Using @override to allow compile-time checking.</p> <p>Eg. The @Override annotation tells the compiler that you intend to override a method from a superclass or an interface. If you make a mistake (e.g., a typo in the method name or wrong parameter types), the compiler will generate an error. This helps catch errors early in the development process.</p>"},{"location":"Programming_Java/07_Inheritance_5_Dynamic-Method-Selection/","title":"07_Inheritance_5_Dynamic-Method-Selection.md","text":"<pre><code>class Animal {\n    void makeSound() {\n        System.out.println(\"Some sound\");\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    void makeSound() {\n        System.out.println(\"Woof\");\n    }\n}\n\nclass Cat extends Animal {\n    @Override\n    void makeSound() {\n        System.out.println(\"Meow\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myAnimal;\n\n        myAnimal = new Dog();\n        myAnimal.makeSound();  // Output: Woof\n\n        myAnimal = new Cat();\n        myAnimal.makeSound();  // Output: Meow\n    }\n}\n</code></pre> <p>Explanation: 1. Reference Variable: In the Main class, myAnimal is a reference variable of type Animal. 1. Actual Object Type: At runtime, myAnimal can reference different types of objects (e.g., Dog, Cat). 1. Method Call: When myAnimal.makeSound() is called, the JVM determines which version of makeSound() to execute based on the actual object type (Dog or Cat), not the reference type (Animal).</p> <p>Benefits of Dynamic Method Selection: 1. Flexibility: Allows for flexible and extensible code where new classes can be introduced with new behaviors without changing existing code. 1. Code Reusability: Promotes code reuse through inheritance and method overriding. 1. Runtime Polymorphism: Enables runtime polymorphism, which is crucial for designing systems that are scalable and easy to maintain.</p>"},{"location":"Programming_Java/07_Inheritance_6_Dynamic-Type%26Static-Type/","title":"Class - Dynamic Type and Static Type","text":"<p>IMPORTANT: This does not work for overloaded methods!</p> <p>Static vs. Dynamic Type Reminder: Every variable in Java has a static type. This is the type specified when the variable is declared, and is checked at compile time. Every variable also has a dynamic type; this type is specified when the variable is instantiated, and is checked at runtime.</p> <pre><code>class Animal {\n    void makeSound() {\n        System.out.println(\"Some sound\");\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    void makeSound() {\n        System.out.println(\"Woof\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myAnimal = new Dog();  // \u9759\u6001\u7c7b\u578b\u662f Animal\uff0c\u52a8\u6001\u7c7b\u578b\u662f Dog\n        myAnimal.makeSound();         // \u8f93\u51fa: Woof\n    }\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff1a</p> <p>myAnimal \u7684\u9759\u6001\u7c7b\u578b\u662f Animal\uff0c\u56e0\u4e3a\u5b83\u662f\u4ee5 Animal \u7c7b\u578b\u58f0\u660e\u7684\u3002</p> <p>myAnimal \u7684\u52a8\u6001\u7c7b\u578b\u662f Dog\uff0c\u56e0\u4e3a\u5728\u8fd0\u884c\u65f6\uff0c\u5b83\u5f15\u7528\u7684\u662f\u4e00\u4e2a Dog \u5bf9\u8c61\u3002</p>"},{"location":"Programming_Java/07_Inheritance_7_Subtype-Polymorphism/","title":"07_Inheritance_7_Subtype-Polymorphism.md","text":"<p>\u672c\u6761\u76ee\u4e3b\u8981\u548c[Explicit-Higher-Order-Functions]\u8fdb\u884c\u5bf9\u6bd4\u3002</p> <p>\u5b50\u7c7b\u578b\u591a\u6001\uff08Subtype Polymorphism\uff09\u65b9\u6cd5\uff1a\u8ba1\u7b97\u9762\u79ef\u7684\u903b\u8f91\u5c01\u88c5\u5728\u6bcf\u4e2a\u5f62\u72b6\u7c7b\u4e2d\uff0c\u65b9\u6cd5\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u5bf9\u8c61\u7684\u5b9e\u9645\u7c7b\u578b\u3002\u8fd9\u79cd\u65b9\u6cd5\u5229\u7528\u4e86\u7ee7\u627f\u548c\u65b9\u6cd5\u91cd\u5199\uff0c\u7b26\u5408\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u539f\u5219\u3002</p> <pre><code>// \u7236\u7c7b Shape\nabstract class Shape {\n    abstract double area();\n}\n\n// \u5b50\u7c7b Circle\nclass Circle extends Shape {\n    private double radius;\n\n    Circle(double radius) {\n        this.radius = radius;\n    }\n\n    @Override\n    double area() {\n        return 3.14 * radius * radius;\n    }\n}\n\n// \u5b50\u7c7b Rectangle\nclass Rectangle extends Shape {\n    private double width, height;\n\n    Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    @Override\n    double area() {\n        return width * height;\n    }\n}\n\n// Main Class\npublic class Main {\n    public static void printArea(Shape shape) {\n        System.out.println(\"Area: \" + shape.area());\n    }\n\n    public static void main(String[] args) {\n        Shape circle = new Circle(5);\n        Shape rectangle = new Rectangle(4, 6);\n\n        printArea(circle);       // \u8f93\u51fa: Area: 78.5\n        printArea(rectangle);    // \u8f93\u51fa: Area: 24\n    }\n}\n</code></pre>"},{"location":"Programming_Java/07_Inheritance_8_Explicit-Higher-Order-Functions/","title":"Explicit Higher Order Functions","text":"<pre><code>// \u51fd\u6570\u5f0f\u63a5\u53e3\uff0c\u7528\u4e8e\u8ba1\u7b97\u9762\u79ef\ninterface AreaCalculator&lt;T&gt; {\n    double calculateArea(T shape);\n}\n\n// \u6253\u5370\u9762\u79ef\u7684\u65b9\u6cd5\npublic class Main {\n    public static &lt;T&gt; void printArea(T shape, AreaCalculator&lt;T&gt; calculator) {\n        System.out.println(\"Area: \" + calculator.calculateArea(shape));\n    }\n\n    public static void main(String[] args) {\n        Circle circle = new Circle(5);\n        Rectangle rectangle = new Rectangle(4, 6);\n\n        // \u5b9a\u4e49\u8ba1\u7b97 Circle \u9762\u79ef\u7684\u51fd\u6570\n        AreaCalculator&lt;Circle&gt; circleCalculator = new AreaCalculator&lt;Circle&gt;() {\n            @Override\n            public double calculateArea(Circle circle) {\n                return 3.14 * circle.radius * circle.radius;\n            }\n        };\n\n        // \u5b9a\u4e49\u8ba1\u7b97 Rectangle \u9762\u79ef\u7684\u51fd\u6570\n        AreaCalculator&lt;Rectangle&gt; rectangleCalculator = new AreaCalculator&lt;Rectangle&gt;() {\n            @Override\n            public double calculateArea(Rectangle rectangle) {\n                return rectangle.width * rectangle.height;\n            }\n        };\n\n        printArea(circle, circleCalculator);         // \u8f93\u51fa: Area: 78.5\n        printArea(rectangle, rectangleCalculator);   // \u8f93\u51fa: Area: 24\n    }\n}\n\n// Circle \u7c7b\u548c Rectangle \u7c7b\u5728\u8fd9\u91cc\u6ca1\u6709\u6539\u53d8\uff0c\u53ea\u662f\u79fb\u9664\u4e86 area \u65b9\u6cd5\nclass Circle {\n    double radius;\n\n    Circle(double radius) {\n        this.radius = radius;\n    }\n}\n\nclass Rectangle {\n    double width, height;\n\n    Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n}\n</code></pre> <p>\u5728\u663e\u5f0f\u9ad8\u9636\u51fd\u6570\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba1\u7b97\u9762\u79ef\u7684\u903b\u8f91\u4f5c\u4e3a\u51fd\u6570\u63a5\u53e3\u4f20\u9012\u3002\u8fd9\u79cd\u65b9\u6cd5\u66f4\u52a0\u7075\u6d3b\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4f20\u9012\u4e0d\u540c\u7684\u51fd\u6570\u6765\u5b9a\u5236\u884c\u4e3a\u3002</p>"},{"location":"Programming_Java/09_Container/","title":"09_Container.md","text":"<p>Container\u662fClass\u7684\u4e00\u79cd\u7c7b\u578b\uff0c\u4e13\u95e8\u8bbe\u8ba1\u7528\u6765\u5b58\u50a8\u548c\u7ba1\u7406\u5bf9\u8c61\u3002\u6240\u6709\u7684Container\u90fd\u662fClass\uff0c\u4f46\u5e76\u975e\u6240\u6709\u7684Class\u90fd\u662fContainer\u3002 Container\u662fClass\u7684\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\uff0c\u7528\u4e8e\u5b58\u50a8\u548c\u7ba1\u7406\u5bf9\u8c61\u3002\u5e38\u89c1\u7684Container\u5305\u62ecList\u3001Set\u3001Map\u7b49\u3002</p>"},{"location":"Programming_Java/09_Exceptions/","title":"09_Exceptions.md","text":"<p>public static int minIndex(int[] numbers) {     if (numbers.length == 0) {         throw new Exception(\"There are no elements in the array!\");     }     int m = numbers[0];     int idx = 0;</p> <pre><code>...\n\nreturn m;\n</code></pre> <p>}</p>"},{"location":"Programming_Java/09_Farbage%20Collection/","title":"09_Farbage Collection.md","text":"<ol> <li>charSequence</li> </ol>"},{"location":"Programming_Java/09_Farbage%20Collection/#garbage-collection","title":"Garbage Collection","text":"<pre><code>Person John; //\u5c1a\u672a\u521d\u59cb\u5316\u7684variable\uff0c\u6ca1\u6709\u6307\u5411\u4efb\u4f55object\uff0c\u6240\u4ee5\u4e0d\u6d89\u53ca\u5783\u573e\u56de\u6536\nnew John(\"John\"); //\u521b\u5efa\u4e86\u65b0\u7684object\uff0c\u4f46\u662f\u6ca1\u6709\u4efb\u4f55variable\u5f15\u7528\u8fd9\u4e2aobject\uff0c\u5373unreachable object(\u4e0d\u53ef\u8fbe\u5bf9\u8c61).\n</code></pre>"},{"location":"Programming_Java/09_Higher-Order-Function/","title":"09_Higher-Order-Function.md","text":"<p>Higher Order Function: A function that treats another function as data.</p> <pre><code>import java.util.function.Function;\n\npublic class HigherOrderFunction {\n    // \u5b9a\u4e49 tenX \u51fd\u6570\n    public static int tenX(int x) {\n        return 10 * x;\n    }\n\n    // \u5b9a\u4e49 do_twice \u51fd\u6570\n    public static int doTwice(Function&lt;Integer, Integer&gt; f, int x) {\n        return f.apply(f.apply(x));\n    }\n\n    public static void main(String[] args) {\n        // \u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u6765\u521b\u5efa tenX \u51fd\u6570\n        Function&lt;Integer, Integer&gt; tenX = (x) -&gt; 10 * x;\n\n        // \u8c03\u7528 doTwice \u51fd\u6570\u5e76\u8f93\u51fa\u7ed3\u679c\n        System.out.println(doTwice(tenX, 2));  // \u8f93\u51fa 200\n    }\n}\n</code></pre>"},{"location":"Programming_Java/09_Test%26Assertions/","title":"09_Test&Assertions.md","text":"<p>assertion \u65ad\u8a00 \u662f\u4e00\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u7528\u4e8e\u5728\u8fd0\u884c\u65f6\u9a8c\u8bc1\u7a0b\u5e8f\u7684\u5047\u8bbe\u3002\u65ad\u8a00\u901a\u5e38\u7528\u4e8e\u6d4b\u8bd5\u548c\u8c03\u8bd5\u9636\u6bb5\uff0c\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u5728\u7279\u5b9a\u6761\u4ef6\u4e0b\u7684\u884c\u4e3a\u7b26\u5408\u9884\u671f\u3002\u5982\u679c\u65ad\u8a00\u5931\u8d25\uff0c\u901a\u5e38\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u6216\u5f02\u5e38\uff0c\u4ece\u800c\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u5b9a\u4f4d\u548c\u4fee\u590d\u95ee\u9898\u3002</p> <p>\u5728\u6d4b\u8bd5\u4e2d\uff0c\u65ad\u8a00\u7528\u4e8e\u68c0\u67e5\u7a0b\u5e8f\u8f93\u51fa\u662f\u5426\u7b26\u5408\u9884\u671f\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u65ad\u8a00\u53ef\u4ee5\u7528\u4e8e\u9a8c\u8bc1\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3001\u68c0\u67e5\u5bf9\u8c61\u72b6\u6001\u6216\u6bd4\u8f83\u6570\u636e\u7ed3\u6784\u3002</p> <p>We often write tests using the Arrange-Act-Assert pattern:</p> <ol> <li>Arrange the test case, such as instantiating the data structure or filling it with elements.</li> <li>Act by performing the behavior you want to test.</li> <li>Assert the result of the action in (2).</li> </ol>"},{"location":"Programming_Java/09_ThrowExceptions/","title":"09_ThrowExceptions.md","text":"<pre><code>throw new ExceptionObject(parameter1, ...)\n</code></pre> <p>```java</p>"},{"location":"Programming_Java/21__Array__1_Intro/","title":"02_Array","text":"<p>In Java, arrays are fixed-size, so we cannot add or remove elements.</p> <p>Arrays can only store elements of the same type. (Homogeneous Elements)</p> <p>Array indices start from 0. </p> <p>Java does not support negative indexing or slicing.</p>"},{"location":"Programming_Java/21__Array__1_Intro/#create-an-array","title":"Create an array","text":"<p>Way1</p> <pre><code>int[] x = new int[6];\nx[0] = 1;\nx[2] = 2;\n//....\n</code></pre> <p>Way2</p> <pre><code>int[] x = new int[]{1,2,3,4,5,6};\n</code></pre> <p>Way3</p> <pre><code>int[] x = {1,2,3,4,5};\n</code></pre>"},{"location":"Programming_Java/21__Array__1_Intro/#default-value","title":"Default Value","text":"<p>integers: 0</p> <p>boolean: false</p> <p>objects: null</p>"},{"location":"Programming_Java/21__Array__1_Intro/#null","title":"null","text":""},{"location":"Programming_Java/21__Array__1_Intro/#length-property","title":"Length property","text":"<p>The length of an array is accessible via the <code>array.length</code> , it is an instance variable, instead of a method, so it doesn't need parentheses.</p> <p>We can create arrays of instantiated objects in Java:</p> <pre><code>public class Demo{\n    public static void main(String[] args){\n        Person[] persons = new Person[2];\n        Person[0] = new Person(\"John\");\n        Person[1] = new Person(\"Peter\");\n    }\n}\n</code></pre>"},{"location":"Programming_Java/21__Array__1_Intro/#array-variable-is-actually-reference-type","title":"Array variable is actually Reference Type","text":"<p>\u5728 Java \u4e2d\uff0c\u6570\u7ec4\u662f\u5bf9\u8c61\uff0c\u5b58\u50a8\u5728\u5806\u5185\u5b58\u4e2d\u3002\u6570\u7ec4\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u6307\u5411\u5806\u4e2d\u7684\u6570\u7ec4\u5bf9\u8c61\u3002\u56e0\u6b64\uff0c\u6570\u7ec4\u53d8\u91cf\u672c\u8d28\u4e0a\u662f\u5f15\u7528\u7c7b\u578b\u3002</p> <p>\u7531\u4e8e\u6570\u7ec4\u53d8\u91cf\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u6240\u4ee5\u5b83\u4eec\u53ef\u4ee5\u88ab\u8d4b\u503c\u4e3a null\u3002\u8fd9\u610f\u5473\u7740\u6570\u7ec4\u53d8\u91cf\u53ef\u4ee5\u6307\u5411\u4e00\u4e2a\u672a\u521d\u59cb\u5316\u7684\u72b6\u6001\uff0c\u8868\u793a\u5b83\u4e0d\u5f15\u7528\u4efb\u4f55\u5b9e\u9645\u7684\u6570\u7ec4\u5bf9\u8c61\u3002</p> <pre><code>public class ArrayExample {\n    public static void main(String[] args) {\n        // \u58f0\u660e\u4e00\u4e2aint\u6570\u7ec4\u53d8\u91cf\uff0c\u521d\u59cb\u503c\u4e3anull\n        int[] x = null;\n\n        // \u5c1d\u8bd5\u8bbf\u95eenull\u5f15\u7528\u4f1a\u5bfc\u81f4NullPointerException\n        // System.out.println(x[0]); // \u8fd9\u884c\u4ee3\u7801\u4f1a\u629b\u51faNullPointerException\n\n        // \u521d\u59cb\u5316\u6570\u7ec4\n        x = new int[]{0, 1, 2, 95, 4};\n\n        // \u6253\u5370\u6570\u7ec4\u5185\u5bb9\n        for (int i = 0; i &lt; x.length; i++) {\n            System.out.println(\"x[\" + i + \"] = \" + x[i]);\n        }\n\n        // \u5c06\u6570\u7ec4\u53d8\u91cf\u8d4b\u503c\u4e3anull\uff0c\u4e22\u5f03\u5bf9\u6570\u7ec4\u5bf9\u8c61\u7684\u5f15\u7528\n        x = null;\n\n        // \u518d\u6b21\u5c1d\u8bd5\u8bbf\u95eenull\u5f15\u7528\u4f1a\u5bfc\u81f4NullPointerException\n        // System.out.println(x[0]); // \u8fd9\u884c\u4ee3\u7801\u4f1a\u518d\u6b21\u629b\u51faNullPointerException\n    }\n}\n</code></pre>"},{"location":"Programming_Java/21__Array__1_Intro/#common-exceptions","title":"Common Exceptions","text":"<p>Attempting to access arr[x] that x is out of range would throw an ArrayIndexOutOfBoundsException.</p>"},{"location":"Programming_Java/21__Array__2_Geometric-Resizing/","title":"21__Array__2_Geometric-Resizing.md","text":"<p>Geometric Resizing</p> <p>We can fix our performance problems by growing the size of our array by a multiplicative amount, rather than an additive amount. That is, rather than adding a number of memory boxes equal to some resizing factor RFACTOR:</p>"},{"location":"Programming_Java/21__Array__2_Geometric-Resizing/#geometric-resizing","title":"\u51e0\u4f55\u8c03\u6574\u5927\u5c0f\uff08Geometric Resizing\uff09\uff1a","text":"<p>\u4e58\u6cd5\u589e\u52a0\uff08Multiplicative Growth\uff09\uff1a\u51e0\u4f55\u8c03\u6574\u5927\u5c0f\u610f\u5473\u7740\u6bcf\u6b21\u589e\u52a0\u6570\u7ec4\u7684\u5bb9\u91cf\u65f6\uff0c\u6309\u4e00\u4e2a\u56fa\u5b9a\u7684\u500d\u6570\uff08\u800c\u4e0d\u662f\u56fa\u5b9a\u7684\u6570\u91cf\uff09\u6765\u589e\u52a0\u3002\u8fd9\u901a\u5e38\u4f1a\u663e\u8457\u63d0\u9ad8\u6027\u80fd\uff0c\u5c24\u5176\u662f\u5728\u9891\u7e41\u9700\u8981\u6269\u5c55\u6570\u7ec4\u7684\u60c5\u51b5\u4e0b\u3002</p> <p>\u5bf9\u6bd4\u56fa\u5b9a\u589e\u52a0\uff08Additive Growth\uff09\uff1a\u5982\u679c\u6bcf\u6b21\u6269\u5c55\u6570\u7ec4\u65f6\u53ea\u662f\u589e\u52a0\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u91cf\uff08\u4f8b\u5982\u6bcf\u6b21\u589e\u52a0 10 \u4e2a\u5143\u7d20\uff09\uff0c\u90a3\u4e48\u5f53\u6570\u7ec4\u53d8\u5f97\u5f88\u5927\u65f6\uff0c\u6269\u5c55\u64cd\u4f5c\u4f1a\u53d8\u5f97\u9891\u7e41\u4e14\u8017\u65f6\u3002\u800c\u4e58\u6cd5\u589e\u52a0\u5219\u80fd\u51cf\u5c11\u6269\u5c55\u64cd\u4f5c\u7684\u6b21\u6570\u3002</p> <p>\u793a\u4f8b</p> <p>\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u6570\u7ec4\uff0c\u5f53\u5b83\u5df2\u6ee1\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u589e\u52a0\u5b83\u7684\u5bb9\u91cf\u3002</p>"},{"location":"Programming_Java/21__Array__2_Geometric-Resizing/#additive-growth","title":"\u56fa\u5b9a\u589e\u52a0\uff08Additive Growth\uff09\uff1a","text":"<p>\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u589e\u52a0 10 \u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5f53\u6570\u7ec4\u5927\u5c0f\u8fbe\u5230 1000 \u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u8fdb\u884c\u4e86 100 \u6b21\u6269\u5c55\u64cd\u4f5c\u3002 \u4e58\u6cd5\u589e\u52a0\uff08Multiplicative Growth\uff09\uff1a</p> <p>\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u5c06\u6570\u7ec4\u5bb9\u91cf\u7ffb\u500d\uff08RFACTOR = 2\uff09\uff0c\u90a3\u4e48\u5f53\u6570\u7ec4\u5927\u5c0f\u8fbe\u5230 1024 \u65f6\uff0c\u53ea\u9700\u8981\u8fdb\u884c\u4e86 10 \u6b21\u6269\u5c55\u64cd\u4f5c\uff08\u4ece\u521d\u59cb\u7684 1 \u5230 2\uff0c4\uff0c8\uff0c16\uff0c32\uff0c64\uff0c128\uff0c256\uff0c512\uff0c1024\uff09\u3002</p> <p>\u4ee3\u7801\u793a\u4f8b</p> <p>\u4ee5\u4e0b\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u5b9e\u73b0\u51e0\u4f55\u8c03\u6574\u5927\u5c0f\uff08\u6309\u500d\u6570\u589e\u957f\uff09\u7684\u6570\u7ec4\uff1a</p> <pre><code>public class GeometricResizableArray {\n    private int[] items;\n    private int size;\n    private static final int INITIAL_CAPACITY = 10;\n    private static final int RFACTOR = 2; // \u500d\u6570\u589e\u957f\u56e0\u5b50\n\n    public GeometricResizableArray() {\n        items = new int[INITIAL_CAPACITY];\n        size = 0;\n    }\n\n    public void addLast(int x) {\n        if (size == items.length) {\n            resize(items.length * RFACTOR);\n        }\n        items[size] = x;\n        size++;\n    }\n\n    private void resize(int newCapacity) {\n        int[] newArray = new int[newCapacity];\n        System.arraycopy(items, 0, newArray, 0, size);\n        items = newArray;\n    }\n\n    public int getSize() {\n        return size;\n    }\n\n    public int get(int index) {\n        if (index &lt; 0 || index &gt;= size) {\n            throw new IndexOutOfBoundsException(\"Index out of bounds\");\n        }\n        return items[index];\n    }\n\n    public static void main(String[] args) {\n        GeometricResizableArray array = new GeometricResizableArray();\n        for (int i = 0; i &lt; 100; i++) {\n            array.addLast(i);\n        }\n        for (int i = 0; i &lt; array.getSize(); i++) {\n            System.out.println(array.get(i));\n        }\n    }\n}\n</code></pre>"},{"location":"Programming_Java/21__Array__3_Usage-Ratio/","title":"21__Array__3_Usage-Ratio.md","text":"<p>prerequisite: \u6570\u7ec4\u5143\u7d20\u6328\u4e2a\u6392\u5e8f\uff0c\u5426\u5219\u65e0\u6cd5\u8ba9array\u76f4\u63a5\u51cf\u534a</p> <p>Our AList is almost done, but we have one major issue. Suppose we insert 1,000,000,000 items, then later remove 990,000,000 items. In this case, we'll be using only 10,000,000 of our memory boxes, leaving 99% completely unused.</p> <p>To fix this issue, we can also downsize our array when it starts looking empty. Specifically, we define a \"usage ratio\" R which is equal to the size of the list divided by the length of the items array. For example, in the figure below, the usage ratio is 0.04.</p> <p>In a typical implementation, we halve the size of the array when R falls to less than 0.25.</p>"},{"location":"Programming_Java/21__Array__4_GenericArray/","title":"21__Array__4_GenericArray.md","text":"<p>\u5728Java\u4e2d\uff0c\u76f4\u63a5\u521b\u5efa\u6cdb\u578b\u6570\u7ec4\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u56e0\u4e3aJava\u7684\u6cdb\u578b\u662f\u901a\u8fc7\u7c7b\u578b\u64e6\u9664\u6765\u5b9e\u73b0\u7684\uff0c\u5728\u8fd0\u884c\u65f6\u5e76\u4e0d\u77e5\u9053\u6cdb\u578b\u7684\u7c7b\u578b\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u4e0d\u80fd\u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u7c7b\u578b\u53c2\u6570\u7684\u6570\u7ec4\u3002\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u53d8\u901a\u7684\u65b9\u6cd5\u6765\u521b\u5efa\u6cdb\u578b\u6570\u7ec4\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5\uff1a</p>"},{"location":"Programming_Java/21__Array__4_GenericArray/#enforced-casting-to-generic","title":"Enforced Casting to Generic","text":"<pre><code>T[] arr = (T[]) new Object[100];\n</code></pre>"},{"location":"Programming_Java/21__Array__4_GenericArray/#reflect-javalangreflectarray","title":"Reflect (java.lang.reflect.Array)","text":"<p>\u5f85\u8865\u5145</p>"},{"location":"Programming_Java/22__List__1__List_%28Interface%29/","title":"List","text":"<p>Java provides a built-in List interface and several implementations, e.g. ArrayList. Remember, since List is an interface we can't instantiate it! We must instantiate one of its implementations.</p> <p>To access this, we can use the full name ('canonical name') of classes/interfaces:</p> <pre><code>java.util.List&lt;Integer&gt; L = new java.util.ArrayList&lt;&gt;();\n</code></pre> <p>OR importing libraries:</p> <pre><code>import java.util.List;\nimport java.util.ArrayList;\n\npublic class Example {\n    public static void main(String[] args) {\n        List&lt;Integer&gt; L = new ArrayList&lt;&gt;();\n        L.add(5);\n        L.add(10);\n        System.out.println(L);\n    }\n}\n</code></pre>"},{"location":"Programming_Java/22__List__2__ArrayList/","title":"22__List__2__ArrayList.md","text":"<p>import java.util.ArrayList;</p> <p>List lst = new ArrayList&lt;&gt;(); lst.add(\"zero\"); lst.add(\"one\"); lst.set(0, \"zed\"); System.out.println(lst.get(0)); System.out.println(lst.size()); if (lst.contains(\"one\")) {     System.out.println(\"one in lst\"); } for (String elem : lst) {     System.out.println(elem); }"},{"location":"Programming_Java/22__List__3__LinkedList/","title":"LinkedList","text":""},{"location":"Programming_Java/22__List__3__LinkedList/#javalinkedlist","title":"java\u5185\u7f6eLinkedList","text":"<pre><code>import java.util.LinkedList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // \u521b\u5efa\u4e00\u4e2a LinkedList \u5b9e\u4f8b\n        LinkedList&lt;Integer&gt; list = new LinkedList&lt;&gt;();\n\n        // \u6dfb\u52a0\u5143\u7d20\u5230\u94fe\u8868\n        list.add(5);\n        list.add(10);\n        list.add(15);\n\n        // \u6253\u5370\u94fe\u8868\u4e2d\u7684\u5143\u7d20\n        System.out.println(\"LinkedList: \" + list);\n\n        // \u83b7\u53d6\u94fe\u8868\u7684\u957f\u5ea6\n        System.out.println(\"Length: \" + list.size());\n\n        // \u68c0\u67e5\u662f\u5426\u5305\u542b\u67d0\u4e2a\u5143\u7d20\n        System.out.println(\"Contains 10: \" + list.contains(10));\n        System.out.println(\"Contains 20: \" + list.contains(20));\n\n        // \u79fb\u9664\u94fe\u8868\u4e2d\u7684\u5143\u7d20\n        list.remove(Integer.valueOf(10));\n        System.out.println(\"LinkedList after removing 10: \" + list);\n\n        // \u904d\u5386\u94fe\u8868\u4e2d\u7684\u5143\u7d20\n        System.out.print(\"LinkedList elements: \");\n        for (int element : list) {\n            System.out.print(element + \" \");\n        }\n    }\n}\n</code></pre> <p>\u4f7f\u7528\u5185\u7f6e\u7684linkedlist\u7684\u597d\u5904\uff1a \u7b80\u6d01\u65b9\u4fbf\uff1a\u63d0\u4f9b\u4e86\u8bb8\u591a\u5185\u7f6e\u7684\u65b9\u6cd5\u7528\u4e8e\u5e38\u89c1\u7684\u64cd\u4f5c\uff0c\u5982\u6dfb\u52a0\u3001\u5220\u9664\u3001\u8bbf\u95ee\u5143\u7d20\u7b49\u3002 \u53cc\u5411\u94fe\u8868\uff1aLinkedList \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u5b9e\u73b0\u4e86 Deque \u63a5\u53e3\uff0c\u652f\u6301\u5728\u4e24\u7aef\u6dfb\u52a0\u548c\u5220\u9664\u5143\u7d20\u3002 \u6027\u80fd\uff1a\u9002\u7528\u4e8e\u9891\u7e41\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u5728\u94fe\u8868\u4e2d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002</p>"},{"location":"Programming_Java/22__List__4__LinkedList_%28DIY%29/","title":"22__List__4__LinkedList_(DIY).md","text":""},{"location":"Programming_Java/22__List__4__LinkedList_%28DIY%29/#intlist","title":"\u81ea\u5b9a\u4e49\u7684IntList","text":"<pre><code>public class IntList {\n    public int value;\n    public IntList next;\n\n    public IntList(int value, IntList next) {\n        this.value = value;\n        this.next = next;\n    }\n\n    public int size(){\n        IntList x = this;\n        int i = 1; //or int i = 0, then use x != null as the while condition\n        while(x.next != null){\n            i++;\n            x = x.next;\n        }\n        return i;\n    }\n\n    public void printList(){\n        IntList x = this; //\u5728 Java \u4e2d\uff0cthis \u4e0d\u80fd\u88ab\u91cd\u65b0\u8d4b\u503c\uff0c\u56e0\u6b64\u4f7f\u7528\u5c40\u90e8\u53d8\u91cf\u6765\u904d\u5386\u94fe\u8868\u662f\u5fc5\u8981\u7684\u3002\n        while(x != null){\n            System.out.print(x.value+\" \");\n            x = x.next;\n        }\n        System.out.println();\n    }\n\n    public int sizeR(){\n        if(this.next == null){\n            return 1;\n        }\n        else{\n            return 1 + this.next.sizeR(); //\u8fd9\u91cc\u7684this.next\u5b9e\u8d28\u4e0a\u5df2\u7ecf\u662f\u4e00\u4e2ainstantiate\u4e86\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2aobject\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5call .sizeR()\n        }\n    }\n\n    public int get(int i){\n        //Be sure the object you call is the first node\uff0c\u56e0\u4e3a\u73b0\u5728\u521b\u5efa\u7684\u65b9\u5f0f\u6bd4\u8f83\u539f\u59cb\n        //index i starting from 0\n        IntList l = this;\n        for(int j = 0 ; j &lt; this.size() ; j++){\n            if(i == j){\n                return l.value;\n            }\n            l = l.next;\n        }\n        return l.value;\n    }\n}\n</code></pre> <pre><code>public class Main {\n    public static void main(String[] args){\n        System.out.println(\"Linked List Practice and Exercise\");\n\n        System.out.println(\"========IntList==========\");\n\n        System.out.println(\"\u6b63\u987a\u5e8f\u8fde\u63a5\");\n        IntList num = new IntList(1,null);\n        num.next = new IntList(2, null);\n        num.next.next = new IntList(3,null);\n        num.next.next.next = new IntList(4, null);\n        //print\n        IntList pointer = num;\n        while(pointer!=null){    //\u8fd9\u91cc\u7740\u91cd\u6ce8\u610f\uff01\u4e00\u5f00\u59cb\u5199\u7684pointer.next != null\uff0c\u8fd9\u6837\u6700\u540e\u4e00\u4e2anode\u4e0d\u4f1a\u88abaccess\u5230\n            System.out.print(pointer.value + \" \");\n            pointer = pointer.next;\n        } System.out.println();\n        System.out.println(\"size: \" + num.size());\n\n        System.out.println(\"\u9006\u5e8f\u8fde\u63a5(Fool Example)\");\n        IntList num_4 = new IntList(4, null);\n        IntList num_3 = new IntList(3, num_4);\n        IntList num_2 = new IntList(2, num_3);\n        IntList num_1 = new IntList(1, num_2);\n        //pring\n        pointer = num_1;\n        while(pointer != null){\n            System.out.print(pointer.value + \" \");\n            pointer = pointer.next;\n        } System.out.println();\n        System.out.println(\"size: \" + num_1.size());  System.out.println();\n\n        System.out.println(\"\u9006\u5e8f\u8fde\u63a5(Smart Example)\");\n        IntList L = new IntList(4,null);\n        L = new IntList(3, L);\n        L = new IntList(2, L);\n        L = new IntList(1, L);\n        L.printList();\n        System.out.println(\"size: \" + L.size());\n        System.out.println(\"sizeR: \" + L.sizeR());\n\n        System.out.println(\"get second node value: \" + L.get(1));\n        System.out.println(\"get fourth node value: \" + L.get(3));\n\n        System.out.println();\n\n\n\n\n    }\n}\n</code></pre>"},{"location":"Programming_Java/22__List__4__LinkedList_%28DIY%29/#sllist","title":"\u81ea\u5b9a\u4e49\u7684SLList","text":"<p>IntList\u7684\u95ee\u9898\uff1a\u5728IntList\u7684\u5b9e\u73b0\u4e2d\uff0c\u94fe\u8868\u662f\u4e00\u4e2a\u88f8\u9732\u7684\u9012\u5f52\u6570\u636e\u7ed3\u6784\uff08naked recursive data structure\uff09\u3002IntNode \u7c7b\u76f4\u63a5\u8868\u793a\u94fe\u8868\u8282\u70b9\uff0c\u5e76\u4e14 next \u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\u7528\u6237\u9700\u8981\u76f4\u63a5\u64cd\u4f5c\u8fd9\u4e9b\u8282\u70b9\u548c\u9012\u5f52\u7ed3\u6784\u3002\u4f8b\u5982\uff0c\u8981\u6253\u5370\u94fe\u8868\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff0c\u9700\u8981\u7f16\u5199\u9012\u5f52\u6216\u8fed\u4ee3\u4ee3\u7801\uff1a</p> <p>\u4e3a\u4e86\u7b80\u5316\u7528\u6237\u5bf9\u9012\u5f52\u6570\u636e\u7ed3\u6784\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u5728\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7684\u57fa\u7840\u4e0a\u63d0\u4f9b\u66f4\u9ad8\u7ea7\u7684\u5c01\u88c5\u548c\u62bd\u8c61\u3002\u4f8b\u5982\uff0c\u4f7f\u7528\u4e00\u4e2a\u5c01\u88c5\u7c7b SLList \u6765\u9690\u85cf\u9012\u5f52\u5b9e\u73b0\u7ec6\u8282\uff0c\u5e76\u63d0\u4f9b\u66f4\u6613\u7528\u7684\u65b9\u6cd5\u3002</p> <p>Improvement1: Use more reliable name</p> <pre><code>public class Node {\n    public int item;\n    public Node next;\n\n    public Node(int i, Node n){\n        item = i;\n        next = n;\n    }\n}\n</code></pre> <p>Improvement2: Avoid Bureaucracy and Use Private</p> <p>Knowing that IntNodes are hard to work with, we're going to create a separate class called SLList that the user will interact with. The basic class is simply:</p> <pre><code>public class Node {\n    private int item;\n    private Node next;\n\n    public Node(int i, Node n){\n        item = i;\n        next = n;\n    }\n\n    public int getItem(){\n        return item;\n    }\n}\n</code></pre> <pre><code>public class SLList {\n    public Node first_node;\n\n    public SLList(int a){\n        first_node = new Node(a, null);\n    }\n\n    public void addFirst(int a){\n        first_node = new Node(a, first_node); //\u8fd9\u91cc\u60f3\u4e86\u4e00\u4e0b\uff0c\u6ce8\u610f\u4e00\u4e0b\n    }\n\n    public int getFirstItem(){\n        return first_node.getItem();\n    }\n\n}\n</code></pre> <p>When you create a public member (i.e. method or variable), be careful, because you're effectively committing to supporting that member's behavior exactly as it is now, forever.</p> <p>Improvement3: Nested Class</p> <p>At the moment, we have two .java files: IntNode and SLList. However, the IntNode is really just a supporting character in the story of SLList.</p> <p>Java provides us with the ability to embed a class declaration inside of another for just this situation. The syntax is straightforward and intuitive:</p> <pre><code>public class SLList {\n       public class Node {\n            public int item;\n            public Node next;\n            public Node(int i, Node n) {\n                item = i;\n                next = n;\n            }\n       }\n\n       private Node first; \n\n       public SLList(int x) {\n           first = new Node(x, null);\n       } \n...\n}\n</code></pre>"},{"location":"Programming_Java/22__List__4__LinkedList_%28DIY%29/#sllist_1","title":"\u81ea\u5b9a\u4e49\u7684SLList\uff08\u5347\u7ea7\u7248\uff09","text":"<pre><code>public class SLList {\n    private Node first_node;\n    public SLList(int i){\n        first_node = new Node(i, null);\n    }\n    public void add_first_node(int i){\n        first_node = new Node(i, first_node);\n    }\n    public Node get_first_node(){\n        return first_node;\n    }\n\n    public void add_last_node(int i){\n        //firstly find the last node now\n        Node x = this.get_first_node();\n        while(x.getNext()!=null){\n            x = x.next;\n        }\n        x.next = new Node(i, null);\n    }\n\n    public int size(){\n        Node x = this.get_first_node();\n        int count = 1;\n        while(x.getNext()!=null){\n            x = x.next;\n            count++;\n        }\n        return count;\n    }\n\n    public int sizeR(Node n){ //sizeR\u53ef\u4ee5\u770b\u505a\u662fsizeRR\u7684helper method\n    //sizeR\u7684\u4f5c\u7528\u662f\u5c01\u88c5\u548c\u7b80\u5316\u9012\u5f52\u8ba1\u7b97\u903b\u8f91\uff0c\u4ece\u800c\u4f7fsizeRR() \u66f4\u52a0\u7b80\u6d01\u6613\u61c2\u3002\n        if(n.next==null){\n            return 1;\n        }\n        else{\n            return 1 + sizeR(n.next);\n        }\n    }\n\n    public int sizeRR(){ //Due to Overloaded, here sizeRR can name as sizeR.\n        return sizeR(first_node);\n    }\n\n    public static class Node{ //Node\u66f4\u50cf\u662f\u4e00\u4e2ahelper class\uff0c\u56e0\u6b64\u7528static\u5d4c\u5957\u5728SLList\u5185\n        private int item;\n        private Node next;\n        public Node(int i, Node n){\n            item = i;\n            next = n;\n        }\n        public int getItem(){\n            return item;\n        }\n        public Node getNext(){\n            return next;\n        }\n    }\n}\n</code></pre> <p>test:</p> <pre><code>public class Main {\n    public static void main(String[] args){\n        SLList list = new SLList(4);\n        list.add_first_node(3);\n        list.add_first_node(2);\n        list.add_first_node(1);\n        list.add_last_node(5);\n        list.add_last_node(6);\n        System.out.println(list.size());\n        System.out.println(list.get_first_node().getItem());\n        System.out.println(list.sizeRR());\n\n    }\n}\n</code></pre>"},{"location":"Programming_Java/22__List__4__LinkedList_%28DIY%29/#sllist_2","title":"\u81ea\u5b9a\u4e49\u7684SLList\uff08\u7ec8\u6781\u7248\uff09","text":"<p>Improve4: Caching</p> <p>We can simply add a size variable to the SLList class that tracks the current size, yielding the code below. This practice of saving important data to speed up retrieval is sometimes known as caching. </p> <p>For example:</p> <pre><code>public class SLList {\n    ... /* IntNode declaration omitted. */\n    private IntNode first;\n    private int size;\n\n    public SLList(int x) {\n        first = new IntNode(x, null);\n        size = 1;\n    }\n\n    public void addFirst(int x) {\n        first = new IntNode(x, first);\n        size += 1;\n    }\n\n    public int size() {\n        return size;\n    }\n    ...\n}\n</code></pre> <p>This modification makes our size method incredibly fast, no matter how large the list. Of course, it will also slow down our addFirst and addLast methods, and also increase the memory of usage of our class, but only by a trivial amount. In this case, the tradeoff is clearly in favor of creating a cache for size.</p> <p>Improve5: Add the empty list \uff08\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u7684linkedlist, but, this causes our addLast method to crash if we insert into an empty list. Since first is null, the attempt to access p.next in while (p.next != null) below causes a null pointer exception.\uff09</p> <pre><code>...\npublic SLList() {\n    first = null;\n    size = 0;\n}\n...\n...the addlast part...\n    if (first == null) {\n        first = new IntNode(x, null);\n        return;\n    }\n</code></pre> <p>Improve6: Sentinel Nodes</p> <p>This solution works, but special case code like that shown above should be avoided when necessary. Human beings only have so much working memory, and thus we want to keep complexity under control wherever possible. For a simple data structure like the SLList, the number of special cases is small. More complicated data structures like trees can get much, much uglier.</p> <p>A cleaner, though less obvious solution, is to make it so that all SLLists are the \"same\", even if they are empty. We can do this by creating a special node that is always there, which we will call a <code>sentinel node</code>. The sentinel node will hold a value, which we won't care about.</p> <p>Invariants An invariant is a fact about a data structure that is guaranteed to be true (assuming there are no bugs in your code).</p> <p>A SLList with a sentinel node has at least the following invariants:</p> <p>The sentinel reference always points to a sentinel node.</p> <p>The front item (if it exists), is always at sentinel.next.item.</p> <p>The size variable is always the total number of items that have been added.</p> <p>So after above updating, the final SLList would be like:</p> <pre><code>public class SLList {\n    private Node sentinel;\n    private Node first_node;\n    private int size;\n\n    public SLList(){\n        sentinel = new Node(42, null);\n        first_node = null;\n        size = 0;\n    }\n\n    public SLList(int i){\n        first_node = new Node(i, null);\n        sentinel = new Node(42, first_node);\n        size = 1;\n    }\n\n    public Node getFirst_node(){\n        return first_node;\n    }\n\n    public int getNode(int index){\n\n        if(index+1&gt;size){\n            System.out.println(\"Error: out of bounds.\");\n            return -1;\n        }\n        Node x = sentinel;\n        if(x.getNext()==null){\n            System.out.println(\"Error: no items in the linked list.\");\n            return -1;\n        }\n\n        int now_index = -1;\n\n        while(x.getNext()!=null){\n            if(now_index==index){\n                return x.getItem();\n            }\n            x = x.getNext();\n            now_index++;\n        }\n        return now_index;\n    }\n\n    public void add_first_node(int i){\n        SLList x = this;\n        first_node = new Node(i, first_node);\n        sentinel = new Node(42, first_node);\n        size++;\n    }\n\n    public void add(int i){\n        Node x = sentinel;\n        if(sentinel.getNext()==null){\n            add_first_node(i);\n        }\n        else{\n            while(x.getNext()!=null){\n                x = x.getNext();\n            }\n            x.Special_Change_Next(i);\n            size++;\n        }\n    }\n\n    public int size(){\n        return size;\n    }\n\n    public static class Node{\n        private int item;\n        private Node next;\n        public Node(int i, Node n){\n            item = i;\n            next = n;\n        }\n        public int getItem(){\n            return item;\n        }\n        public Node getNext(){\n            return next;\n        }\n        public void Special_Change_Next(int i){\n            next = new Node(i, null);\n        }\n    }\n}\n</code></pre>"},{"location":"Programming_Java/22__List__4__LinkedList_%28DIY%29/#dllist","title":"\u81ea\u5b9a\u4e49\u7684DLList","text":"<p>Improve7: Looking back: .last and .prev allow fast removeLast.</p> <pre><code>public class DDList{\n    private Node t0;\n    private Node firstNode;\n    private Node lastNode;\n    private Node tN;\n    private int size;\n\n    //constructor, no arguments (create empty list)\n    public DDList(){\n        t0 = new Node(null,42,null);\n        tN = new Node(null, 98, null);\n        t0.next = tN;\n        tN.prev = t0;\n        firstNode = null;\n        lastNode = null;\n        size = 0;\n    }\n\n    //constructor, with arguments (create list with first node)\n    public DDList(int i){\n        t0 = new Node(null,42,null);\n        tN = new Node(null, 98, null);\n        Node x = new Node(t0, i, tN);\n        t0.next = x;\n        tN.prev = x;\n        firstNode = x;\n        lastNode = x;\n        size = 1;\n    }\n\n    //getFirst()\n    public Node getFirst(){\n        return firstNode;\n    }\n\n    //getLast()\n    public Node getLast(){\n        return lastNode;\n    }\n\n    //get(index)\n    public int get(int index){\n        if(size==0){\n            System.out.println(\"Exception: no item in the list.\");\n            return -1;\n        }\n        else if(index &gt; size-1){\n            System.out.println(\"Exception: index out of range.\");\n            return -1;\n        }\n        else {\n            Node x = this.getFirst(); //now x is index 0, if return x, get List(0)\n            int index_now = 0;\n            while(index_now &lt; index){\n                x = x.next;\n                index_now++;\n            }\n            return x.item;\n        }\n    }\n\n    //getSize\n    public int getSize(){\n        return size;\n    }\n\n    //addFirst\n    public void addFirst(int i){\n        if(size==0){\n            Node x = new Node(t0, i, tN);\n            t0.next = x;\n            tN.prev = x;\n            firstNode = x;\n            lastNode = x;\n            size++;\n        }\n        else{\n            Node x = new Node(null, i, null);\n            x.next = firstNode;\n            x.prev = t0;\n            t0.next = x;\n            firstNode.prev = x;\n            firstNode = x;\n            size++;\n        }\n\n    }\n\n    //addLast\n    public void addLast(int i){\n        if(size==0){\n            Node x = new Node(t0, i, tN);\n            t0.next = x;\n            tN.prev = x;\n            firstNode = x;\n            lastNode = x;\n            size++;\n        }\n        else{\n            Node y = new Node(null,i,null);\n            y.next = tN;\n            y.prev = lastNode;\n            lastNode.next = y;\n            tN.prev = y;\n            lastNode = y;\n            size++;\n        }\n    }\n\n    public static class Node{\n        public int item;\n        public Node next;\n        public Node prev;\n        public Node(Node p, int i, Node n){\n            item = i;\n            next = n;\n            prev = p;\n        }\n    }\n}\n</code></pre>"},{"location":"Programming_Java/22__List__4__LinkedList_%28DIY%29/#dllistsentinel-circular-doubly-linked-list","title":"\u81ea\u5b9a\u4e49\u7684DLList\uff08Sentinel\u5faa\u73af\u7248\uff0c \u4e5f\u53eb\u505aCircular Doubly Linked List\uff09","text":"<p>Improve8: Sentinel upgrade: Avoiding special cases with sentBack or circular list.</p> <p>\u6ce8\u610f\uff1a\u5faa\u73af\u7248\u53ea\u662f\u770b\u8d77\u6765\u7b80\u6d01\uff0c\u5728\u5b9e\u73b0\u4e0a\u4e0d\u4e00\u5b9a\u6bd4\u975e\u5faa\u73af\u7248\u66f4\u597d\uff01</p>"},{"location":"Programming_Java/22__List__4__LinkedList_%28DIY%29/#dllistgeneric","title":"DLList\uff08Generic\u7248\uff09","text":"<p>\u5173\u4e8eGeneric\uff0c\u8be6\u89c1\uff1a[Generic]</p> <pre><code>public class DDList&lt;T&gt;{\n    private Node&lt;T&gt; t0;\n    private Node&lt;T&gt; firstNode;\n    private Node&lt;T&gt; lastNode;\n    private Node&lt;T&gt; tN;\n    private int size;\n\n    //constructor, no arguments (create empty list)\n    public DDList(){\n        t0 = new Node&lt;T&gt;(null,null,null);\n        tN = new Node&lt;T&gt;(null, null, null);\n        t0.next = tN;\n        tN.prev = t0;\n        firstNode = null;\n        lastNode = null;\n        size = 0;\n    }\n\n    //constructor, with arguments (create list with first node)\n    public DDList(T i){\n        t0 = new Node&lt;T&gt;(null,null,null);\n        tN = new Node&lt;T&gt;(null, null, null);\n        Node&lt;T&gt; x = new Node&lt;T&gt;(t0, i, tN);\n        t0.next = x;\n        tN.prev = x;\n        firstNode = x;\n        lastNode = x;\n        size = 1;\n    }\n\n    //getFirst()\n    public Node&lt;T&gt; getFirst(){\n        return firstNode;\n    }\n\n    //getLast()\n    public Node&lt;T&gt; getLast(){\n        return lastNode;\n    }\n\n    //get(index)\n    public T get(int index){\n        if(size==0){\n            System.out.println(\"Exception: no item in the list.\");\n            return null;\n        }\n        else if(index &gt; size-1){\n            System.out.println(\"Exception: index out of range.\");\n            return null;\n        }\n        else {\n            Node&lt;T&gt; x = this.getFirst(); //now x is index 0, if return x, get List(0)\n            int index_now = 0;\n            while(index_now &lt; index){\n                x = x.next;\n                index_now++;\n            }\n            return x.item;\n        }\n    }\n\n    //getSize\n    public int getSize(){\n        return size;\n    }\n\n    //addFirst\n    public void addFirst(T i){\n        if(size==0){\n            Node&lt;T&gt; x = new Node&lt;T&gt;(t0, i, tN);\n            t0.next = x;\n            tN.prev = x;\n            firstNode = x;\n            lastNode = x;\n            size++;\n        }\n        else{\n            Node&lt;T&gt; x = new Node&lt;T&gt;(null, i, null);\n            x.next = firstNode;\n            x.prev = t0;\n            t0.next = x;\n            firstNode.prev = x;\n            firstNode = x;\n            size++;\n        }\n\n    }\n\n    //addLast\n    public void addLast(T i){\n        if(size==0){\n            Node&lt;T&gt; x = new Node&lt;T&gt;(t0, i, tN);\n            t0.next = x;\n            tN.prev = x;\n            firstNode = x;\n            lastNode = x;\n            size++;\n        }\n        else{\n            Node&lt;T&gt; y = new Node&lt;T&gt;(null,i,null);\n            y.next = tN;\n            y.prev = lastNode;\n            lastNode.next = y;\n            tN.prev = y;\n            lastNode = y;\n            size++;\n        }\n    }\n\n    public static class Node&lt;T&gt;{\n        public T item;\n        public Node&lt;T&gt; next;\n        public Node&lt;T&gt; prev;\n        public Node(Node&lt;T&gt; p, T i, Node&lt;T&gt; n){\n            item = i;\n            next = n;\n            prev = p;\n        }\n    }\n}\n</code></pre> <p>test:</p> <pre><code>/*****Contains methods below:\nvoid addFirstNode(int i)\nvoid add(int i)\nNode getFirstNode()\nNode getNode(index)\nNode getLastNode()\nint getSize()\nvoid printList()\n*/\npublic class Main {\n    public static &lt;Node&gt; void main(String[] args) {\n\n        //constructor, no arguments (create empty list)\n        //constructor, with arguments (create list with first node)\n        //getFirst()\n        //get(index)\n        //getSize\n        //addFirst\n        //add(item)\n\n        DDList&lt;Integer&gt; list = new DDList&lt;Integer&gt;();\n        list.addLast(5);\n        System.out.println(list.getSize());\n\n        list.addLast(6);\n        list.addFirst(4);\n        System.out.println(list.getSize());\n        System.out.println(list.get(0));\n        System.out.println(list.get(1));\n        System.out.println(list.get(2));\n\n\n\n        list.addFirst(3);\n        System.out.println(list.getSize());\n\n        list.addFirst(2);\n        list.addFirst(1);\n        list.addFirst(0);\n        System.out.println(list.get(4));\n        System.out.println(list.getSize());\n        System.out.println(list.getFirst().item);\n\n        DDList&lt;String&gt; s = new DDList&lt;String&gt;();\n        s.addFirst(\"hello\");\n        s.addLast(\"world\");\n        System.out.println(s.get(0));\n        System.out.println(s.get(1));\n    }\n}\n</code></pre>"},{"location":"Programming_Java/22__List__4__LinkedList_%28DIY%29/#deque","title":"Deque","text":"<p>see UCB-CS61B-project1A</p>"},{"location":"Programming_Java/23__Set__1_Set%28Interface%29/","title":"23__Set__1_Set(Interface).md","text":"<p>Sets are a collection of unique elements - you can only have one copy of each element. Unlike Lists, there is also no sense of order: you can't index into a set, nor can you control where each element is inserted into the set.</p> <p>Java has the Set interface. There are two main implementations: TreeSet, and HashSet. TreeSet keeps its elements in \u201csorted\u201d order, and is fast. In contrast, HashSet does not have a defined \u201corder\u201d, but is (usually) really fast.</p> <p>A Set cannot contain duplicate items. If we try to add an item already in the set, nothing happens.</p> <p>Set set = new HashSet&lt;&gt;(); set.add(1); set.add(1); set.add(2); set.remove(2); System.out.println(set.size()); if (set.contains(1)) {     System.out.println(\"1 in set\"); } for (int elem : set) {     System.out.println(elem); }"},{"location":"Programming_Java/23__Set__2_HashSet/","title":"HashSet","text":"<pre><code>import java.util.Set;\nimport java.util.HashSet;\n...\nSet&lt;String&gt; s = new HashSet&lt;&gt;();\ns.add(\"Tokyo\");\ns.add(\"Lagos\");\nSystem.out.println(s.contains(\"Tokyo\")); // true\n</code></pre> <pre><code>import java.util.HashSet;\n...\nHashSet&lt;String&gt; hashSet = new HashSet&lt;&gt;();\n...\nhashSet.add(\"Apple\");\nhashSet.add(\"Banana\");\nhashSet.add(\"Orange\");\n...\nfor (String item : hashSet) {\n    System.out.println(item);\n}\n</code></pre>"},{"location":"Programming_Java/23__Set__4_ArraySet_%28DIY%29/","title":"23__Set__4_ArraySet_(DIY).md","text":"<pre><code>//UCB-CS61B version\n//includes Iterator and Enhanced For Loop functions\n//more info: https://cs61b-2.gitbook.io/cs61b-textbook/12.-inheritance-iv-iterators-object-methods/12.3-iteration\n\nimport java.util.Iterator;\n\npublic class ArraySet&lt;T&gt; implements Iterable&lt;T&gt; {\n    private T[] items;\n    private int size; // the next item to be added will be at position size\n\n    public ArraySet() {\n        items = (T[]) new Object[100]; //generic array, not recommended\n        size = 0;\n    }\n\n    /* Returns true if this map contains a mapping for the specified key.\n     */\n    public boolean contains(T x) {\n        for (int i = 0; i &lt; size; i += 1) {\n            if (items[i].equals(x)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /* Associates the specified value with the specified key in this map.\n       Throws an IllegalArgumentException if the key is null. */\n    public void add(T x) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"can't add null\");\n        }\n        if (contains(x)) {\n            return;\n        }\n        items[size] = x;\n        size += 1;\n    }\n\n    /* Returns the number of key-value mappings in this map. */\n    public int size() {\n        return size;\n    }\n\n    /** returns an iterator (a.k.a. seer) into ME */\n    public Iterator&lt;T&gt; iterator() {\n        return new ArraySetIterator();\n    }\n\n    private class ArraySetIterator implements Iterator&lt;T&gt; {\n        private int wizPos;\n\n        public ArraySetIterator() {\n            wizPos = 0;\n        }\n\n        public boolean hasNext() {\n            return wizPos &lt; size;\n        }\n\n        public T next() {\n            T returnItem = items[wizPos];\n            wizPos += 1;\n            return returnItem;\n        }\n    }\n\n    public static void main(String[] args) {\n        ArraySet&lt;Integer&gt; aset = new ArraySet&lt;&gt;();\n        aset.add(5);\n        aset.add(23);\n        aset.add(42);\n\n        //iteration\n        for (int i : aset) {\n            System.out.println(i);\n        }\n    }\n\n}\n</code></pre>"},{"location":"Programming_Java/24__Deque__1_LinkedListDeque_%28DIY%29/","title":"24__Deque__1_LinkedListDeque_(DIY).md","text":"<pre><code>//UCBerkeley-CS61B-Project1A\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LinkedListDeque61B&lt;T&gt; implements Deque61B&lt;T&gt; {\n    public Node sentinel;\n    public int size;\n\n    public LinkedListDeque61B(){\n        sentinel = new Node(null, null, null);\n        sentinel.next = sentinel;\n        sentinel.prev = sentinel;\n        sentinel.item = null;\n        size = 0;\n    }\n\n    @Override\n    public void addFirst(T x) {\n        if(size==0){\n            Node n = new Node(null, null, null);\n            n.item = x;\n            sentinel.next = n;\n            sentinel.prev = n;\n            n.next = sentinel;\n            n.prev = sentinel;\n            size=1;\n        }\n        else{\n            Node n = new Node(null, null, null);\n            n.item = x;\n            n.next = sentinel.next;\n            sentinel.next.prev = n;\n            n.prev = sentinel;\n            sentinel.next = n;\n            size++;\n        }\n    }\n\n    @Override\n    public void addLast(T x) {\n        if(size==0){\n            Node n = new Node(null, null, null);\n            n.item = x;\n            sentinel.next = n;\n            sentinel.prev = n;\n            n.next = sentinel;\n            n.prev = sentinel;\n            size=1;\n        }\n        else{\n            Node n = new Node(null, null, null);\n            n.item = x;\n            n.prev = sentinel.prev;\n            sentinel.prev.next = n;\n            sentinel.prev = n;\n            n.next = sentinel;\n            size++;\n        }\n    }\n\n    @Override\n    public List&lt;T&gt; toList() {\n        List&lt;T&gt; l = new ArrayList&lt;T&gt;();\n        Node temp = sentinel.next;\n        for(int i=0;i&lt;size;i++){\n            l.add(temp.item);\n            temp = temp.next;\n        }\n        return l;\n    }\n\n    @Override\n    public boolean isEmpty() {\n        if(size==0){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n\n    @Override\n    public int size() {\n        return size;\n    }\n\n    @Override\n    public T removeFirst() {\n        if(size==0){\n            return null;\n        }\n        else if(size==1){\n            T x =  sentinel.next.item;\n            sentinel.next = sentinel;\n            sentinel.prev = sentinel;\n            size = 0;\n            return x;\n        }\n        else{\n            T x =  sentinel.next.item;\n            sentinel.next.next.prev = sentinel;\n            sentinel.next = sentinel.next.next;\n            size--;\n            return x;\n        }\n    }\n\n    @Override\n    public T removeLast() {\n        if(size==0){\n            return null;\n        }\n        else if(size==1){\n            T x =  sentinel.next.item;\n            sentinel.next = sentinel;\n            sentinel.prev = sentinel;\n            size = 0;\n            return x;\n        }\n        else{\n            T x =  sentinel.prev.item;\n            sentinel.prev.prev.next = sentinel;\n            sentinel.prev = sentinel.prev.prev;\n            size--;\n            return x;\n        }\n    }\n\n    @Override\n    public T get(int index) {\n        if(index&lt;0||index&gt;=size){\n            return null;\n        }\n        else{\n            int i = 0;\n            Node temp = sentinel.next;\n            while(i&lt;index){\n                temp = temp.next;\n                i++;\n            }\n            return temp.item;\n        }\n    }\n\n//    @Override\n//    public T getRecursive(int index) {\n//        if(this is the first time to call recursive){\n//            LinkedListDeque61B&lt;T&gt; temp = a copy of this.\n//        }\n//        if(index&lt;0||index&gt;=size){\n//            return null;\n//        }\n//        if(index==0){\n//            return sentinel.item;\n//        }\n//        else{\n//            temp.removeFirst();\n//            return getRecursive(index-1);\n//        }\n//    }\n\n\n//    @Override\n//    public T getRecursive(int index) {\n//        return getRecursive(index, this);\n//    }\n//\n//    private T getRecursive(int index, LinkedListDeque61B&lt;T&gt; temp) {\n//        if (index &lt; 0 || index &gt;= temp.size) {\n//            return null;\n//        }\n//        if (index == 0) {\n//            return temp.sentinel.next.item;\n//        } else {\n//            temp.removeFirst();\n//            return getRecursive(index - 1, temp);\n//        }\n//    }\n\n    @Override\n    public T getRecursive(int index) {\n        return getRecursive(sentinel.next, index);\n    }\n\n    private T getRecursive(Node node, int index) {\n        if (index &lt; 0 || node == sentinel) {\n            return null;\n        }\n        if (index == 0) {\n            return node.item;\n        }\n        return getRecursive(node.next, index - 1);\n    }\n\n\n    public class Node{ //don't need to use generic in inner class\n        public Node prev;\n        public T item;\n        public Node next;\n\n        public Node(Node p,T i,Node n){\n            prev = p;\n            item = i;\n            next = n;\n        }\n    }\n}\n</code></pre>"},{"location":"Programming_Java/25__Map__1_Map_%28interface%29/","title":"Map/Dictionary","text":"<p>Map is a set of key-value pairs.</p>"},{"location":"Programming_Java/25__Map__1_Map_%28interface%29/#_1","title":"\u65e7\u8d44\u6599","text":"<p>Java has the Map(Dictionary) interface. There are two main implementations: TreeMap, and HashMap. Similarly to sets, TreeMap keeps its keys sorted and is fast; HashMap has no defined order and is (usually) really fast. A Map cannot contain duplicate keys. If we try to add a key already in the map, the value is overwritten. In the angle brackets, we have the \u201ckey type\u201d first, followed by the \u201cvalue type\u201d. Maps cannot directly be used with the : for loop. Typically, we call keySet to iterate over a set of the keys, and use those to retrieve the values. One may also iterate over the entrySet to get both the keys and values.</p> <p>Map map = new HashMap&lt;&gt;(); map.put(\"hello\", \"hi\"); map.put(\"hello\", \"goodbye\"); System.out.println(map.get(\"hello\")); System.out.println(map.size()); if (map.containsKey(\"hello\")) {     System.out.println(\"\\\"hello\\\" in map\"); } for (String key : map.keySet()) {     System.out.println(key); }"},{"location":"Programming_Java/25__Map__2_HashMap/","title":"HashMap","text":""},{"location":"Programming_Java/25__Map__2_HashMap/#introduction","title":"Introduction","text":"<pre><code>import java.util.HashMap;\n\n//Create a hashmap with Keys-Values\nHashMap&lt;String, Integer&gt; ID = new HashMap&lt;&gt;();\n//HashMap&lt;String, Integer&gt; ID = new HashMap&lt;String, Integer&gt;(); In newer versions you don't need to input again.\nID.put(\"Jeff\", 1011); //\u8fd9\u91cc\u4e0d\u80fd\u662f011\uff0c\u56e0\u4e3ajava\u4e2d\u6570\u5b57\u5e38\u91cf\u524d\u4e0d\u80fd\u6709\u524d\u5bfc0\nID.put(\"Peter\", 1012);\nID.put(\"Wash\", 1013);\nSystem.out.println(ID);\nSystem.out.println(ID.get(\"Jeff\")); //Get the value of specific key\nSystem.out.println(ID.get(\"Peter\"));\nSystem.out.println(ID.get(\"Wash\"));\n\nSystem.out.println(ID.containsKey(\"Jeff\"));\nSystem.out.println(ID.containsKey(\"Dorethy\"));\n\nSystem.out.println(ID.containsValue(123));\nSystem.out.println(ID.containsValue(456));\n\nID.put(\"Jeff\", 1021); //update, return true or false\nID.replace(\"Peter\",1022); //if not exist, won't do anything, return true or false\nID.replace(\"Zhang\", 1022); \nID.putIfAbsent(\"Hulun\", 1099);//put if it is not in the map, return true or false\n</code></pre>"},{"location":"Programming_Java/25__Map__3_TreeMap/","title":"TreeMap","text":""},{"location":"Programming_Java/25__Map__3_TreeMap/#introduction","title":"Introduction","text":"<p>TreeMap \u548c HashMap \u662f Java \u4e2d\u4e24\u79cd\u4e0d\u540c\u7684 Map \u5b9e\u73b0\uff0c\u5b83\u4eec\u5728\u5185\u90e8\u7ed3\u6784\u3001\u6027\u80fd\u548c\u6392\u5e8f\u65b9\u9762\u6709\u663e\u8457\u7684\u533a\u522b\u3002\u4ee5\u4e0b\u662f\u5b83\u4eec\u7684\u4e3b\u8981\u533a\u522b\uff1a</p> <ol> <li> <p>\u5185\u90e8\u7ed3\u6784 HashMap: \u57fa\u4e8e\u54c8\u5e0c\u8868\u5b9e\u73b0\u3002HashMap \u4f7f\u7528\u54c8\u5e0c\u51fd\u6570\u6765\u8ba1\u7b97\u952e\u7684\u54c8\u5e0c\u7801\uff0c\u4ee5\u4fbf\u5feb\u901f\u5b58\u50a8\u548c\u68c0\u7d22\u952e\u503c\u5bf9\u3002 TreeMap: \u57fa\u4e8e\u7ea2\u9ed1\u6811\u5b9e\u73b0\u3002TreeMap \u4fdd\u6301\u952e\u7684\u81ea\u7136\u987a\u5e8f\uff08\u6216\u8005\u4f7f\u7528\u63d0\u4f9b\u7684\u6bd4\u8f83\u5668\u7684\u987a\u5e8f\uff09\uff0c\u56e0\u6b64\u5b83\u662f\u6709\u5e8f\u7684\u3002</p> </li> <li> <p>\u6392\u5e8f HashMap: \u4e0d\u4fdd\u8bc1\u4efb\u4f55\u987a\u5e8f\u3002\u5728\u904d\u5386 HashMap \u65f6\uff0c\u952e\u503c\u5bf9\u7684\u987a\u5e8f\u53ef\u80fd\u4f1a\u968f\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u800c\u53d8\u5316\u3002 TreeMap: \u4fdd\u8bc1\u952e\u7684\u987a\u5e8f\uff08\u81ea\u7136\u987a\u5e8f\u6216\u901a\u8fc7\u63d0\u4f9b\u7684\u6bd4\u8f83\u5668\u7684\u987a\u5e8f\uff09\u3002\u904d\u5386 TreeMap \u65f6\uff0c\u952e\u503c\u5bf9\u5c06\u6309\u6392\u5e8f\u987a\u5e8f\u8f93\u51fa\u3002</p> </li> <li> <p>\u6027\u80fd HashMap: \u5e38\u91cf\u65f6\u95f4\u590d\u6742\u5ea6 O(1) \u7528\u4e8e\u63d2\u5165\u548c\u67e5\u627e\u64cd\u4f5c\uff0c\u5047\u8bbe\u54c8\u5e0c\u51fd\u6570\u80fd\u591f\u5f88\u597d\u5730\u5206\u6563\u5143\u7d20\u5e76\u4e14\u6ca1\u6709\u8fc7\u591a\u7684\u54c8\u5e0c\u51b2\u7a81\u3002 TreeMap: \u5bf9\u4e8e\u63d2\u5165\u3001\u5220\u9664\u548c\u67e5\u627e\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log n)\uff0c\u56e0\u4e3a\u7ea2\u9ed1\u6811\u4fdd\u6301\u5e73\u8861\u3002</p> </li> <li> <p>null \u952e\u548c\u503c HashMap: \u5141\u8bb8\u4e00\u4e2a null \u952e\u548c\u591a\u4e2a null \u503c\u3002 TreeMap: \u4e0d\u5141\u8bb8 null \u952e\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u6bd4\u8f83\u952e\u7684\u5927\u5c0f\u3002\u4f46\u5141\u8bb8\u591a\u4e2a null \u503c\u3002</p> </li> <li> <p>\u4f7f\u7528\u573a\u666f HashMap: \u5f53\u4e0d\u9700\u8981\u952e\u7684\u987a\u5e8f\u65f6\uff0c\u9002\u5408\u5feb\u901f\u63d2\u5165\u3001\u5220\u9664\u548c\u67e5\u627e\u64cd\u4f5c\u3002 TreeMap: \u5f53\u9700\u8981\u952e\u7684\u6392\u5e8f\u65f6\uff0c\u9002\u5408\u5bf9\u952e\u8fdb\u884c\u6709\u5e8f\u904d\u5386\u6216\u8303\u56f4\u67e5\u627e\u64cd\u4f5c\u3002</p> </li> </ol>"},{"location":"Programming_Java/26__Disjoint-Set___1_DIY/","title":"26__Disjoint-Set___1_DIY.md","text":"<p>Two sets are named disjoint sets if they have no elements in common. A Disjoint-Sets (or Union-Find) data structure keeps track of a fixed number of elements partitioned into a number of disjoint sets. The data structure has two operations: 1. connect(x, y): connect x and y. Also known as union 2. isConnected(x, y): returns true if x and y are connected (i.e. part of the same set).</p>"},{"location":"Programming_Java/26__Disjoint-Set___1_DIY/#_1","title":"\u521d\u89c1\u7248\u672c","text":"<p>\uff08\u521d\u89c1\u7248\u672c\u662f\u6211\u770b\u5230\u8be5\u6570\u636e\u7ed3\u6784\u5e76\u5728\u6ca1\u6709\u770b\u5e38\u89c4\u5199\u6cd5\u65f6\u7b2c\u4e00\u53cd\u5e94\u7684\u89e3\u6cd5\uff0c\u4ee5\u540e\u4e0d\u518d\u8d58\u8ff0\uff09</p> <pre><code>import java.util.HashSet;\nimport java.util.Set;\nimport java.util.Iterator;\n\npublic class DisjointSet {\n\n    private Set&lt;Set&lt;Integer&gt;&gt; wholeSet;\n\n    public DisjointSet(){\n        wholeSet = new HashSet&lt;&gt;();\n    }\n    //connects two items P and Q\n    public void connect(int p, int q){\n        if(!isConnect(p, q)){\n            //do nothing\n        }\n        else{\n            //iterate wholeSet, find the set contains p and q,\n            // union these two sets\n            Iterator&lt;Set&lt;Integer&gt;&gt; iterator = wholeSet.iterator();\n            Set&lt;Integer&gt; unionSet = new HashSet&lt;&gt;();\n            Set&lt;Set&lt;Integer&gt;&gt; setRemove = new HashSet&lt;&gt;();\n            while(iterator.hasNext()){\n                Set&lt;Integer&gt; smallSet = iterator.next();\n                if(smallSet.contains(p) || smallSet.contains(q)){\n                    unionSet.addAll(smallSet);\n                    setRemove.add(smallSet);\n                }\n            }\n            //\u5220\u9664smallSet\n            wholeSet.removeAll(setRemove);\n            if(!unionSet.isEmpty()){\n                wholeSet.add(unionSet);\n            }\n        }\n    }\n\n    //checks to see if two items are connected\n    public boolean isConnect(int p, int q){\n        for (Set&lt;Integer&gt; nowSet : wholeSet) {\n            if (nowSet.contains(p) &amp;&amp; nowSet.contains(q)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void newItem(Integer x){\n        Set&lt;Integer&gt; newSet = new HashSet&lt;&gt;();\n        //\u8fd9\u91cc\u9700\u8981\u68c0\u67e5\u4e00\u4e0bx\u662f\u5426\u5df2\u7ecf\u5728wholeSet\u4e2d\u7684\u67d0\u4e2aset\u4e2d\n        //\u5982\u679c\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u4e0d\u6dfb\u52a0\n        boolean alreadyExist = false;\n        Iterator&lt;Set&lt;Integer&gt;&gt; iterator = wholeSet.iterator();\n        while(iterator.hasNext()){\n            if(iterator.next().contains(x)){\n                alreadyExist = true;\n                break;\n            }\n        }\n        if(!alreadyExist){\n            newSet.add(x);\n            wholeSet.add(newSet);\n        }\n    }\n}\n</code></pre> <p>\u8be5\u7248\u672c\u7684\u95ee\u9898\u5728\u4e8e\u6548\u7387\u8f83\u4f4e\uff0cConnect\u548cisConnect\u90fd\u662fO(N)</p>"},{"location":"Programming_Java/26__Disjoint-Set___1_DIY/#quickfind-isconnect-optimize","title":"QuickFind (isConnect Optimize)","text":"<pre><code>//copied from UCB-CS61B-Textbook-Professor Joshua Hug\n//https://cs61b-2.gitbook.io/cs61b-textbook/14.-disjoint-sets/14.2-quick-find\npublic class QuickFindDS implements DisjointSets {\n\n    private int[] id;\n\n    /* \u0398(N) */\n    public QuickFindDS(int N){\n        id = new int[N];\n        for (int i = 0; i &lt; N; i++){\n            id[i] = i;\n        }\n    }\n\n    /* need to iterate through the array =&gt; \u0398(N) */\n    public void connect(int p, int q){\n        int pid = id[p];\n        int qid = id[q];\n        for (int i = 0; i &lt; id.length; i++){\n            if (id[i] == pid){\n                id[i] = qid;\n            }\n        }\n    }\n\n    /* \u0398(1) */\n    public boolean isConnected(int p, int q){\n        return (id[p] == id[q]);\n    }\n}\n</code></pre> <p>This extremely reduced the time of isConnect to constant time, but still need O(n) to connect.</p>"},{"location":"Programming_Java/26__Disjoint-Set___1_DIY/#quickunion","title":"QuickUnion","text":"<p>\u4e00\u4e2a\u975e\u5e38\u6709\u610f\u601d\u7684question\uff1a </p> <p>\u5982\u4f55\u5728\u4ec5\u4ec5\u6539\u53d8\u4e00\u4e2a\u503c\u7684\u60c5\u51b5\u4e0b\u5c06\u4e24\u4e2aset\u8fdb\u884c\u5408\u5e76\uff1f</p> <p></p> <p></p> <p></p> <pre><code>public class QuickUnionDS implements DisjointSets {\n    private int[] parent;\n\n    public QuickUnionDS(int num) {\n        parent = new int[num];\n        for (int i = 0; i &lt; num; i++) {\n            parent[i] = -1;\n        }\n    }\n\n    private int find(int p) {\n        while (parent[p] &gt;= 0) {\n            p = parent[p];\n        }\n        return p;\n    }\n\n    @Override\n    public void connect(int p, int q) {\n        int i = find(p);\n        int j= find(q);\n        parent[i] = j;\n    }\n\n    @Override\n    public boolean isConnected(int p, int q) {\n        return find(p) == find(q);\n    }\n}\n</code></pre> <p></p> <p>From the runtime chart, QuickUnion seems worse than QuickFind! Note however that O(N) as an upper bound. When our trees are balanced, both connect and isConnected perform reasonably well. In the next section we'll see how to guarantee they perform well.</p>"},{"location":"Programming_Java/26__Disjoint-Set___1_DIY/#weighted-quick-unionwqu","title":"Weighted Quick Union(WQU)","text":""},{"location":"Programming_Java/41_ProjectMngMaven_1_pom_xml/","title":"41_ProjectMngMaven_1_pom_xml.md","text":"<p>pom.xml file is the key.</p> <p>Example:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;!-- \u57fa\u672c\u9879\u76ee\u4fe1\u606f --&gt;\n    &lt;groupId&gt;com.example&lt;/groupId&gt;\n    &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;jar&lt;/packaging&gt;\n\n    &lt;name&gt;My Project&lt;/name&gt;\n    &lt;url&gt;http://www.example.com/my-project&lt;/url&gt;\n    &lt;description&gt;A simple project to demonstrate a complete Maven POM&lt;/description&gt;\n\n    &lt;!-- \u4f9d\u8d56\u7ba1\u7406 --&gt;\n    &lt;dependencies&gt;\n        &lt;!-- \u6dfb\u52a0JUnit\u4f9d\u8d56 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;4.13.2&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- \u6dfb\u52a0\u5176\u4ed6\u4f9d\u8d56 --&gt;\n        &lt;!-- \u793a\u4f8b\uff1aSpring Core --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;\n            &lt;version&gt;5.3.9&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;!-- \u6784\u5efa\u914d\u7f6e --&gt;\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;!-- \u7f16\u8bd1\u63d2\u4ef6 --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.8.1&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;1.8&lt;/source&gt;\n                    &lt;target&gt;1.8&lt;/target&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n\n            &lt;!-- Surefire\u63d2\u4ef6\uff0c\u7528\u4e8e\u8fd0\u884c\u6d4b\u8bd5 --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n                &lt;version&gt;2.22.2&lt;/version&gt;\n            &lt;/plugin&gt;\n\n            &lt;!-- \u5176\u4ed6\u63d2\u4ef6 --&gt;\n            &lt;!-- \u793a\u4f8b\uff1aShade\u63d2\u4ef6\uff0c\u7528\u4e8e\u6253\u5305\u53ef\u6267\u884cjar --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.2.4&lt;/version&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;phase&gt;package&lt;/phase&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;shade&lt;/goal&gt;\n                        &lt;/goals&gt;\n                        &lt;configuration&gt;\n                            &lt;createDependencyReducedPom&gt;true&lt;/createDependencyReducedPom&gt;\n                            &lt;transformers&gt;\n                                &lt;transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"&gt;\n                                    &lt;mainClass&gt;com.example.MainClass&lt;/mainClass&gt;\n                                &lt;/transformer&gt;\n                            &lt;/transformers&gt;\n                        &lt;/configuration&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n    &lt;!-- \u4ed3\u5e93\u914d\u7f6e --&gt;\n    &lt;repositories&gt;\n        &lt;repository&gt;\n            &lt;id&gt;central&lt;/id&gt;\n            &lt;url&gt;https://repo.maven.apache.org/maven2&lt;/url&gt;\n        &lt;/repository&gt;\n    &lt;/repositories&gt;\n\n    &lt;!-- \u63d2\u4ef6\u7ba1\u7406 --&gt;\n    &lt;pluginRepositories&gt;\n        &lt;pluginRepository&gt;\n            &lt;id&gt;central&lt;/id&gt;\n            &lt;url&gt;https://repo.maven.apache.org/maven2&lt;/url&gt;\n        &lt;/pluginRepository&gt;\n    &lt;/pluginRepositories&gt;\n\n    &lt;!-- \u9879\u76ee\u5c5e\u6027 --&gt;\n    &lt;properties&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;\n    &lt;/properties&gt;\n\n&lt;/project&gt;\n</code></pre>"},{"location":"Programming_Java/41_ProjectMngMaven_2_CreateMavenProject/","title":"41_ProjectMngMaven_2_CreateMavenProject.md","text":""},{"location":"Programming_Java/41_ProjectMngMaven_2_CreateMavenProject/#_1","title":"\u6587\u4ef6\u76ee\u5f55\u6784\u5efa","text":"<p>\u6309\u7167\u5982\u4e0b\u76ee\u5f55\u5b58\u653e\u6587\u4ef6\uff0c\u5219\u4e0d\u9700\u8981\u901a\u8fc7\u5728pom.xml\u6587\u4ef6\u4e2d\u914d\u7f6ebuild\u90e8\u5206\u6765\u663e\u5f0f\u6307\u5b9a\u6e90\u4ee3\u7801\u548c\u6d4b\u8bd5\u4ee3\u7801\u7684\u4f4d\u7f6e\uff1a</p> <pre><code>my-app\n\u2502   pom.xml\n\u2514\u2500\u2500\u2500src\n    \u2514\u2500\u2500\u2500main\n    \u2502   \u2514\u2500\u2500\u2500java\n    \u2514\u2500\u2500\u2500test\n        \u2514\u2500\u2500\u2500java\n</code></pre> <p>\u5728Maven\u9879\u76ee\u7684\u76ee\u5f55\u7ed3\u6784\u4e2d\uff0csrc/main/java \u548c src/test/java \u662f\u6307\u76ee\u5f55\uff0c\u800c\u4e0d\u662f\u5355\u4e2a\u7684Java\u6587\u4ef6\u3002\u8fd9\u4e9b\u76ee\u5f55\u7528\u4e8e\u7ec4\u7ec7\u4f60\u7684\u6e90\u4ee3\u7801\u548c\u6d4b\u8bd5\u4ee3\u7801\u3002\u5176\u4e2d<code>src/main/java</code>\u76ee\u5f55\u7528\u4e8e\u5b58\u653e\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\uff08Java\u6587\u4ef6\uff09\uff0c<code>src/test/java</code>\u76ee\u5f55\u7528\u4e8e\u5b58\u653e\u4f60\u7684\u6d4b\u8bd5\u4ee3\u7801\uff08Java\u6587\u4ef6\uff09\u3002</p> <pre><code>my-app\n\u2502   pom.xml\n\u2514\u2500\u2500\u2500src\n    \u2514\u2500\u2500\u2500main\n    \u2502   \u2514\u2500\u2500\u2500java\n    \u2502       \u2514\u2500\u2500\u2500com\n    \u2502           \u2514\u2500\u2500\u2500example\n    \u2502               \u2514\u2500\u2500\u2500MyApp.java\n    \u2514\u2500\u2500\u2500test\n        \u2514\u2500\u2500\u2500java\n            \u2514\u2500\u2500\u2500com\n                \u2514\u2500\u2500\u2500example\n                    \u2514\u2500\u2500\u2500MyAppTest.java\n</code></pre>"},{"location":"Programming_Java/41_ProjectMngMaven_3_Instructions/","title":"41_ProjectMngMaven_3_Instructions.md","text":""},{"location":"Programming_Java/41_ProjectMngMaven_3_Instructions/#maven","title":"Maven \u57fa\u672c\u547d\u4ee4","text":"<p><code>mvn clean</code>\u6e05\u9664\u9879\u76ee\u7684 target \u76ee\u5f55\uff0c\u5220\u9664\u6240\u6709\u7f16\u8bd1\u751f\u6210\u7684\u6587\u4ef6\u3002</p> <p><code>mvn compile</code>\u7f16\u8bd1\u9879\u76ee\u7684\u6e90\u4ee3\u7801\u3002</p> <p><code>mvn test</code>\u4f7f\u7528\u5355\u5143\u6d4b\u8bd5\u6846\u67b6\u8fd0\u884c\u6d4b\u8bd5\uff0c\u4e0d\u9700\u8981\u6253\u5305\u6216\u90e8\u7f72\u9879\u76ee\u3002</p> <p><code>mvn package</code>\u6253\u5305\u7f16\u8bd1\u7684\u4ee3\u7801\uff0c\u5728 target \u76ee\u5f55\u751f\u6210 .jar \u6216 .war \u6587\u4ef6\u3002</p> <p><code>mvn install</code>\u5c06\u5305\u5b89\u88c5\u5230\u672c\u5730 Maven \u4ed3\u5e93\uff0c\u4f9b\u5176\u4ed6\u9879\u76ee\u4f9d\u8d56\u4f7f\u7528\u3002</p> <p><code>mvn deploy</code>\u5c06\u6700\u7ec8\u7684\u5305\u7248\u672c\u4e0a\u4f20\u5230\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u4f9b\u5176\u4ed6\u5f00\u53d1\u8005\u548c Maven \u9879\u76ee\u4f7f\u7528\u3002</p>"},{"location":"Programming_Java/41_ProjectMngMaven_3_Instructions/#maven_1","title":"Maven \u751f\u547d\u5468\u671f\u547d\u4ee4","text":"<p><code>mvn validate</code>\u9a8c\u8bc1\u9879\u76ee\u662f\u5426\u6b63\u786e\uff0c\u6240\u6709\u5fc5\u9700\u4fe1\u606f\u662f\u5426\u53ef\u7528\u3002</p> <p><code>mvn compile</code>\u7f16\u8bd1\u9879\u76ee\u7684\u6e90\u4ee3\u7801\u3002</p> <p><code>mvn test</code>\u4f7f\u7528\u9002\u5f53\u7684\u5355\u5143\u6d4b\u8bd5\u6846\u67b6\u6d4b\u8bd5\u7f16\u8bd1\u7684\u6e90\u4ee3\u7801\u3002</p> <p><code>mvn package</code>\u5728\u96c6\u6210\u6d4b\u8bd5\u53ef\u4ee5\u8fd0\u884c\u4e4b\u524d\uff0c\u5c06\u7f16\u8bd1\u7684\u4ee3\u7801\u6253\u5305\u6210\u53ef\u5206\u53d1\u683c\u5f0f\uff0c\u5982 JAR\u3002</p> <p><code>mvn verify</code>\u8fd0\u884c\u4efb\u4f55\u68c0\u67e5\uff0c\u9a8c\u8bc1\u5305\u662f\u5426\u6709\u6548\u4e14\u8fbe\u5230\u8d28\u91cf\u6807\u51c6\u3002</p> <p><code>mvn install</code>\u5728\u672c\u5730\u4ed3\u5e93\u5b89\u88c5\u5305\uff0c\u4ee5\u4f9b\u4f5c\u4e3a\u4f9d\u8d56\u9879\u5728\u5176\u4ed6\u9879\u76ee\u4e2d\u4f7f\u7528\u3002</p> <p><code>mvn deploy</code>\u5728\u6784\u5efa\u73af\u5883\u4e2d\u5b8c\u6210\uff0c\u5c06\u6700\u7ec8\u7684\u5305\u590d\u5236\u5230\u8fdc\u7a0b\u4ed3\u5e93\u4ee5\u5171\u4eab\u4e0e\u5176\u4ed6\u5f00\u53d1\u8005\u548c\u9879\u76ee\u3002</p>"},{"location":"Programming_Java/41_ProjectMngMaven_3_Instructions/#_1","title":"\u5176\u4ed6\u5e38\u7528\u547d\u4ee4","text":"<p><code>mvn site</code>\u751f\u6210\u9879\u76ee\u7684\u7ad9\u70b9\u6587\u6863\u3002</p> <p><code>mvn clean install</code>\u6e05\u9664 target \u76ee\u5f55\u5e76\u91cd\u65b0\u5b89\u88c5\u9879\u76ee\u3002</p> <p><code>mvn -version</code>\u663e\u793a Maven \u7684\u7248\u672c\u4fe1\u606f\u3002</p>"},{"location":"Programming_Java/41_ProjectMngMaven_4_RefreshDependencies/","title":"41_ProjectMngMaven_4_RefreshDependencies.md","text":""},{"location":"Programming_Java/41_ProjectMngMaven_4_RefreshDependencies/#idea","title":"IDEA","text":"<p>\u4e00\u822c\u5728\u5199\u597dpom.xml\u6587\u4ef6\u540eIDEA\u4f1a\u63d0\u793a\u81ea\u52a8\u5237\u65b0\uff1f</p> <p>\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u5219\u9700\u8981\u624b\u52a8\u5237\u65b0\u4e00\u4e0bMaven\u9879\u76ee\uff1a</p> <p>\u6253\u5f00Maven\u5de5\u5177\u7a97\u53e3\uff1a</p> <p>\u5728IntelliJ IDEA\u4e2d\uff0c\u53f3\u4fa7\u8fb9\u680f\u4e2d\u627e\u5230Maven\u5de5\u5177\u7a97\u53e3\u3002\u5982\u679c\u6ca1\u6709\u770b\u5230\uff0c\u53ef\u4ee5\u901a\u8fc7 View -&gt; Tool Windows -&gt; Maven \u6765\u6253\u5f00\u3002 \u5237\u65b0Maven\u9879\u76ee\uff1a</p> <p>\u5728Maven\u5de5\u5177\u7a97\u53e3\u4e2d\uff0c\u627e\u5230\u4f60\u7684\u9879\u76ee\u5e76\u70b9\u51fb\u5b83\u3002 \u70b9\u51fb\u7a97\u53e3\u9876\u90e8\u7684\u5237\u65b0\u6309\u94ae\uff08\u5faa\u73af\u7bad\u5934\u56fe\u6807\uff09\uff0cMaven\u4f1a\u6839\u636epom.xml\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u91cd\u65b0\u4e0b\u8f7d\u4f9d\u8d56\u5e76\u91cd\u5efa\u9879\u76ee\u3002</p>"},{"location":"Programming_Java/41_ProjectMng_Maven_0_Intro/","title":"Maven","text":"<p>Maven \u4e0d\u662f\u4e00\u4e2a\u6846\u67b6\uff0c\u800c\u662f\u4e00\u4e2a\u6784\u5efa\u548c\u9879\u76ee\u7ba1\u7406\u5de5\u5177\u3002\u5b83\u5e2e\u52a9\u5f00\u53d1\u8005\u81ea\u52a8\u5316\u9879\u76ee\u7684\u6784\u5efa\u8fc7\u7a0b\uff0c\u5305\u62ec\u7f16\u8bd1\u3001\u6d4b\u8bd5\u3001\u6253\u5305\u548c\u4f9d\u8d56\u7ba1\u7406\u3002Maven \u4e3b\u8981\u7528\u4e8e Java \u9879\u76ee\uff0c\u4f46\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5176\u4ed6\u8bed\u8a00\u7684\u9879\u76ee\u3002</p>"},{"location":"Programming_Java/41_ProjectMng_Maven_0_Intro/#maven_1","title":"Maven \u7684\u529f\u80fd\u548c\u7279\u6027","text":""},{"location":"Programming_Java/41_ProjectMng_Maven_0_Intro/#_1","title":"\u9879\u76ee\u6784\u5efa","text":"<ul> <li>\u81ea\u52a8\u5316\u7f16\u8bd1\u3001\u6d4b\u8bd5\u3001\u6253\u5305\u548c\u90e8\u7f72\u8fc7\u7a0b\u3002</li> <li>\u901a\u8fc7\u914d\u7f6e <code>pom.xml</code> \u6587\u4ef6\u6765\u5b9a\u4e49\u9879\u76ee\u7684\u6784\u5efa\u8fc7\u7a0b\u548c\u4f9d\u8d56\u3002</li> </ul> <p>\u901a\u8fc7pom.xml\uff0cMaven\u53ef\u4ee5\u81ea\u52a8\u90e8\u7f72\u63d2\u4ef6\uff0c\u65e0\u9700\u624b\u52a8\u6dfb\u52a0jar\u5230lib\u6587\u4ef6\u5939\u4e2d\u3002</p>"},{"location":"Programming_Java/41_ProjectMng_Maven_0_Intro/#_2","title":"\u4f9d\u8d56\u7ba1\u7406","text":"<ul> <li>\u81ea\u52a8\u4e0b\u8f7d\u548c\u7ba1\u7406\u9879\u76ee\u6240\u9700\u7684\u5e93\u548c\u63d2\u4ef6\u3002</li> <li>\u89e3\u51b3\u4f9d\u8d56\u51b2\u7a81\uff0c\u786e\u4fdd\u9879\u76ee\u4f7f\u7528\u6b63\u786e\u7684\u7248\u672c\u3002</li> </ul>"},{"location":"Programming_Java/41_ProjectMng_Maven_0_Intro/#_3","title":"\u9879\u76ee\u7ed3\u6784","text":"<ul> <li>\u63d0\u4f9b\u6807\u51c6\u5316\u7684\u9879\u76ee\u76ee\u5f55\u7ed3\u6784\uff0c\u4fbf\u4e8e\u9879\u76ee\u7684\u7ec4\u7ec7\u548c\u7ba1\u7406\u3002</li> <li>\u4f8b\u5982\uff0c\u6e90\u4ee3\u7801\u901a\u5e38\u653e\u5728 <code>src/main/java</code>\uff0c\u6d4b\u8bd5\u4ee3\u7801\u653e\u5728 <code>src/test/java</code>\u3002</li> </ul>"},{"location":"Programming_Java/41_ProjectMng_Maven_0_Intro/#_4","title":"\u751f\u547d\u5468\u671f\u7ba1\u7406","text":"<ul> <li>\u5b9a\u4e49\u4e86\u9879\u76ee\u7684\u751f\u547d\u5468\u671f\u9636\u6bb5\uff08\u5982\u9a8c\u8bc1\u3001\u7f16\u8bd1\u3001\u6d4b\u8bd5\u3001\u6253\u5305\u7b49\uff09\uff0c\u5e76\u5728\u5404\u4e2a\u9636\u6bb5\u6267\u884c\u76f8\u5e94\u7684\u63d2\u4ef6\u548c\u4efb\u52a1\u3002</li> </ul>"},{"location":"Programming_Java/41_ProjectMng_Maven_0_Intro/#_5","title":"\u53ef\u6269\u5c55\u6027","text":"<ul> <li>\u901a\u8fc7\u63d2\u4ef6\u673a\u5236\uff0cMaven \u53ef\u4ee5\u6269\u5c55\u4ee5\u652f\u6301\u5404\u79cd\u6784\u5efa\u4efb\u52a1\u548c\u5de5\u5177\u96c6\u6210\u3002</li> </ul>"},{"location":"Programming_Java/51_TestTool_JUnit_0_Intro/","title":"51_TestTool_JUnit_0_Intro.md","text":"<p>JUnit is a Unit Testing Framework for Java.</p>"},{"location":"Programming_Java/51_TestTool_JUnit_0_Intro/#trending-version-junit5","title":"Trending Version: JUnit5","text":"<p>JUnit 5 is the current generation of the JUnit testing framework, which provides a modern foundation for developer-side testing on the JVM. This includes focusing on Java 8 and above, as well as enabling many different styles of testing.</p>"},{"location":"Programming_Java/51_TestTool_JUnit_0_Intro/#junit","title":"\u4f7f\u7528 JUnit \u6d4b\u8bd5\u7684\u4f18\u70b9","text":"<ol> <li>\u81ea\u52a8\u5316\uff1a\u652f\u6301\u81ea\u52a8\u5316\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u96c6\u6210\u5230\u6301\u7eed\u96c6\u6210\u548c\u6784\u5efa\u7cfb\u7edf\u4e2d\u3002</li> <li>\u53ef\u8bfb\u6027\u597d\uff1a\u6d4b\u8bd5\u4ee3\u7801\u548c\u4e1a\u52a1\u4ee3\u7801\u5206\u79bb\uff0c\u6d4b\u8bd5\u4ee3\u7801\u901a\u5e38\u7ed3\u6784\u6e05\u6670\uff0c\u6613\u4e8e\u7406\u89e3\u548c\u7ef4\u62a4\u3002</li> <li>\u65ad\u8a00\u673a\u5236\uff1a\u901a\u8fc7\u65ad\u8a00\u53ef\u4ee5\u6e05\u6670\u5730\u5b9a\u4e49\u9884\u671f\u7ed3\u679c\uff0c\u6d4b\u8bd5\u5931\u8d25\u65f6\u4f1a\u81ea\u52a8\u62a5\u544a\u3002</li> <li>\u6d4b\u8bd5\u62a5\u544a\uff1a\u63d0\u4f9b\u8be6\u7ec6\u7684\u6d4b\u8bd5\u62a5\u544a\uff0c\u4fbf\u4e8e\u8ddf\u8e2a\u6d4b\u8bd5\u7ed3\u679c\u548c\u53d1\u73b0\u95ee\u9898\u3002</li> <li>\u53ef\u6269\u5c55\u6027\uff1a\u652f\u6301\u6d4b\u8bd5\u5957\u4ef6\u3001\u53c2\u6570\u5316\u6d4b\u8bd5\u7b49\u9ad8\u7ea7\u7279\u6027\uff0c\u4fbf\u4e8e\u6269\u5c55\u548c\u7ba1\u7406\u5927\u91cf\u6d4b\u8bd5\u7528\u4f8b\u3002</li> </ol>"},{"location":"Programming_Java/51_TestTool_JUnit_1_Test%26Example/","title":"Test","text":""},{"location":"Programming_Java/51_TestTool_JUnit_1_Test%26Example/#example","title":"Example","text":"<pre><code>import static org.junit.Assert.assertArrayEquals;\nimport org.junit.Test;\n\npublic class TestSort {\n    /** Tests the sort method of the Sort class. */\n    @Test\n    public void testSort() {\n        String[] input = {\"i\", \"have\", \"an\", \"egg\"};\n        String[] expected = {\"an\", \"egg\", \"have\", \"i\"};\n        Sort.sort(input);\n        assertArrayEquals(\"The sorted array does not match the expected array.\", expected, input);\n    }\n}\n</code></pre>"},{"location":"Programming_Java/51_TestTool_JUnit_1_Test%26Example/#normal-test","title":"Normal Test","text":"<p>\u4f8b\uff1a\uff08\u5176\u5b9e\u5c31\u662f\u9884\u8bbe\u4e00\u4e2a\u6bd4\u5bf9\uff0c\u5982\u679c\u4e0d\u5bf9\u7684\u8bdd\u5c31\u63d0\u793a\u4e00\u4e0b\uff09</p> <pre><code>public class TestSort {\n    /** Tests the sort method of the Sort class. */\n    public static void testSort() {\n        String[] input = {\"i\", \"have\", \"an\", \"egg\"};\n        String[] expected = {\"an\", \"egg\", \"have\", \"i\"};\n        Sort.sort(input);\n        for (int i = 0; i &lt; input.length; i += 1) {\n            if (!input[i].equals(expected[i])) {\n                System.out.println(\"Mismatch in position \" + i + \", expected: \" + expected[i] + \", but got: \" + input[i] + \".\");\n                break;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        testSort();\n    }\n}\n</code></pre>"},{"location":"Programming_Java/51_TestTool_JUnit_1_Test%26Example/#framework-junit","title":"Framework - JUnit","text":"<p>\u4f7f\u7528\u6846\u67b6\u8fdb\u884c\u6d4b\u8bd5\uff0c\u6709\u65f6\u5019\u4f1a\u6bd4\u8f83\u65b9\u4fbf\uff0c\u56e0\u4e3a\u6846\u67b6\u4e2d\u96c6\u6210\u4e86\u5f88\u591a\u6d4b\u8bd5\u529f\u80fd\u3002</p> <p>\u8be6\u60c5\u89c1JUnit\u6b63\u6587\u7b14\u8bb0\u90e8\u5206\u3002</p>"},{"location":"Programming_Java/51_TestTool_JUnit_1_Test%26Example/#unit-test-framework-junit","title":"Unit Test Framework --- JUnit","text":"<p>JUnit is a Unit Testing Framework for Java.</p> <p>Unit Testing is a great way to rigorously test each method of your code and ultimately ensure that you have a working project.</p> <p>The \u201cUnit\u201d part of Unit Testing comes from the idea that you can break your program down into units, or the smallest testable part of an application. Therefore, Unit Testing enforces good code structure (each method should only do \u201cOne Thing\u201d), and allows you to consider all of the edge cases for each method and test for them individually.</p>"},{"location":"Programming_Java/51_TestTool_JUnit_1_Test%26Example/#other-test-frameworks","title":"Other Test Frameworks","text":"<p>TestNG: \u4e5f\u662f\u7528@Test</p>"},{"location":"Programming_Java/51_TestTool_JUnit_1_Test%26Example/#test_1","title":"@Test","text":"<p>\u5728Java\u4e2d\uff0c@Test \u662fJUnit\u6846\u67b6\u4e2d\u7684\u4e00\u4e2a\u6ce8\u89e3\uff0c\u7528\u4e8e\u6807\u8bc6\u4e00\u4e2a\u65b9\u6cd5\u662f\u4e00\u4e2a\u5355\u5143\u6d4b\u8bd5\u65b9\u6cd5\u3002JUnit\u662f\u4e00\u4e2a\u7528\u4e8eJava\u7f16\u7a0b\u8bed\u8a00\u7684\u5355\u5143\u6d4b\u8bd5\u6846\u67b6\uff0c\u5e7f\u6cdb\u7528\u4e8e\u6d4b\u8bd5Java\u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>\u4ee5\u4e0b\u662f\u5173\u4e8e @Test \u6ce8\u89e3\u7684\u4e00\u4e9b\u5173\u952e\u70b9\uff1a</p>"},{"location":"Programming_Java/51_TestTool_JUnit_1_Test%26Example/#_1","title":"\u6807\u8bc6\u6d4b\u8bd5\u65b9\u6cd5\uff1a","text":"<p>\u4f7f\u7528 @Test \u6ce8\u89e3\u7684\u65b9\u6cd5\u4f1a\u88abJUnit\u6846\u67b6\u4f5c\u4e3a\u6d4b\u8bd5\u65b9\u6cd5\u6765\u8fd0\u884c\u3002\u901a\u5e38\uff0c\u4e00\u4e2a\u6d4b\u8bd5\u65b9\u6cd5\u4f1a\u5305\u542b\u4e00\u4e9b\u65ad\u8a00\uff08assertions\uff09\uff0c\u7528\u4e8e\u9a8c\u8bc1\u4ee3\u7801\u7684\u884c\u4e3a\u662f\u5426\u7b26\u5408\u9884\u671f\u3002</p> <p>\u8981\u4f7f\u7528 @Test \u6ce8\u89e3\uff0c\u9996\u5148\u9700\u8981\u5728\u9879\u76ee\u4e2d\u6dfb\u52a0JUnit\u7684\u4f9d\u8d56\u3002</p>"},{"location":"Programming_Java/51_TestTool_JUnit_1_Test%26Example/#_2","title":"\u8fd0\u884c\u6d4b\u8bd5","text":"<p>\u53ef\u4ee5\u4f7f\u7528\u5404\u79cdIDE\uff08\u5982IntelliJ IDEA\u3001Eclipse\u7b49\uff09\u6216\u8005\u901a\u8fc7\u547d\u4ee4\u884c\u5de5\u5177\u8fd0\u884cJUnit\u6d4b\u8bd5\u3002\u5728IDE\u4e2d\uff0c\u901a\u5e38\u53ef\u4ee5\u76f4\u63a5\u53f3\u952e\u70b9\u51fb\u6d4b\u8bd5\u7c7b\u6216\u65b9\u6cd5\u5e76\u9009\u62e9\u201cRun\u201d\u9009\u9879\u6765\u8fd0\u884c\u6d4b\u8bd5\u3002</p>"},{"location":"Programming_Java/51_TestTool_JUnit_2_Dependency/","title":"\u5f15\u5165\u4f9d\u8d56(dependency)","text":"<p>\u8981\u4f7f\u7528 @Test \u6ce8\u89e3\uff0c\u9996\u5148\u9700\u8981\u5728\u9879\u76ee\u4e2d\u6dfb\u52a0JUnit\u7684\u4f9d\u8d56\u3002\u5bf9\u4e8eJUnit 5\uff0c\u53ef\u4ee5\u5728Maven\u6216Gradle\u9879\u76ee\u7684\u6784\u5efa\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4f9d\u8d56\uff1a</p> <p>\u5bf9\u4e8eJUnit 5\uff0c\u53ef\u4ee5\u5728Maven\u6216Gradle\u9879\u76ee\u7684\u6784\u5efa\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4f9d\u8d56\uff1a</p> <p>Maven(\u4f3c\u4e4e\u8fd8\u4e0d\u591f)</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n    &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;\n    &lt;version&gt;5.8.1&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n    &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;\n    &lt;version&gt;5.8.1&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Maven\uff08Include build part\uff09</p> <pre><code>    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;\n            &lt;artifactId&gt;hamcrest-core&lt;/artifactId&gt;\n            &lt;version&gt;1.3&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;4.13.2&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.11.0&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;1.8&lt;/source&gt;\n                    &lt;target&gt;1.8&lt;/target&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre> <p>Gradle</p> <pre><code>testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'\ntestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'\n</code></pre>"},{"location":"Programming_Java/51_TestTool_JUnit_2_Dependency/#_1","title":"\u7f16\u5199\u6d4b\u8bd5\u65b9\u6cd5","text":"<p>\u7f16\u5199\u6d4b\u8bd5\u65b9\u6cd5\u65f6\uff0c\u65b9\u6cd5\u9700\u8981\u88ab @Test \u6ce8\u89e3\u6807\u6ce8\uff0c\u4e14\u4e0d\u9700\u8981\u6709\u8fd4\u56de\u503c\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a</p> <pre><code>import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CalculatorTest {\n\n    @Test\n    public void testAddition() {\n        Calculator calculator = new Calculator();\n        int result = calculator.add(2, 3);\n        assertEquals(5, result);\n    }\n}\n</code></pre>"},{"location":"Programming_Java/52_TestTool_Truth_1_About/","title":"52_TestTool_Truth_1_About.md","text":"<p>Google's Truth \u662f\u4e00\u4e2a\u7528\u4e8e\u7f16\u5199\u6d4b\u8bd5\u65ad\u8a00(assertion)\u7684\u5e93\u3002\u4e0e JUnit \u65ad\u8a00\u76f8\u6bd4\uff0cTruth \u63d0\u4f9b\u4e86\u4e00\u4e9b\u4f18\u52bf\uff1a</p> <ol> <li>\u66f4\u597d\u7684\u5931\u8d25\u6d88\u606f\uff1aTruth \u751f\u6210\u7684\u5931\u8d25\u6d88\u606f\u66f4\u5177\u53ef\u8bfb\u6027\uff0c\u5c24\u5176\u662f\u5bf9\u4e8e\u5217\u8868\u7b49\u590d\u6742\u6570\u636e\u7ed3\u6784\u3002\u8fd9\u6837\uff0c\u5f53\u6d4b\u8bd5\u5931\u8d25\u65f6\uff0c\u66f4\u5bb9\u6613\u7406\u89e3\u548c\u5b9a\u4f4d\u95ee\u9898\u3002</li> <li>\u66f4\u6613\u8bfb\u5199\u7684\u6d4b\u8bd5\uff1aTruth \u7684 API \u8bbe\u8ba1\u66f4\u52a0\u76f4\u89c2\u548c\u7b80\u6d01\uff0c\u4f7f\u5f97\u6d4b\u8bd5\u4ee3\u7801\u66f4\u6613\u4e8e\u7f16\u5199\u548c\u7ef4\u62a4\u3002</li> <li>\u66f4\u4e30\u5bcc\u7684\u65ad\u8a00\u5e93\uff1aTruth \u81ea\u5e26\u4e86\u66f4\u5927\u7684\u65ad\u8a00\u5e93\uff0c\u652f\u6301\u66f4\u591a\u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784\u548c\u65ad\u8a00\u65b9\u6cd5\uff0c\u51cf\u5c11\u4e86\u4f9d\u8d56\u989d\u5916\u5e93\u7684\u9700\u6c42\u3002</li> </ol> <p>\u8981\u4f7f\u7528 Google Truth \u5e93\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u7684\u6784\u5efa\u6587\u4ef6\u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684\u4f9d\u8d56\uff0c\u4f8b\u5982\u5728 Maven \u4e2d\uff1a</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.google.truth&lt;/groupId&gt;\n    &lt;artifactId&gt;truth&lt;/artifactId&gt;\n    &lt;version&gt;1.1.3&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>\u793a\u4f8b\uff1a</p> <pre><code>import static com.google.common.truth.Truth.assertThat;\n\nimport org.junit.Test;\n\npublic class ExampleTest {\n\n    @Test\n    public void testString() {\n        String actual = \"hello\";\n        assertThat(actual).isEqualTo(\"hello\");\n    }\n\n    @Test\n    public void testList() {\n        List&lt;String&gt; actual = List.of(\"a\", \"b\", \"c\");\n        assertThat(actual).containsExactly(\"a\", \"b\", \"c\").inOrder();\n    }\n}\n</code></pre>"},{"location":"Programming_Java/52_TestTool_Truth_2_Arrange-Act-Assert/","title":"52_TestTool_Truth_2_Arrange-Act-Assert.md","text":"<p>Arrange-Act-Assert</p> <p>\u4ee5CS61B-UCB\u7684course\u4e3a\u4f8b\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u6709\u4e00\u4e2a\u7c7b LinkedListDeque61B \u5b9e\u73b0\u4e86 isEmpty \u548c size \u65b9\u6cd5\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u4f7f\u7528 Truth \u5e93\u7f16\u5199\u6d4b\u8bd5\u7684\u6b65\u9aa4\uff1a</p> <p>\u8bbe\u7f6e\u6d4b\u8bd5\u73af\u5883\uff08Arrange\uff09\uff1a\u521d\u59cb\u5316 LinkedListDeque61B \u5bf9\u8c61\u3002 \u6267\u884c\u6d4b\u8bd5\u884c\u4e3a\uff08Act\uff09\uff1a\u8c03\u7528 isEmpty \u548c size \u65b9\u6cd5\u3002 \u65ad\u8a00\u7ed3\u679c\uff08Assert\uff09\uff1a\u4f7f\u7528 Truth \u5e93\u7684 assertThat \u65b9\u6cd5\u6765\u9a8c\u8bc1\u8fd4\u56de\u7ed3\u679c\u662f\u5426\u7b26\u5408\u9884\u671f\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5728\u9879\u76ee\u4e2d\u6dfb\u52a0 Google Truth \u5e93\u7684\u4f9d\u8d56\uff08\u89c1[Truth_About]\uff09</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a Java \u6587\u4ef6 LinkedListDeque61BTest\uff0c\u5305\u542b\u6d4b\u8bd5 isEmpty \u548c size \u65b9\u6cd5\u7684<code>\u6d4b\u8bd5\u7528\u4f8b</code>(<code>test case</code>)\uff1a</p> <pre><code>import static com.google.common.truth.Truth.assertThat;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class LinkedListDeque61BTest {\n\n    private LinkedListDeque61B&lt;Integer&gt; deque;\n\n    @Before\n    public void setUp() {\n        deque = new LinkedListDeque61B&lt;&gt;();\n    }\n\n    @Test\n    public void testIsEmpty() {\n        // \u521d\u59cb\u72b6\u6001\uff0cdeque \u5e94\u8be5\u4e3a\u7a7a\n        assertThat(deque.isEmpty()).isTrue();\n\n        // \u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\u540e\uff0cdeque \u4e0d\u5e94\u8be5\u4e3a\u7a7a\n        deque.addFirst(1);\n        assertThat(deque.isEmpty()).isFalse();\n\n        // \u79fb\u9664\u8be5\u5143\u7d20\u540e\uff0cdeque \u5e94\u8be5\u518d\u6b21\u4e3a\u7a7a\n        deque.removeFirst();\n        assertThat(deque.isEmpty()).isTrue();\n    }\n\n    @Test\n    public void testSize() {\n        // \u521d\u59cb\u72b6\u6001\uff0cdeque \u7684\u5927\u5c0f\u5e94\u8be5\u4e3a 0\n        assertThat(deque.size()).isEqualTo(0);\n\n        // \u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\u540e\uff0c\u5927\u5c0f\u5e94\u8be5\u4e3a 1\n        deque.addFirst(1);\n        assertThat(deque.size()).isEqualTo(1);\n\n        // \u518d\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\u540e\uff0c\u5927\u5c0f\u5e94\u8be5\u4e3a 2\n        deque.addLast(2);\n        assertThat(deque.size()).isEqualTo(2);\n\n        // \u79fb\u9664\u4e00\u4e2a\u5143\u7d20\u540e\uff0c\u5927\u5c0f\u5e94\u8be5\u4e3a 1\n        deque.removeFirst();\n        assertThat(deque.size()).isEqualTo(1);\n\n        // \u518d\u79fb\u9664\u4e00\u4e2a\u5143\u7d20\u540e\uff0c\u5927\u5c0f\u5e94\u8be5\u4e3a 0\n        deque.removeLast();\n        assertThat(deque.size()).isEqualTo(0);\n    }\n}\n</code></pre> <p>\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff1a</p> <p>setUp \u65b9\u6cd5\u7528\u4e8e\u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684 LinkedListDeque61B \u5bf9\u8c61\u3002 testIsEmpty \u65b9\u6cd5\u6d4b\u8bd5 isEmpty \u65b9\u6cd5\u5728\u4e0d\u540c\u60c5\u51b5\u4e0b\u7684\u8fd4\u56de\u503c\u662f\u5426\u6b63\u786e\u3002 testSize \u65b9\u6cd5\u6d4b\u8bd5 size \u65b9\u6cd5\u5728\u4e0d\u540c\u60c5\u51b5\u4e0b\u7684\u8fd4\u56de\u503c\u662f\u5426\u6b63\u786e\u3002 \u8fd0\u884c\u8fd9\u4e9b\u6d4b\u8bd5\uff0c\u786e\u4fdd\u5b83\u4eec\u80fd\u591f\u9a8c\u8bc1 isEmpty \u548c size \u65b9\u6cd5\u7684\u884c\u4e3a\u3002\u5728\u6d4b\u8bd5\u5931\u8d25\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u5931\u8d25\u6d88\u606f\u6765\u8c03\u8bd5\u548c\u4fee\u590d\u4ee3\u7801\u3002</p>"},{"location":"Programming_Java/SDE_1_TDD%28Test-Driven-Development%29/","title":"SDE_1_TDD(Test-Driven-Development).md","text":"<p>Test-Driven Development (TDD)</p> <p>TDD is a development process in which we write tests for code before writing the code itself. The steps are as follows:</p> <ol> <li> <p>Identify a new feature.</p> </li> <li> <p>Write a unit test for that feature.</p> </li> <li> <p>Run the test. It should fail.</p> </li> <li> <p>Write code that passes the test. Yay!</p> </li> <li> <p>Optional: refactor code to make it faster, cleaner, etc. Except now we have a reference to tests that should pass.</p> </li> </ol> <p>Test-Driven Development is not required in this class (UCB-CS61B) and may not be your style but unit testing in general is most definitely a good idea.</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/","title":"Set Up","text":""},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/#_1","title":"\u65b0\u5efa\u4e00\u4e2a\u9879\u76ee","text":"<p>\u76f4\u63a5\u65b0\u5efa\u4e00\u4e2a\u9879\u76ee</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/#project","title":"\u6253\u5f00\u9879\u76ee\u540e\u6ca1\u6709project\u4fe1\u606f/\u9879\u76ee\u6587\u4ef6\u672a\u663e\u793a/\u9879\u76ee\u7ed3\u6784\u914d\u7f6e\u4e0d\u6b63\u786e\u7684\u60c5\u51b5","text":""},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/#1","title":"\u6b65\u9aa41\uff1a\u68c0\u67e5\u9879\u76ee\u6587\u4ef6","text":"<p>\u786e\u4fdd\u9879\u76ee\u76ee\u5f55\u4e2d\u786e\u5b9e\u6709 <code>src</code> \u548c <code>lib</code> \u6587\u4ef6\u5939\uff0c\u5e76\u4e14\u5176\u4e2d\u5305\u542b\u6709\u6548\u7684 Java \u6587\u4ef6\u548c\u5e93\u6587\u4ef6\u3002</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/#2","title":"\u6b65\u9aa42\uff1a\u91cd\u65b0\u5bfc\u5165\u9879\u76ee","text":"<p>\u5982\u679c\u786e\u8ba4\u9879\u76ee\u6587\u4ef6\u5b58\u5728\u4f46\u672a\u663e\u793a\uff0c\u5c1d\u8bd5\u91cd\u65b0\u5bfc\u5165\u9879\u76ee\uff1a 1. \u5173\u95ed\u5f53\u524d\u9879\u76ee\u3002 2. \u9009\u62e9 <code>File &gt; New &gt; Project from Existing Sources...</code>\u3002 3. \u6d4f\u89c8\u5230\u9879\u76ee\u6839\u76ee\u5f55\u5e76\u9009\u62e9\u5b83\u3002 4. \u6309\u7167\u5411\u5bfc\u63d0\u793a\u5bfc\u5165\u9879\u76ee\u3002</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/#3","title":"\u6b65\u9aa43\uff1a\u68c0\u67e5\u9879\u76ee\u7ed3\u6784\u914d\u7f6e","text":"<ol> <li>\u6253\u5f00\u201cProject Structure\u201d\u5bf9\u8bdd\u6846\uff1a</li> <li>\u4f7f\u7528\u5feb\u6377\u952e <code>Ctrl+Alt+Shift+S</code> (Windows/Linux) \u6216 <code>Command+;</code> (macOS)\u3002</li> <li> <p>\u5728\u83dc\u5355\u680f\u4e2d\u9009\u62e9 <code>File &gt; Project Structure</code>\u3002</p> </li> <li> <p>\u914d\u7f6e\u6a21\u5757\u5185\u5bb9\u6839\u76ee\u5f55\uff1a</p> </li> <li>\u5728\u5de6\u4fa7\u9009\u62e9 <code>Modules</code>\u3002</li> <li>\u68c0\u67e5\u53f3\u4fa7\u662f\u5426\u5217\u51fa\u4e86\u4f60\u7684\u6a21\u5757\uff0c\u5e76\u4e14\u6a21\u5757\u5185\u5bb9\u6839\u76ee\u5f55\u5305\u542b <code>src</code> \u6587\u4ef6\u5939\u3002</li> <li> <p>\u5982\u679c <code>src</code> \u6587\u4ef6\u5939\u672a\u88ab\u6807\u8bb0\u4e3a <code>Sources</code>\uff0c\u70b9\u51fb\u6587\u4ef6\u5939\u5e76\u9009\u62e9 <code>Sources</code>\u3002</p> </li> <li> <p>\u6dfb\u52a0\u5e93\uff1a</p> </li> <li>\u5728 <code>Project Structure</code> \u5bf9\u8bdd\u6846\u4e2d\uff0c\u9009\u62e9\u5de6\u4fa7\u7684 <code>Libraries</code>\u3002</li> <li>\u70b9\u51fb <code>+</code> \u53f7\u6309\u94ae\uff0c\u9009\u62e9 <code>Java</code>\u3002</li> <li>\u6d4f\u89c8\u5230 <code>lib</code> \u6587\u4ef6\u5939\uff0c\u9009\u62e9\u5e93\u6587\u4ef6\uff08\u5982 <code>.jar</code> \u6587\u4ef6\uff09\uff0c\u5e76\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\u3002</li> </ol>"},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/#4","title":"\u6b65\u9aa44\uff1a\u91cd\u5efa\u9879\u76ee","text":"<p>\u5b8c\u6210\u4ee5\u4e0a\u914d\u7f6e\u540e\uff0c\u91cd\u5efa\u9879\u76ee\u4ee5\u786e\u4fdd\u914d\u7f6e\u751f\u6548\uff1a - \u9009\u62e9\u83dc\u5355\u680f\u4e2d\u7684 <code>Build &gt; Rebuild Project</code>\u3002</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/#_2","title":"\u7ed3\u679c","text":"<p>\u5b8c\u6210\u8fd9\u4e9b\u6b65\u9aa4\u540e\uff0c\u4f60\u7684\u9879\u76ee\u7ed3\u6784\u548c\u6587\u4ef6\u5e94\u8be5\u4f1a\u6b63\u786e\u663e\u793a\u5728 IntelliJ IDEA \u7684\u9879\u76ee\u89c6\u56fe\u4e2d\u3002</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/#lib","title":"\u989d\u5916\u6b65\u9aa4\uff1a\u624b\u52a8\u6dfb\u52a0 lib \u6587\u4ef6\u5939\u4e2d\u7684\u5e93\u6587\u4ef6\u5230\u9879\u76ee","text":"<p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cIntelliJ IDEA \u4e0d\u4f1a\u81ea\u52a8\u52a0\u8f7d <code>lib</code> \u6587\u4ef6\u5939\u4e2d\u7684\u5e93\u6587\u4ef6\u3002\u4f60\u9700\u8981\u624b\u52a8\u6dfb\u52a0\u8fd9\u4e9b\u5e93\u6587\u4ef6\u5230\u9879\u76ee\u7684\u4f9d\u8d56\u9879\u4e2d\u3002\u4ee5\u4e0b\u662f\u5177\u4f53\u6b65\u9aa4\uff1a</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/#1project-structure","title":"\u6b65\u9aa41\uff1a\u6253\u5f00\u201cProject Structure\u201d\u5bf9\u8bdd\u6846","text":"<ol> <li>\u4f7f\u7528\u5feb\u6377\u952e <code>Ctrl+Alt+Shift+S</code> (Windows/Linux) \u6216 <code>Command+;</code> (macOS)\u3002</li> <li>\u5728\u83dc\u5355\u680f\u4e2d\u9009\u62e9 <code>File &gt; Project Structure</code>\u3002</li> </ol>"},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/#2_1","title":"\u6b65\u9aa42\uff1a\u6dfb\u52a0\u5e93","text":"<ol> <li>\u5728\u201cProject Structure\u201d\u5bf9\u8bdd\u6846\u4e2d\uff0c\u9009\u62e9\u5de6\u4fa7\u7684 <code>Libraries</code>\u3002</li> <li>\u70b9\u51fb <code>+</code> \u53f7\u6309\u94ae\uff0c\u9009\u62e9 <code>Java</code>\u3002</li> <li>\u6d4f\u89c8\u5230\u9879\u76ee\u7684 <code>lib</code> \u6587\u4ef6\u5939\uff0c\u9009\u62e9\u6240\u6709\u9700\u8981\u6dfb\u52a0\u7684 <code>.jar</code> \u6587\u4ef6\uff0c\u5e76\u70b9\u51fb <code>OK</code>\u3002</li> </ol>"},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/#3_1","title":"\u6b65\u9aa43\uff1a\u5c06\u5e93\u6dfb\u52a0\u5230\u6a21\u5757","text":"<ol> <li>\u5728\u201cProject Structure\u201d\u5bf9\u8bdd\u6846\u4e2d\uff0c\u9009\u62e9\u5de6\u4fa7\u7684 <code>Modules</code>\u3002</li> <li>\u9009\u62e9\u4f60\u9700\u8981\u6dfb\u52a0\u5e93\u7684\u6a21\u5757\u3002</li> <li>\u9009\u62e9\u9876\u90e8\u7684 <code>Dependencies</code> \u9009\u9879\u5361\u3002</li> <li>\u70b9\u51fb <code>+</code> \u53f7\u6309\u94ae\uff0c\u9009\u62e9 <code>Library</code>\uff0c\u7136\u540e\u9009\u62e9\u521a\u521a\u6dfb\u52a0\u7684\u5e93\u3002</li> </ol>"},{"location":"Programming_Java/SDE_IDE_IDEA_1_SetUp/#4_1","title":"\u6b65\u9aa44\uff1a\u5e94\u7528\u66f4\u6539","text":"<ol> <li>\u70b9\u51fb <code>Apply</code> \u548c <code>OK</code> \u4fdd\u5b58\u66f4\u6539\u3002</li> </ol>"},{"location":"Programming_Java/SDE_IDE_IDEA_2_LoadLibJars/","title":"Load Library Jar Files for IDEA project","text":""},{"location":"Programming_Java/SDE_IDE_IDEA_2_LoadLibJars/#junit","title":"\u4f8b\uff1a\u914d\u7f6eJUnit","text":"<p>\u6d4b\u8bd5\u662f\u9a8c\u8bc1\u4ee3\u7801\u662f\u5426\u6309\u9884\u671f\u5de5\u4f5c\u7684\u8fc7\u7a0b\u3002\u901a\u8fc7\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u786e\u4fdd\u4f60\u7684\u7a0b\u5e8f\u5728\u5404\u79cd\u60c5\u51b5\u4e0b\u90fd\u80fd\u6b63\u5e38\u8fd0\u884c\u3002\u6d4b\u8bd5\u901a\u5e38\u5206\u4e3a\u5355\u5143\u6d4b\u8bd5\uff08\u6d4b\u8bd5\u5355\u4e2a\u51fd\u6570\u6216\u7c7b\u7684\u529f\u80fd\uff09\u548c\u96c6\u6210\u6d4b\u8bd5\uff08\u6d4b\u8bd5\u591a\u4e2a\u7ec4\u4ef6\u7684\u534f\u540c\u5de5\u4f5c\uff09\u3002</p> <p>\u4f7f\u7528IDEA\u8fdb\u884cTest\uff1a</p> <p>JUnit\u662f\u4e00\u4e2a\u7528\u4e8e Java \u7f16\u7a0b\u8bed\u8a00\u7684\u6d4b\u8bd5\u6846\u67b6\uff0c\u5141\u8bb8\u4f60\u7f16\u5199\u548c\u8fd0\u884c\u91cd\u590d\u7684\u6d4b\u8bd5\u3002</p> <p>\u67e5\u770b\u662f\u5426\u5b89\u88c5\uff1a \u5982\u679c\u4f60\u80fd\u7f16\u5199\u548c\u8fd0\u884c @Test \u6ce8\u89e3\u7684\u6d4b\u8bd5\u7c7b\uff0c\u8bf4\u660e\u9879\u76ee\u5df2\u7ecf\u914d\u7f6e\u4e86 JUnit\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u5b89\u88c5\uff1a\uff08\u4ec5\u4f7f\u7528IDEA\uff0c\u4e0d\u6d89\u53ca\u7cfb\u7edf\u73af\u5883\u914d\u7f6e\u7684\u60c5\u51b5\uff09 1\u3001\u4e0b\u8f7dJUnit\u7684\u76f8\u5173jar\uff08\u505aUCB\u7684\u4f5c\u4e1a\u7684\u8bdd\u53ef\u4ee5\u7528UCB\u6253\u5305\u597d\u7684lib\u5e93\uff09\uff0c\u5c06\u4e4b\u653e\u5728project\u6839\u76ee\u5f55\u7684lib\u6587\u4ef6\u5939\u91cc\u3002 2\u3001\u5728 IntelliJ IDEA \u4e2d\u914d\u7f6e JAR \u6587\u4ef6\uff1a\u5728IDEA\u4e2d\uff0c\u53f3\u952e\u70b9\u51fb\u9879\u76ee\u540d\u79f0\uff0c\u9009\u62e9 \u201cOpen Module Settings\u201d\uff0c\u5728\u5de6\u4fa7\u9009\u62e9 \u201cModules\u201d\uff0c\u7136\u540e\u9009\u62e9 Dependencies \u9009\u9879\u5361\uff0c\u70b9\u51fb + \u53f7\uff0c\u9009\u62e9 JARs or directories\uff0c\u7136\u540e\u6279\u91cf\u9009\u62e9\u521a\u624d\u653e\u5728lib\u6587\u4ef6\u5939\u4e0b\u7684jar\u6587\u4ef6\uff0c\u6700\u540e\u70b9\u51fbok\u5373\u53ef\u5b8c\u6210\u5bfc\u5165\u3002 3\u3001\u5728IDEA\u8bbe\u7f6e\u4e2d\u5bfc\u5165library\uff08\u76f4\u63a5\u9009\u62e9lib\u6587\u4ef6\u5939\uff09</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_3_Build_JAR/","title":"SDE_IDE_IDEA_3_Build_JAR.md","text":"<p>\u5728 IntelliJ IDEA \u4e2d\u751f\u6210\u53ef\u6267\u884c\u7684 Java \u6587\u4ef6\uff08\u901a\u5e38\u662f JAR \u6587\u4ef6\uff09\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5305\u542b\u7f16\u8bd1\u4ee3\u7801\u3001\u6253\u5305 JAR \u6587\u4ef6\uff0c\u5e76\u786e\u4fdd\u5b83\u5305\u542b\u4e00\u4e2a\u6e05\u5355\u6587\u4ef6\uff0c\u4ee5\u6307\u5b9a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff08\u4e3b\u7c7b\uff09\u3002</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_3_Build_JAR/#_1","title":"\u7b2c\u4e00\u6b65\uff1a\u7f16\u8bd1\u9879\u76ee","text":"<ol> <li>\u6253\u5f00 IntelliJ IDEA \u5e76\u6253\u5f00\u4f60\u7684\u9879\u76ee\u3002</li> <li>\u786e\u4fdd\u9879\u76ee\u80fd\u6210\u529f\u7f16\u8bd1\uff1a</li> <li>\u5728\u83dc\u5355\u680f\u4e2d\uff0c\u9009\u62e9 <code>Build &gt; Build Project</code>\uff08\u5feb\u6377\u952e <code>Command + F9</code>\uff09\u3002</li> <li>\u5982\u679c\u7f16\u8bd1\u6210\u529f\uff0c\u4f60\u4f1a\u5728 IDE \u7684\u5e95\u90e8\u770b\u5230 \"Build completed successfully\"\u3002</li> </ol>"},{"location":"Programming_Java/SDE_IDE_IDEA_3_Build_JAR/#artifacts","title":"\u7b2c\u4e8c\u6b65\uff1a\u914d\u7f6e Artifacts","text":"<ol> <li>\u6253\u5f00 Project Structure \u7a97\u53e3\uff1a</li> <li>\u5728\u83dc\u5355\u680f\u4e2d\uff0c\u9009\u62e9 <code>File &gt; Project Structure</code>\uff08\u5feb\u6377\u952e <code>Command + ;</code>\uff09\u3002</li> <li>\u914d\u7f6e Artifacts\uff1a</li> <li>\u5728 Project Structure \u7a97\u53e3\u4e2d\uff0c\u9009\u62e9\u5de6\u4fa7\u7684 <code>Artifacts</code>\u3002</li> <li>\u70b9\u51fb <code>+</code> \u6309\u94ae\uff0c\u7136\u540e\u9009\u62e9 <code>JAR &gt; From modules with dependencies...</code>\u3002</li> <li>\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\uff0c\u9009\u62e9\u4f60\u7684\u4e3b\u6a21\u5757\uff0c\u7136\u540e\u9009\u62e9\u4e3b\u7c7b\uff08\u5305\u542b <code>main</code> \u65b9\u6cd5\u7684\u7c7b\uff09\u3002</li> <li>\u786e\u4fdd\u9009\u4e2d \"Extract to the target JAR\" \u9009\u9879\uff0c\u7136\u540e\u70b9\u51fb <code>OK</code>\u3002</li> <li>\u786e\u8ba4\u914d\u7f6e\uff1a</li> <li>\u4f60\u4f1a\u770b\u5230\u4e00\u4e2a\u65b0\u7684 Artifact \u88ab\u6dfb\u52a0\u5230\u4e86\u5217\u8868\u4e2d\u3002\u4f60\u53ef\u4ee5\u53cc\u51fb\u5b83\u4ee5\u786e\u8ba4\u8f93\u51fa\u76ee\u5f55\u548c\u5305\u542b\u7684\u6587\u4ef6\u3002</li> </ol>"},{"location":"Programming_Java/SDE_IDE_IDEA_3_Build_JAR/#jar","title":"\u7b2c\u4e09\u6b65\uff1a\u751f\u6210 JAR \u6587\u4ef6","text":"<ol> <li>\u751f\u6210 JAR \u6587\u4ef6\uff1a</li> <li>\u5728\u83dc\u5355\u680f\u4e2d\uff0c\u9009\u62e9 <code>Build &gt; Build Artifacts</code>\uff0c\u7136\u540e\u9009\u62e9\u521a\u624d\u914d\u7f6e\u7684 Artifact\uff0c\u5e76\u9009\u62e9 <code>Build</code>\u3002</li> <li>IDEA \u4f1a\u751f\u6210 JAR \u6587\u4ef6\uff0c\u901a\u5e38\u5728 <code>out/artifacts/&lt;artifact_name&gt;/</code> \u76ee\u5f55\u4e2d\u3002</li> </ol>"},{"location":"Programming_Java/SDE_IDE_IDEA_3_Build_JAR/#jar_1","title":"\u7b2c\u56db\u6b65\uff1a\u8fd0\u884c JAR \u6587\u4ef6","text":"<ol> <li>\u6253\u5f00\u7ec8\u7aef\uff1a</li> <li>\u5728\u4f60\u7684 Mac \u4e0a\uff0c\u6253\u5f00 <code>\u7ec8\u7aef</code> \u5e94\u7528\u3002</li> <li>\u5bfc\u822a\u5230 JAR \u6587\u4ef6\u6240\u5728\u76ee\u5f55\uff1a</li> <li>\u4f7f\u7528 <code>cd</code> \u547d\u4ee4\u5bfc\u822a\u5230\u751f\u6210\u7684 JAR \u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\uff0c\u4f8b\u5982\uff1a      <code>bash      cd path/to/your/project/out/artifacts/your_artifact_name/</code></li> <li>\u8fd0\u884c JAR \u6587\u4ef6\uff1a</li> <li>\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c JAR \u6587\u4ef6\uff1a      <code>bash      java -jar your_artifact_name.jar</code></li> </ol>"},{"location":"Programming_Java/SDE_IDE_IDEA_3_Build_JAR/#_2","title":"\u793a\u4f8b","text":"<p>\u5047\u8bbe\u4f60\u7684\u9879\u76ee\u540d\u4e3a <code>MyProject</code>\uff0c\u4e3b\u7c7b\u4e3a <code>com.example.Main</code>\uff0c\u751f\u6210\u7684 JAR \u6587\u4ef6\u540d\u4e3a <code>MyProject.jar</code>\u3002\u4f60\u7684\u547d\u4ee4\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <p>```bash cd /Users/yourusername/IdeaProjects/MyProject/out/artifacts/MyProject/ java -jar MyProject.jar</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_4_SwitchToMaven/","title":"SDE_IDE_IDEA_4_SwitchToMaven.md","text":"<p>\u5728IDEA\u4e2d\u624b\u52a8\u5c06\u9879\u76ee\u8f6c\u6362\u4e3aMaven\u9879\u76ee\uff1a</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_4_SwitchToMaven/#1-pomxml","title":"\u6b65\u9aa4 1: \u6dfb\u52a0pom.xml\u6587\u4ef6","text":"<p>\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u624b\u52a8\u521b\u5efa\u4e00\u4e2a\u540d\u4e3apom.xml\u7684\u6587\u4ef6\u3002 \u5c06\u4ee5\u4e0b\u57fa\u672c\u5185\u5bb9\u7c98\u8d34\u5230pom.xml\u6587\u4ef6\u4e2d\uff1a</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.example&lt;/groupId&gt;\n    &lt;artifactId&gt;my-app&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;jar&lt;/packaging&gt;\n\n    &lt;name&gt;My Application&lt;/name&gt;\n    &lt;url&gt;http://www.example.com&lt;/url&gt;\n\n    &lt;properties&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u6dfb\u52a0\u4f9d\u8d56 --&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;!-- \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u6dfb\u52a0\u63d2\u4ef6 --&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"Programming_Java/SDE_IDE_IDEA_4_SwitchToMaven/#2-maven","title":"\u6b65\u9aa4 2: \u5bfc\u5165Maven\u9879\u76ee","text":"<p>\u5728IntelliJ IDEA\u4e2d\uff0c\u9009\u62e9File -&gt; Open\u3002 \u5bfc\u822a\u5230\u4f60\u7684\u9879\u76ee\u6839\u76ee\u5f55\uff0c\u9009\u62e9\u521a\u521a\u521b\u5efa\u7684pom.xml\u6587\u4ef6\uff0c\u7136\u540e\u70b9\u51fbOpen\u3002 IDEA\u4f1a\u63d0\u793a\u4f60\u8fd9\u662f\u4e00\u4e2aMaven\u9879\u76ee\uff0c\u5e76\u4f1a\u63d0\u4f9b\u5bfc\u5165\u9009\u9879\u3002\u70b9\u51fbOpen as Project\u3002</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_4_SwitchToMaven/#3","title":"\u6b65\u9aa4 3: \u914d\u7f6e\u9879\u76ee","text":"<p>IDEA\u4f1a\u81ea\u52a8\u8bc6\u522b\u5e76\u4e0b\u8f7d\u9879\u76ee\u4e2d\u7684\u4f9d\u8d56\u548c\u63d2\u4ef6\u3002 \u5728\u53f3\u4fa7\u7684Maven\u5de5\u5177\u7a97\u53e3\u4e2d\uff0c\u70b9\u51fb\u5237\u65b0\u6309\u94ae\u4ee5\u786e\u4fdd\u6240\u6709\u4f9d\u8d56\u548c\u63d2\u4ef6\u90fd\u5df2\u6b63\u786e\u4e0b\u8f7d\u548c\u914d\u7f6e\u3002</p>"},{"location":"Programming_Java/SDE_IDE_IDEA_4_SwitchToMaven/#4","title":"\u6b65\u9aa4 4: \u6dfb\u52a0\u4f9d\u8d56\u548c\u63d2\u4ef6","text":"<p>\u4f60\u53ef\u4ee5\u6839\u636e\u9879\u76ee\u9700\u6c42\u5728pom.xml\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4f9d\u8d56\u548c\u63d2\u4ef6\u3002\u4f8b\u5982\uff1a</p> <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;\n        &lt;version&gt;5.3.8&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;junit&lt;/groupId&gt;\n        &lt;artifactId&gt;junit&lt;/artifactId&gt;\n        &lt;version&gt;4.13.2&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n            &lt;version&gt;3.8.1&lt;/version&gt;\n            &lt;configuration&gt;\n                &lt;source&gt;1.8&lt;/source&gt;\n                &lt;target&gt;1.8&lt;/target&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>"},{"location":"Programming_Java/SDE_IDE_IDEA_5_Plugins/","title":"SDE_IDE_IDEA_5_Plugins.md","text":""},{"location":"Programming_Java/SDE_IDE_IDEA_5_Plugins/#checkstyle","title":"Checkstyle","text":""},{"location":"Programming_Java/SDE_ImproveCoding_Enum/","title":"SDE_ImproveCoding_Enum.md","text":"<p>\u5728UCB CS61B Project0 2048\u4e2d\u63d0\u5230\u7684\u4e00\u4e2a\u975e\u5e38\u5de7\u5999\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u91cd\u590d\u95ee\u9898</p>"},{"location":"Programming_Java/SDE_ImproveCoding_Helper-Method/","title":"SDE_ImproveCoding_Helper-Method.md","text":"<p>Using helper method to solve complicated problems.</p>"},{"location":"Programming_Python/02_Installation/","title":"02_Installation.md","text":"<p>\u5b89\u88c5python3 and pip3, make sure\u914d\u7f6e\u5168\u5c40\u73af\u5883\u53d8\u91cf\u4ee5\u4f7f pip3 \u548c python3 \u5728\u5168\u5c40\u76ee\u5f55\u4e0b</p> <p>\u786e\u4fdd Python \u548c pip \u5b89\u88c5\u5728\u5168\u5c40\u76ee\u5f55\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5224\u65ad\u662f\u5426\u5728\u4e00\u4e2a\u76ee\u5f55\uff1a</p> <pre><code>which python3\nwhich pip3\n</code></pre> <p>\u901a\u8fc7 Homebrew \u5b89\u88c5 Python\uff0c\u53ef\u4ee5\u786e\u4fdd <code>python3</code> \u548c <code>pip3</code> \u5728\u5168\u5c40\u76ee\u5f55\u4e2d\uff1a</p> <pre><code>brew install python3\n</code></pre> <p>\u5982\u679c\u60a8\u5df2\u7ecf\u6709\u5176\u4ed6\u8def\u5f84\u7684 Python \u548c pip3\uff0c\u53ef\u4ee5\u624b\u52a8\u521b\u5efa\u7b26\u53f7\u94fe\u63a5\u5230\u5168\u5c40\u76ee\u5f55\uff1a</p> <pre><code>sudo ln -s /usr/local/bin/python3 /usr/bin/python3\nsudo ln -s /usr/local/bin/pip3 /usr/bin/pip3\n</code></pre> <p>\u68c0\u67e5\u8def\u5f84\u914d\u7f6e\uff0c\u786e\u4fdd\u7cfb\u7edf\u7684 PATH \u73af\u5883\u53d8\u91cf\u5305\u542b\u4e86\u5168\u5c40\u76ee\u5f55\u8def\u5f84 /usr/local/bin \u548c /usr/bin\uff1a</p> <pre><code>export PATH=\"/usr/local/bin:/usr/bin:$PATH\"\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5c06\u4e0a\u8ff0\u547d\u4ee4\u6dfb\u52a0\u5230\u60a8\u7684 shell \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6bd4\u5982 ~/.bashrc \u6216 ~/.zshrc\uff08\u6839\u636e\u60a8\u4f7f\u7528\u7684 shell \u8fdb\u884c\u9009\u62e9\uff09\u3002\u5bf9\u4e8e bash\uff1a</p> <pre><code>echo 'export PATH=\"/usr/local/bin:/usr/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <p>\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u9a8c\u8bc1 python3 \u548c pip3 \u7684\u914d\u7f6e\u662f\u5426\u6b63\u786e\uff1a</p> <pre><code>python3 --version\npip3 --version\n</code></pre>"},{"location":"SDPAP/Automated%20Production%20Era/","title":"Automated Production Era.md","text":"<p>Automated Production Era \u5168\u81ea\u52a8\u5316\u751f\u4ea7\u65f6\u4ee3\uff1a</p> <p>\u673a\u5668\u4eba\u3001\u4eba\u5de5\u667a\u80fd\u5c06\u53d6\u4ee3\u5ec9\u4ef7\u52b3\u52a8\u529b\uff0c\u540e\u53d1\u4f18\u52bf\u3001\u4eba\u53e3\u7ea2\u5229\u5c06\u4e0d\u590d\u5b58\u5728\uff1b\u843d\u540e\u7684\u56fd\u5bb6\u5c06\u5f7b\u5e95\u5931\u53bb\u8fdb\u6b65\u7684\u53ef\u80fd\u6027\u3002</p> <p>\u4eba\u7c7b\u793e\u4f1a\u751f\u4ea7\u5173\u7cfb\u3001\u52b3\u8d44\u5173\u7cfb\u3001\u52b3\u52a8\u529b\u548c\u5e02\u573a\u7684\u5173\u7cfb\u90fd\u5c06\u88ab\u5f7b\u5e95\u98a0\u8986\u3002</p> <p>\u5982\u679c\u79c1\u6709\u5236\u4ecd\u7136\u5b58\u5728\uff0c\u90a3\u4e48\u81ea\u52a8\u5316\u751f\u4ea7\u5de5\u5382\u7684\u6210\u679c\u5c06\u5c5e\u4e8e\u8c01\uff1f\u8d22\u5bcc\u5206\u5316\u5c06\u8fdb\u4e00\u6b65\u6269\u5927\u3002\u62e5\u6709\u81ea\u52a8\u5316\u751f\u4ea7\u80fd\u529b\u7684\u4eba\uff0c\u5c06\u5728\u81ea\u52a8\u5316\u751f\u4ea7\u7684\u9053\u8def\u4e0a\u6210\u4e3a\u5784\u65ad\u8005\u3002\u5728\u5206\u5316\u7684\u521d\u671f\uff0cSDPAP\u5982\u679c\u4e0d\u80fd\u62a2\u5360\u610f\u8bc6\u5f62\u6001\u9ad8\u5730\uff0c\u4eba\u7c7b\u793e\u4f1a\u5c06\u6ed1\u5411\u8d5b\u535a\u670b\u514b\u65f6\u4ee3\u3002\u5c4a\u65f6\uff0c\u62e5\u6709\u8d85\u5927\u89c4\u6a21\u751f\u4ea7\u80fd\u529b\u7684\u516c\u53f8\u5c06\u6210\u4e3a\u65b0\u65f6\u4ee3\u7684\u4e1c\u5370\u5ea6\u516c\u53f8\uff0c\u5728\u5b9e\u8d28\u4e0a\u6b96\u6c11\u5176\u4ed6\u7f3a\u4e4f\u81ea\u52a8\u5316\u751f\u4ea7\u80fd\u529b\u7684\u56fd\u5bb6\u548c\u5730\u533a\u3002</p> <p>\u81ea\u52a8\u5316\u751f\u4ea7\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u4eba\u7c7b\u5bf9\u4e8e\u9ad8\u751f\u4ea7\u529b\u7684\u8ffd\u6c42\u662f\u4e0d\u53ef\u9006\u8f6c\u7684\uff0c\u5982\u679cSDPAP\u4e0d\u80fd\u5b9e\u73b0\uff0c\u90a3\u4e48\u672a\u6765\u7684\u53d1\u5c55\u8f68\u8ff9\u5c06\u4f1a\u662f\uff1a</p> <p>1\u3001\u673a\u5668\u4eba\u62e5\u6709\u4e0d\u53ef\u6bd4\u62df\u7684\u4f18\u52bf\uff1a\u751f\u4ea7\u7cbe\u51c6\u3001\u4e0d\u77e5\u75b2\u5026\u3002\u968f\u7740\u65f6\u95f4\u7684\u53d1\u5c55\uff0c\u673a\u5668\u4eba\u66ff\u4ee3\u7684\u5de5\u79cd\u5c06\u8d8a\u6765\u8d8a\u591a\uff0c\u5931\u4e1a\u4eba\u53e3\u4e0d\u65ad\u589e\u52a0\u3002</p> <p>2\u3001\u4e00\u65e6\u6536\u56de\u521d\u671f\u6210\u672c\uff0c\u673a\u5668\u4eba\u4eec\u5c06\u50cf\u65e0\u601d\u60f3\u80fd\u529b\u7684\u5974\u96b6\u4eec\u90a3\u6837\u4e0d\u77e5\u75b2\u5026\u5730\u5de5\u4f5c\uff0c\u5e76\u8ba9\u5de5\u5382\u8fdb\u5165\u6301\u7eed\u4ea7\u80fd\u8fc7\u5269\u7684\u9636\u6bb5</p> <p>3\u3001\u5f53\u4ea7\u80fd\u8fc7\u5269\u9700\u8981\u503e\u9500\u5546\u54c1\u65f6\uff0c\u90a3\u4e9b\u6ca1\u6709\u81ea\u52a8\u5316\u751f\u4ea7\u80fd\u529b\u7684\u5730\u533a\u5c06\u88ab\u8feb\u6253\u5f00\u5e02\u573a\uff0c\u5f53\u5730\u7684\u6c11\u4f17\u5c06\u9677\u5165\u8d2b\u56f0</p> <p>4\u3001\u4e00\u65e6\u5931\u4e1a\u5de5\u4eba\u3001\u5927\u591a\u6570\u843d\u540e\u5730\u533a\u7684\u4eba\u5931\u53bb\u52b3\u52a8\u7684\u53ef\u80fd\u6027\uff0c\u4ed6\u4eec\u7684\u52b3\u52a8\u4ef7\u503c\u5c06\u5f52\u96f6\uff0c\u5e76\u6700\u7ec8\u6ca6\u4e3a\u201c\u73a9\u7269\u201d\u3001\u201c\u4ec6\u4eba\u201d\u7b49\u89d2\u8272\u3002</p> <p>5\u3001\u4eba\u4f53\u4e70\u5356\u3001\u5974\u96b6\u5236\u5ea6\u5c06\u91cd\u56de\u4eba\u7c7b\u793e\u4f1a\uff0c\u6b64\u65f6\u5974\u96b6\u4eec\u5c06\u4ece\u4e8b\u670d\u4f8d\u6027\u5de5\u4f5c\u800c\u975e\u52b3\u52a8\u6027\u5de5\u4f5c\uff0c\u56e0\u4e3a\u52b3\u52a8\u5c06\u7531\u673a\u5668\u4eba\u5b8c\u6210\uff1b\u5927\u591a\u6570\u4eba\u7684\u52b3\u52a8\u4ef7\u503c\u5c06\u4ec5\u5269\u60c5\u7eea\u4ef7\u503c\u548c\u8d2c\u4f4e\u4ef7\u503c\uff0c\u6ca6\u4e3a\u8089\u4f53\u73a9\u5177\u3001\u63d0\u4f9b\u60c5\u7eea\u4ef7\u503c\u7684\u4ec6\u4eba\u7b49\u3002</p> <p>6\u3001\u968f\u7740\u751f\u7269\u79d1\u6280\u7684\u8fdb\u4e00\u6b65\u53d1\u5c55\uff0c\u5bcc\u4eba\u5c06\u5728\u540e\u4ee3\u57fa\u56e0\u9009\u62e9\u4e0a\u62e5\u6709\u66f4\u5927\u7684\u8bdd\u8bed\u6743\uff0c\u5bcc\u4eba\u7684\u540e\u4ee3\u5c06\u517c\u5177\u9ad8\u667a\u5546\u548c\u597d\u8eab\u4f53\uff0c\u4ece\u800c\u8fdb\u4e00\u6b65\u6269\u5927\u8d2b\u5bcc\u5dee\u8ddd\uff0c\u8ba9\u8d2b\u5bcc\u5dee\u8ddd\u4ece\u9636\u7ea7\u5dee\u8ddd\u4e0a\u5347\u5230\u7269\u79cd\u5dee\u8ddd\u3002</p> <p>\u7136\u800c\uff0c\u5982\u679c\u80fd\u5728\u5168\u81ea\u52a8\u5316\u751f\u4ea7\u521d\u671f\u5c31\u53d1\u5c55SDPAP\uff0c\u90a3\u4e48\u672a\u6765\u5c06\u662f\uff1a</p> <p>1\u3001\u673a\u5668\u4eba\u8fdb\u884c\u57fa\u7840\u519c\u4e1a\u3001\u5de5\u4e1a\u52b3\u52a8\uff0c\u4ea7\u51fa\u5927\u91cf\u519c\u4ea7\u54c1\u3001\u5de5\u4e1a\u4ea7\u54c1\uff0c\u8fd9\u4e9b\u4ea7\u54c1\u53ef\u4ee5\u5206\u914d\u7ed9\u6240\u6709\u7684\u6c11\u4f17\uff1b\u6216\u8005\u901a\u8fc7\u5168\u6c11\u53d1\u85aa\u7684\u65b9\u5f0f\uff0c\u8ba9\u7ecf\u6d4e\u6301\u7eed\u6d41\u901a\uff0c\u5e76\u53ef\u4ee5\u907f\u514d\u4ea7\u80fd\u8fc7\u5269\u7684\u95ee\u9898\u3002</p> <p>2\u3001\u8d2b\u56f0\u4eba\u53e3\u7684\u751f\u6d3b\u6c34\u5e73\u4e0a\u5347\u5230\u4eca\u5929\u7684\u4e2d\u95f4\u9636\u5c42\uff0c\u6240\u6709\u4eba\u90fd\u80fd\u5f97\u5230\u57fa\u672c\u7684\u751f\u6d3b\u4fdd\u969c\u3001\u4f4f\u623f\u4fdd\u969c\u3002</p> <p>3\u3001\u6709\u95f2\u9636\u5c42\u7a7a\u524d\u58ee\u5927\uff0c\u6587\u5a31\u4ea7\u4e1a\u3001\u79d1\u5b66\u53d1\u5c55\u52a0\u901f\u8fdb\u6b65\u3002</p> <p>4\u3001\u968f\u7740\u79d1\u5b66\u6280\u672f\u7684\u8fdb\u4e00\u6b65\u53d1\u5c55\uff0c\u5168\u81ea\u52a8\u5316\u751f\u4ea7\u7684\u89c4\u6a21\u8fdb\u4e00\u6b65\u52a0\u6df1\uff0c\u4eba\u4eec\u7684\u751f\u6d3b\u6c34\u5e73\u4e5f\u4e00\u5e76\u63d0\u5347\u3002\u793e\u4f1a\u5c06\u9010\u6b65\u8d8b\u8fd1\u4e8e\u4e00\u4e2a\u6241\u5e73\u5316\u7684\u5168\u6c11\u7686\u5bcc\u88d5\u7684\u72b6\u6001\uff0c\u4eba\u4eec\u4e0d\u518d\u5c06\u8d22\u5bcc\u89c6\u4e3a\u4f18\u8d8a\u611f\u7684\u6765\u6e90\uff0c\u800c\u5c06\u667a\u6167\u3001\u79d1\u5b66\u7814\u7a76\u7b49\u89c6\u4e3a\u4f18\u8d8a\u611f\u7684\u6765\u6e90\u3002\u65b0\u7684\u793e\u4f1a\u8bc4\u4ef7\u4f53\u7cfb\u9010\u6e10\u8bde\u751f\uff0c\u79d1\u5b66\u516c\u793e\u3001\u79d1\u5b66\u793e\u56e2\u3001\u751a\u81f3\u79d1\u5b66\u56fd\u5ea6\u5c06\u4f1a\u8bde\u751f\uff0c\u7edd\u5927\u591a\u6570\u4eba\u90fd\u5c06\u4ece\u4e8b\u7814\u7a76\u6027\u5de5\u4f5c\u800c\u975e\u52b3\u52a8\u6027\u5de5\u4f5c\u3002</p>"},{"location":"SDPAP/SDPAP/","title":"SDPAP.md","text":"<p>SDPAP, short for Social Democracy Progressivism with Automated Production, is an idealized form of social organization that I have conceptualized. Such kind of society appears widely in my imagination of the future.</p> <p>SDPAP is a theory and socioeconomic system that combines highly automated production methods with the principles of social democracy. This concept involves several key elements:</p> <p>Automated Production: Automation Technology: Utilizing robots, artificial intelligence, and other advanced technologies to minimize human labor in the production process. Automation can significantly increase production efficiency, reduce costs, and improve product quality. Productivity Enhancement: Fully automated production can dramatically boost productivity, enabling society to produce a wide range of goods and services more efficiently.</p> <p>Social Democracy: Economic Equality: Social democracy emphasizes achieving economic equality through government intervention and social policies, ensuring everyone has access to basic life necessities and welfare. Public Services: Social democratic states typically provide extensive public services, including healthcare, education, housing, and social welfare, to enhance citizens' quality of life. Democratic Participation: Social democracy values citizens' democratic participation, advocating for the formulation and implementation of public policies through democratic processes.</p> <p>Integration of Automated Production and Social Democracy: Wealth Distribution: In a society with fully automated production, overall wealth increases due to enhanced productivity. Social democratic policies can ensure this wealth is distributed fairly, reducing the gap between rich and poor. Work and Income: As automation becomes widespread, traditional jobs decrease, necessitating a redefinition of work and income sources. Social democracy can provide basic income or other forms of social security to ensure everyone has the essentials for living. Work-Life Balance: Automated production can reduce working hours, allowing people more free time for leisure, learning, and personal development, thereby improving the quality of life.</p> <p>Implementation Pathways: Policy Support: Governments need to formulate and implement policies that support automated production and social democracy, including investing in technology research and development, training workers to adapt to new technologies, and establishing robust social security systems. Education and Training: To adapt to an automated society, the education system needs reform to provide relevant skills training and lifelong learning opportunities, enabling workers to adapt to new technologies and job forms. International Cooperation: The realization of automated production and social democracy requires international cooperation, sharing technology and experiences, and jointly addressing global issues such as climate change and resource allocation.</p> <p>Progressivism: Progressivism is a social and political movement aimed at achieving societal improvement and advancement through social reforms and innovations. The core principles of progressivism include: Social Justice: Progressives emphasize fairness and justice, striving to eliminate inequalities in society, including those related to race, gender, economics, and education. Economic Reform: Promoting economic policy reforms to ensure fair distribution of wealth and resources, reducing the gap between the rich and the poor, and supporting workers' rights and better working conditions. Environmental Protection: Addressing environmental issues, advocating for sustainable development, and pushing for policies to combat climate change and protect natural resources. Technological Innovation: Encouraging technological progress and innovation, believing that technological advancements can bring significant improvements to society, and supporting scientific research and education. Democratic Participation: Advocating for broad citizen participation and democratic decision-making, believing that citizens should have more voice and involvement in political and social affairs. Social Welfare: Supporting the establishment and maintenance of a robust social security system, including healthcare, education, housing, and social welfare, to improve the quality of life for all members of society.</p>"},{"location":"Software%20Engineering/2_VersionControl_Git/1_Introduction/","title":"1_Introduction.md","text":""},{"location":"Software%20Engineering/2_VersionControl_Git/1_Introduction/#2-version-control","title":"2. Version Control","text":""},{"location":"Software%20Engineering/2_VersionControl_Git/1_Introduction/#git","title":"Git","text":"<ul> <li>What is Git?</li> <li>Basic Concepts of Git</li> <li>Repository</li> <li>Branch</li> <li>Commit</li> <li>Staging Area</li> <li>Installation and Configuration</li> <li>Common Commands</li> <li>Initialize Repository (<code>git init</code>)</li> <li>Clone Repository (<code>git clone</code>)</li> <li>Add Files to Staging Area (<code>git add</code>)</li> <li>Commit Changes (<code>git commit</code>)</li> <li>Check Status (<code>git status</code>)</li> <li>View Logs (<code>git log</code>)</li> <li>Push to Remote Repository (<code>git push</code>)</li> <li>Pull from Remote Repository (<code>git pull</code>)</li> <li>Create and Switch Branches (<code>git branch</code> and <code>git checkout</code>)</li> <li>Merge Branches (<code>git merge</code>)</li> <li>Advanced Usage</li> <li>Resolving Conflicts</li> <li>Rebase (<code>git rebase</code>)</li> <li>Tag Management (<code>git tag</code>)</li> <li>Submodules (<code>git submodule</code>)</li> <li>Workflows</li> <li>Gitflow Workflow</li> <li>GitHub Flow</li> <li>GitLab Flow</li> <li>Common Issues and Solutions</li> <li>How to Revert Changes</li> <li>How to Restore Files</li> <li>How to Resolve Conflicts</li> <li>Integration and Tools</li> <li>Git in Integrated Development Environments (IDEs)</li> <li>Graphical Interface Tools (e.g., Sourcetree, GitKraken)</li> <li>Continuous Integration (CI) with Git</li> </ul>"},{"location":"Software%20Engineering/2_VersionControl_Git/1_Introduction/#other-version-control-systems","title":"Other Version Control Systems","text":"<ul> <li>SVN</li> <li>Mercurial</li> <li>Perforce</li> </ul>"},{"location":"Software%20Engineering/4_ProjectManagement/4-task%20management%20tools/","title":"4-task management tools.md","text":"<p>Jira   - Trello   - Asana</p>"},{"location":"Software%20Engineering/5_CollaborativeDevelopment/intro/","title":"intro.md","text":"<ul> <li>Code Review</li> <li>Pull Request Workflow</li> <li>Continuous Integration and Deployment (CI/CD)</li> </ul>"},{"location":"Software%20Engineering/6_References/intro/","title":"intro.md","text":"<ul> <li>Official Documentation Links</li> <li>Common Resources and Tutorials</li> <li>Community and Support</li> </ul>"},{"location":"Tutorial/IDE_VSCode/","title":"IDE_VSCode.md","text":""},{"location":"Tutorial/IDE_VSCode/#terminal","title":"Terminal","text":"<p>code xxx   | \u521b\u5efa\u65b0\u6587\u4ef6 touch xxx  | \u521b\u5efa\u65b0\u6587\u4ef6\uff08\u4e0d\u6253\u5f00\uff09 cd ..      | \u8fd4\u56de\u4e0a\u4e00\u7ea7 ls         | \u67e5\u770b\u6587\u4ef6\u5217\u8868 mkdir xxx  | \u521b\u5efa\u76ee\u5f55 mkdir -p xxx/xxx | \u521b\u5efa\u76ee\u5f55\uff08\u81ea\u52a8\u8865\u5168\u4e0d\u5b58\u5728\u7684\u4e2d\u95f4\u76ee\u5f55\uff09</p>"},{"location":"Tutorial/IDE_VSCode/#vscodec","title":"\u5728vscode\u4e2d\u8fd0\u884cC\u6587\u4ef6","text":"\u6307\u4ee4 \u5728 Terminal \u4e2d\u8f93\u5165 Write <code>code xxx.c</code> Compile <code>make xxx</code> Run <code>./xxx</code> <p>Write\u6307\u4ee4\u4e2d\u7684code\u7528\u6cd5\u8bf7\u6ce8\u610f\uff1a\u9996\u6b21\u8fd0\u884c VSCode \u65f6\uff0c\u9700\u8981\u6253\u5f00\u547d\u4ee4\u9762\u677f\uff08\u4f7f\u7528\u5feb\u6377\u952e F1 \u6216 Ctrl+Shift+P\uff09\uff0c\u7136\u540e\u641c\u7d22\u5e76\u6267\u884c Shell Command: Install 'code' command in PATH \u547d\u4ee4\u6765\u914d\u7f6e code \u547d\u4ee4\u3002</p>"},{"location":"Tutorial/IDE_VSCode/#java","title":"\u8fd0\u884cjava\u6587\u4ef6","text":"<ol> <li>\u524d\u7f6e\u6761\u4ef6\uff1a\u5b89\u88c5java extension pack\u548cJDK\u3002</li> <li>\u521b\u5efa\u9879\u76ee\uff1a<code>cmd+shift+p</code>\uff0c\u9009\u62e9<code>java: create java project</code></li> <li>\u8fd0\u884c\u6587\u4ef6\uff1a<ol> <li>\u4f7f\u7528 javac \u547d\u4ee4\u7f16\u8bd1 Java \u6587\u4ef6\u3002\u8fd9\u5c06\u751f\u6210\u4e00\u4e2a .class \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b Java \u5b57\u8282\u7801\u3002</li> <li>\u8f93\u5165\uff1a<code>javac HelloWorld.java</code></li> <li>\u6210\u529f\u7f16\u8bd1\u540e\uff0c\u4f60\u4f1a\u5728\u540c\u4e00\u76ee\u5f55\u4e2d\u770b\u5230\u4e00\u4e2a\u540d\u4e3a HelloWorld.class \u7684\u6587\u4ef6\u3002\u4f7f\u7528 java \u547d\u4ee4\u8fd0\u884c\u7f16\u8bd1\u540e\u7684 Java \u7c7b\uff1a<code>java HellowWorld</code></li> </ol> </li> </ol> <p>(1) create a java project:     mkdir MyJavaProject     cd MyJavaProject     mkdir -p src/main/java/com/example     touch src/main/java/com/example/Main.java (2) write java file (3) compile:     javac src/main/java/com/example/Main.java     java -cp src/main/java com.example.Main</p>"},{"location":"Tutorial/IDE_VSCode/#python-for-py","title":"Python for .py","text":"<p>compile:      python3 xxx.py REPL: (Read-Eval-Print Loop)     python3     # ...instructions     # quit() or exit() to quit     # Ctrl-d to stop</p>"},{"location":"Tutorial/Markdown/","title":"Markdown.md","text":"<p>vscode\u4e2d\u63d2\u4ef6\u9884\u89c8\uff1acmd+k, v</p>"},{"location":"Tutorial/Markdown/#_1","title":"\u4e00\u7ea7\u6807\u9898","text":""},{"location":"Tutorial/Markdown/#_2","title":"\u4e8c\u7ea7\u6807\u9898","text":""},{"location":"Tutorial/Markdown/#_3","title":"\u4e09\u7ea7\u6807\u9898","text":""},{"location":"Tutorial/Markdown/#_4","title":"\u56db\u7ea7\u6807\u9898","text":""},{"location":"Tutorial/Markdown/#_5","title":"\u4e94\u7ea7\u6807\u9898","text":"<p>\u6bb5\u843d\u6216\u666e\u901a\u7684\u5185\u5bb9</p> <p>\u52a0\u7c97</p> <p>\u5f15\u7528</p> <ol> <li>\u6709\u5e8f\u5217\u8868</li> <li>\u6709\u5e8f\u5217\u8868</li> <li>\u6709\u5e8f\u5217\u8868<ol> <li>\u6709\u5e8f\u5217\u8868<ol> <li>\u6709\u5e8f\u5217\u8868</li> <li>\u6709\u5e8f\u5217\u8868</li> </ol> </li> <li>\u6709\u5e8f\u5217\u8868</li> </ol> </li> <li>\u6709\u5e8f\u5217\u8868</li> </ol> <p><code>\u4ee3\u7801</code> (`\u7b26\u53f7\u5728tab\u952e\u4e0a\u9762)</p> <p>\u4ee3\u7801\u57571</p> <pre><code>\u4ee3\u7801\u5757\u81f3\u5c11\u9700\u89811\u4e2atab\u62164\u4e2a\u7a7a\u683c\uff0c\u4e0a\u9762\u7a7a\u4e00\u884c\n</code></pre> <p>\u4ee3\u7801\u57572</p> <pre><code>public class void main()....\n</code></pre> <p>python, c++, ruby, sql, bash, </p> <p>\u5206\u9694\u7ebf\uff1a\uff08\u63a8\u8350\u7528\u4e09\u4e2a\u7834\u6298\u53f7\uff0c\u5e76\u5728\u524d\u540e\u52a0\u7a7a\u767d\u884c\uff09</p> <p>\u8fd9\u662f\u4e00\u4e2a\u94fe\u63a5 Markdown\u8bed\u6cd5\u3002 \u8fd9\u662f\u4e00\u4e2a\u94fe\u63a5 Markdown\u8bed\u6cd5\u3002</p> <p>https://markdown.com.cn fake@example.com</p> <p>\\\uff08\u8f6c\u79fb\u7b26\u53f7\uff09</p>"},{"location":"Tutorial/mkdocs%20and%20github/","title":"mkdocs and github.md","text":""},{"location":"Tutorial/mkdocs%20and%20github/#_1","title":"\u4e3b\u8981\u5185\u5bb9","text":"<p>md\u6587\u4ef6\uff1a\u8bb0\u5f55\u3001\u5907\u5fd8\u5f55\u7b49 mkdocs\uff1a\u628amd\u6587\u4ef6\u751f\u6210\u4e3a\u9759\u6001\u7f51\u9875 material for mkdocs\uff1amkdocs\u7684\u4e00\u4e2a\u4e3b\u9898 github\uff1a\u4ee3\u7801\u6258\u7ba1\u7f51\u7ad9 github page\uff1a\u514d\u8d39\u7684\u9759\u6001\u7f51\u9875\uff0c\u53ef\u4ee5\u5b58\u653emkdocs</p>"},{"location":"Tutorial/mkdocs%20and%20github/#_2","title":"\u5e38\u89c4\u6d41\u7a0b\uff1a\u751f\u6210\u9759\u6001\u7f51\u9875","text":"<ol> <li>\u521b\u5efa\u4e00\u4e2a\u7528\u6765\u751f\u6210\u9759\u6001\u7f51\u9875\u7684\u9879\u76ee <code>cd ....</code> \u76ee\u5f55\u8f6c\u79fb\u5230\u4e34\u65f6\u7684\u6587\u4ef6\u5939 <code>mkdocs new my-project</code> <code>cd my-project</code></li> <li>\u6253\u5f00\u751f\u6210\u7684mkdocs.yml\u6587\u4ef6\uff0c\u4fee\u6539\u5185\u5bb9\u4e3a\u81ea\u52a8\u751f\u6210\u76ee\u5f55\uff0c\u4f8b\u5982\uff1a</li> </ol> <pre><code>site_name: Jeff Liu Lab's wiki\n\n# \u914d\u7f6eMaterial\u4e3b\u9898\ntheme:\n  name: 'material'\n\nplugins:\n  - search # MkDocs\u5185\u7f6e\u641c\u7d22\u63d2\u4ef6\n  - awesome-pages \n</code></pre> <ol> <li>\u5c06md\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u590d\u5236\u5230\u76ee\u5f55\u5185\u7684docs\u6587\u4ef6\u5939\u4e0b</li> <li>\u4f7f\u7528mkdocs\u751f\u6210\u9759\u6001\u7f51\u9875 <code>mkdocs build</code> \u751f\u6210\u597d\u7684\u9759\u6001\u6587\u4ef6\u5728site\u6587\u4ef6\u5939\u4e0b</li> <li>\u4f7f\u7528\u672c\u5730\u670d\u52a1\u5668\u68c0\u67e5 <code>mkdocs serve</code> \u8fd9\u5c06\u542f\u52a8\u4e00\u4e2a\u672c\u5730\u5f00\u53d1\u670d\u52a1\u5668\uff0c\u901a\u5e38\u4f1a\u5728 http://127.0.0.1:8000 \u63d0\u4f9b\u5b9e\u65f6\u9884\u89c8\u3002\u6bcf\u5f53\u4fee\u6539\u6587\u6863\u65f6\uff0c\u9875\u9762\u5c06\u81ea\u52a8\u5237\u65b0\u3002</li> <li>\u5c06\u9759\u6001\u7f51\u9875\u540c\u6b65\u5230github page \u5c06site\u6587\u4ef6\u5939\u5185\u7684\u6587\u4ef6\u540c\u6b65\u5230github page\u76f8\u5e94\u7684\u9879\u76ee\u4e2d (\u5982\u679c\u5fd8\u6389github\u5982\u4f55\u540c\u6b65\uff0c\u53c2\u89c1github\u76f8\u5173\u6587\u6863)</li> </ol>"},{"location":"Tutorial/mkdocs%20and%20github/#mkdocs","title":"\u5b89\u88c5mkdocs","text":"<ol> <li>\u5b89\u88c5mkdocs\uff1a<code>pip install mkdocs</code></li> <li>\u4f7f\u7528 mkdocs new \u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 MkDocs \u9879\u76ee\uff1a <code>mkdocs new my-project</code> <code>cd my-project</code> \u8fd9\u5c06\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a my-project \u7684\u6587\u4ef6\u5939\uff0c\u5e76\u5728\u5176\u4e2d\u751f\u6210\u4e00\u4e9b\u521d\u59cb\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u3002</li> <li>\u9879\u76ee\u76ee\u5f55\u7ed3\u6784\u5927\u81f4\u5982\u4e0b\uff1a my-project/     docs/         index.md     mkdocs.yml docs/ \u76ee\u5f55\uff1a\u5b58\u653e\u6240\u6709\u7684 Markdown \u6587\u4ef6\uff0c\u5373\u9879\u76ee\u6587\u6863\u5185\u5bb9\u3002 index.md \u6587\u4ef6\uff1a\u9ed8\u8ba4\u7684\u4e3b\u9875\u6587\u6863\u3002 mkdocs.yml \u6587\u4ef6\uff1a\u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6\u3002</li> <li>\u5728\u9879\u76ee\u76ee\u5f55\u4e2d\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 MkDocs \u5f00\u53d1\u670d\u52a1\u5668\uff1a <code>mkdocs serve</code> \u8fd9\u5c06\u542f\u52a8\u4e00\u4e2a\u672c\u5730\u5f00\u53d1\u670d\u52a1\u5668\uff0c\u901a\u5e38\u4f1a\u5728 http://127.0.0.1:8000 \u63d0\u4f9b\u5b9e\u65f6\u9884\u89c8\u3002\u6bcf\u5f53\u4fee\u6539\u6587\u6863\u65f6\uff0c\u9875\u9762\u5c06\u81ea\u52a8\u5237\u65b0\u3002</li> <li>\u914d\u7f6e\u9879\u76ee \u914d\u7f6e\u6587\u4ef6 mkdocs.yml \u7528\u4e8e\u81ea\u5b9a\u4e49\u7ad9\u70b9\u7684\u884c\u4e3a\u548c\u5916\u89c2\u3002</li> <li>\u6784\u5efa\u7ad9\u70b9 \u5f53\u4f60\u5b8c\u6210\u4e86\u6240\u6709\u7684\u6587\u6863\u7f16\u5199\uff0c\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210\u9759\u6001\u7f51\u7ad9\u6587\u4ef6\uff1a <code>mkdocs build</code> \u751f\u6210\u7684\u9759\u6001\u6587\u4ef6\u5c06\u4f4d\u4e8e site \u76ee\u5f55\u4e2d\u3002</li> </ol>"},{"location":"Tutorial/mkdocs%20and%20github/#_3","title":"\u81ea\u52a8\u751f\u6210\u76ee\u5f55\u63d2\u4ef6","text":"<ol> <li>\u5b89\u88c5mkdocs-awesome-pages-plugin\uff1a <code>pip install mkdocs-awesome-pages-plugin</code></li> <li>\u4f7f\u7528\u65b9\u6cd5 \u5728 mkdocs.yml \u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0 mkdocs-awesome-pages-plugin \u63d2\u4ef6\u914d\u7f6e\uff1a</li> </ol> <pre><code>site_name: My Project\ntheme: readthedocs\n\nplugins:\n  - search\n  - awesome-pages\n</code></pre> <p>MkDocs \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u987a\u5e8f\u6765\u751f\u6210\u5bfc\u822a\u83dc\u5355\u7684\uff0c\u8fd9\u901a\u5e38\u662f\u5b57\u6bcd\u987a\u5e8f\u3002awesome-pages \u63d2\u4ef6\u4e5f\u9075\u5faa\u8fd9\u4e00\u89c4\u5219\uff0c\u9664\u975e\u4f60\u660e\u786e\u6307\u5b9a\u4e86\u6392\u5e8f\u987a\u5e8f\u3002</p> <p>\u6ce8\u610f\uff1a1\u548c10\u5728mkdocs\u4e2d\u662f\u540c\u6837\u4f18\u5148\u7684\uff0c\u56e0\u6b64\u8bf7\u752801\u548c10\u6765\u8868\u793a\u987a\u5e8f\u3002</p>"},{"location":"Tutorial/MkDocs/404_mkdocs_excluded/","title":"404_mkdocs_excluded.md","text":"<p>\u8be5\u6587\u4ef6\u5939\u4e0b\u8fd8\u6ca1\u6709\u6587\u4ef6\uff01</p>"},{"location":"Tutorial/MkDocs/configuration/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"Tutorial/MkDocs/configuration/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Tutorial/MkDocs/configuration/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Wetware/About/","title":"About.md","text":"<p>\u6570\u5b57\u8ba1\u7b97\u673a\u7684limitation\uff1a \u75310\u548c1\u7ec4\u6210\uff0c\u5f88\u96be\u5177\u5907\u771f\u6b63\u7684\u7b26\u53f7\u903b\u8f91\u7406\u89e3\u80fd\u529b(human reasoning) AI\u754c\u8ba4\u4e3a\u6709\u4e2a\u5947\u70b9\u53ef\u4ee5\u8ba9\u8ba1\u7b97\u673a\u5177\u5907\u8fd9\u4e2a\u80fd\u529b \u4f46\u662f\u5f88\u591a\u4eba\u4e5f\u8ba4\u4e3a\u8ba1\u7b97\u673a\u7684\u6570\u5b57\u7cfb\u7edf\u7684\u56fa\u6709\u5c40\u9650\u6027\u5bfc\u81f4\u8ba1\u7b97\u673a\u6c38\u8fdc\u4e0d\u80fd\u5177\u5907\u771f\u6b63\u7684\u7b26\u53f7\u903b\u8f91\u7406\u89e3\u80fd\u529b</p> <p>\u89e3\u51b3\u65b9\u5f0f\uff1a 1\u3001Quantum Computer</p> <p>2\u3001Organic Computer (Wetware)</p> <p>KONIKU in California\uff0c\u4ed6\u4eec\u53c2\u4e0e\u4e86\u57f9\u517b\u795e\u7ecf\u5143\u5de5\u4f5c \u795e\u7ecf\u5143\u548c\u7535\u5b50\u7535\u8def\u7ed3\u5408\u8d77\u6765\uff0c\u8ba9\u795e\u7ecf\u5143\u548c\u7535\u8def\u4ea4\u4e92 \u5eb7\u67cf\u516c\u53f8\uff1f\u5eb7\u83f2\u516c\u53f8\uff1f\u5df2\u7ecf\u5f00\u53d1\u51fa\u556e\u9f7f\u52a8\u726980-100\u795e\u7ecf\u5143\u7684\u53ef\u63a2\u6d4b\u7206\u70b8\u65e0\u4eba\u673a\uff08\u6280\u672f\u672a\u516c\u5f00\uff09 \u8fd9\u4e2a\u65b9\u5411\u53ef\u80fd\u662f\u53d1\u5c55\u51fahuman reasoning\u6700\u6709\u53ef\u80fd\u7684\u65b9\u5411</p> <p>\u8fd9\u4e2a\u65b9\u5411\u5df2\u7ecf\u88ab\u5927\u81ea\u7136\u8bc1\u660e\u4e86\uff0c\u4f46\u662f\u4eba\u9020\u8fd8\u662f\u5b58\u5728\u5f88\u5927\u7684\u56f0\u96be \u5e76\u4e14\u5c06\u4f1a\u5236\u9020\u51fa\u5de8\u5927\u7684\u9053\u5fb7\u5371\u673a</p> <p>\u8db3\u591f\u7684\u795e\u7ecf\u5143\u80fd\u591f\u8bde\u751f\u5927\u8111\u610f\u8bc6\uff1f 500\u4e2a\u795e\u7ecf\u5143\u53ef\u4ee5\u4e3a\u65e0\u4eba\u9a7e\u9a76\u63d0\u4f9b\u52a8\u529b 1000\u4e2a\u795e\u7ecf\u5143\u53ef\u4ee5\u63d0\u4f9b\u89c6\u89c9\u80fd\u529b 100k\u4e2a\u795e\u7ecf\u5143\u53ef\u4ee5\u5b9e\u73b0\u590d\u6742\u673a\u5668\u8fd0\u52a8 1m\u4e2a\u795e\u7ecf\u5143\u53ef\u4ee5\u72ec\u7acb\u601d\u8003</p>"},{"location":"Wetware/Computing_Neuroscience/","title":"Computing_Neuroscience.md","text":"<p>Computing Neuroscience\uff08\u8ba1\u7b97\u795e\u7ecf\u79d1\u5b66\uff09 Computing neuroscience\uff0c\u4e5f\u79f0\u4e3a\u8ba1\u7b97\u795e\u7ecf\u79d1\u5b66\uff0c\u662f\u7814\u7a76\u795e\u7ecf\u7cfb\u7edf\u529f\u80fd\u548c\u884c\u4e3a\u7684\u8ba1\u7b97\u6a21\u578b\u548c\u7b97\u6cd5\u7684\u79d1\u5b66\u3002\u5b83\u4f7f\u7528\u6570\u5b66\u6a21\u578b\u3001\u8ba1\u7b97\u673a\u6a21\u62df\u548c\u6570\u636e\u5206\u6790\u6280\u672f\u6765\u7406\u89e3\u5927\u8111\u548c\u795e\u7ecf\u7cfb\u7edf\u7684\u5de5\u4f5c\u539f\u7406\u3002</p> <p>\u7814\u7a76\u76ee\u7684\uff1a\u63a2\u7d22\u548c\u89e3\u91ca\u795e\u7ecf\u7cfb\u7edf\u7684\u673a\u5236\u548c\u884c\u4e3a\uff0c\u901a\u8fc7\u8ba1\u7b97\u6a21\u578b\u6765\u9a8c\u8bc1\u548c\u9884\u6d4b\u795e\u7ecf\u79d1\u5b66\u7406\u8bba\u3002 \u5e94\u7528\uff1a\u7528\u4e8e\u7814\u7a76\u795e\u7ecf\u7cfb\u7edf\u7684\u7ed3\u6784\u548c\u529f\u80fd\u3001\u75be\u75c5\u673a\u5236\u3001\u795e\u7ecf\u7f51\u7edc\u5b66\u4e60\u89c4\u5219\u548c\u4fe1\u606f\u5904\u7406\u65b9\u5f0f\u7b49\u3002 \u5173\u952e\u7279\u6027\uff1a \u5efa\u7acb\u548c\u5206\u6790\u795e\u7ecf\u7f51\u7edc\u7684\u6570\u5b66\u6a21\u578b\u3002 \u89e3\u91ca\u5b9e\u9a8c\u6570\u636e\u548c\u795e\u7ecf\u7cfb\u7edf\u884c\u4e3a\u3002 \u591a\u5b66\u79d1\u4ea4\u53c9\uff0c\u5305\u62ec\u795e\u7ecf\u79d1\u5b66\u3001\u8ba1\u7b97\u673a\u79d1\u5b66\u3001\u6570\u5b66\u548c\u7269\u7406\u5b66\u3002</p>"},{"location":"Wetware/Neuromorphic_Computing/","title":"Neuromorphic_Computing.md","text":"<p>Neuromorphic Computing</p> <p>\u795e\u7ecf\u5f62\u6001\u8ba1\u7b97\uff0c\u610f\u5473\u7740\u8bbe\u8ba1\u65b0\u7684\u8ba1\u7b97\u673a\u82af\u7247</p> <p>\u4e0d\u7b49\u4e8e\u73b0\u5728\u7684\u795e\u7ecf\u7f51\u7edc\uff08\u540e\u8005\u662f\u6570\u5b57\u7535\u8111\u4e2d\u7684\u8f6f\u4ef6\u548c\u8ba1\u7b97\u65b9\u6cd5\uff0c\u524d\u8005\u662f\u786c\u4ef6\uff09</p> <p>Neuromorphic Computing\uff08\u795e\u7ecf\u5f62\u6001\u8ba1\u7b97\uff09 Neuromorphic computing \u662f\u4e00\u79cd\u4eff\u751f\u8ba1\u7b97\u65b9\u6cd5\uff0c\u5176\u8bbe\u8ba1\u7075\u611f\u6765\u81ea\u751f\u7269\u795e\u7ecf\u7cfb\u7edf\uff0c\u5c24\u5176\u662f\u4eba\u8111\u7684\u7ed3\u6784\u548c\u529f\u80fd\u3002\u5176\u76ee\u6807\u662f\u901a\u8fc7\u786c\u4ef6\u548c\u8f6f\u4ef6\u6a21\u62df\u795e\u7ecf\u5143\u548c\u7a81\u89e6\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u6765\u5b9e\u73b0\u9ad8\u6548\u7684\u8ba1\u7b97\u548c\u4fe1\u606f\u5904\u7406\u3002\u8fd9\u79cd\u65b9\u6cd5\u5e0c\u671b\u5229\u7528\u5927\u8111\u7684\u5e76\u884c\u5904\u7406\u80fd\u529b\u3001\u4f4e\u529f\u8017\u548c\u9ad8\u6548\u5b66\u4e60\u80fd\u529b\u6765\u89e3\u51b3\u590d\u6742\u7684\u8ba1\u7b97\u95ee\u9898\u3002</p> <p>\u786c\u4ef6\u5c42\u9762\uff1a\u795e\u7ecf\u5f62\u6001\u8ba1\u7b97\u4f7f\u7528\u7279\u5b9a\u8bbe\u8ba1\u7684\u82af\u7247\uff0c\u5982\u795e\u7ecf\u5f62\u6001\u82af\u7247\uff0c\u8fd9\u4e9b\u82af\u7247\u6a21\u62df\u795e\u7ecf\u5143\u548c\u7a81\u89e6\u7684\u7535\u5b66\u884c\u4e3a\u3002 \u5e94\u7528\uff1a\u5e7f\u6cdb\u5e94\u7528\u4e8e\u6a21\u5f0f\u8bc6\u522b\u3001\u611f\u77e5\u7cfb\u7edf\u3001\u673a\u5668\u4eba\u548c\u81ea\u52a8\u63a7\u5236\u7b49\u9886\u57df\u3002 \u5173\u952e\u7279\u6027\uff1a \u6a21\u62df\u751f\u7269\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784\u548c\u529f\u80fd\u3002 \u9ad8\u5ea6\u5e76\u884c\u5904\u7406\u3002 \u4f4e\u529f\u8017\u3002</p>"},{"location":"Wetware/Neuromorphic_Computing/#computing-neuroscience","title":"\u548ccomputing neuroscience\u7684\u533a\u522b","text":"<p>\u76ee\u6807\u548c\u5e94\u7528\uff1a \u795e\u7ecf\u5f62\u6001\u8ba1\u7b97\uff1a\u91cd\u70b9\u5728\u4e8e\u901a\u8fc7\u786c\u4ef6\u548c\u8f6f\u4ef6\u4eff\u751f\u6765\u6539\u8fdb\u8ba1\u7b97\u6280\u672f\uff0c\u5e94\u7528\u5728\u9ad8\u6548\u8ba1\u7b97\u548c\u4fe1\u606f\u5904\u7406\u9886\u57df\u3002 \u8ba1\u7b97\u795e\u7ecf\u79d1\u5b66\uff1a\u91cd\u70b9\u5728\u4e8e\u7406\u89e3\u795e\u7ecf\u7cfb\u7edf\u7684\u539f\u7406\u548c\u673a\u5236\uff0c\u4e3b\u8981\u5e94\u7528\u5728\u79d1\u5b66\u7814\u7a76\u548c\u7406\u8bba\u9a8c\u8bc1\u3002 \u65b9\u6cd5\u548c\u5de5\u5177\uff1a \u795e\u7ecf\u5f62\u6001\u8ba1\u7b97\uff1a\u66f4\u591a\u4f9d\u8d56\u4e8e\u786c\u4ef6\u8bbe\u8ba1\u548c\u5de5\u7a0b\u5b9e\u73b0\u3002 \u8ba1\u7b97\u795e\u7ecf\u79d1\u5b66\uff1a\u66f4\u591a\u4f9d\u8d56\u4e8e\u6570\u5b66\u5efa\u6a21\u548c\u8ba1\u7b97\u673a\u6a21\u62df\u3002 \u603b\u7ed3\u6765\u8bf4\uff0cNeuromorphic computing \u662f\u4e00\u79cd\u4eff\u751f\u8ba1\u7b97\u65b9\u6cd5\uff0c\u4e13\u6ce8\u4e8e\u901a\u8fc7\u6a21\u4eff\u751f\u7269\u795e\u7ecf\u7cfb\u7edf\u6765\u63d0\u5347\u8ba1\u7b97\u80fd\u529b\u548c\u6548\u7387\uff1b\u800c Computing neuroscience \u662f\u4e00\u79cd\u7814\u7a76\u65b9\u6cd5\uff0c\u4e13\u6ce8\u4e8e\u901a\u8fc7\u8ba1\u7b97\u6a21\u578b\u548c\u6a21\u62df\u6765\u7406\u89e3\u795e\u7ecf\u7cfb\u7edf\u7684\u5de5\u4f5c\u539f\u7406\u3002</p>"}]}